
IA Embarque.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb6c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022a4  0800cd40  0800cd40  0000dd40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe4  0800efe4  0001082c  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe4  0800efe4  0000ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efec  0800efec  0001082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efec  0800efec  0000ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eff0  0800eff0  0000fff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000082c  20000000  0800eff4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  20000840  0800f820  00010840  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00011000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001082c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fed  00000000  00000000  0001085c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041bc  00000000  00000000  00031849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00035a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001448  00000000  00000000  00037440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000367bc  00000000  00000000  00038888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b2a  00000000  00000000  0006f044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013f3f2  00000000  00000000  00091b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001d0f60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b8  00000000  00000000  001d0fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001d88a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000840 	.word	0x20000840
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cd14 	.word	0x0800cd14

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000844 	.word	0x20000844
 80001fc:	0800cd14 	.word	0x0800cd14

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f94d 	bl	8001832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f817 	bl	80005ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 faa0 	bl	8000ae0 <MX_GPIO_Init>
  MX_FMC_Init();
 80005a0:	f000 fa38 	bl	8000a14 <MX_FMC_Init>
  MX_I2C1_Init();
 80005a4:	f000 f864 	bl	8000670 <MX_I2C1_Init>
  MX_SAI1_Init();
 80005a8:	f000 f8a2 	bl	80006f0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005ac:	f000 f908 	bl	80007c0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80005b0:	f000 f92c 	bl	800080c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f968 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b8:	f000 f9b2 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005bc:	f000 f9fc 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005c0:	f008 fa7a 	bl	8008ab8 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005c4:	f008 fa86 	bl	8008ad4 <MX_X_CUBE_AI_Process>
 80005c8:	e7fc      	b.n	80005c4 <main+0x34>

080005ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b096      	sub	sp, #88	@ 0x58
 80005ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2244      	movs	r2, #68	@ 0x44
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00b fd61 	bl	800c0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 fecf 	bl	8002390 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005f8:	f000 fc90 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80005fc:	2330      	movs	r3, #48	@ 0x30
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	@ 0x60
 800060e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000614:	2301      	movs	r3, #1
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800061c:	233c      	movs	r3, #60	@ 0x3c
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000620:	2305      	movs	r3, #5
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f001 ff71 	bl	8002518 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800063c:	f000 fc6e 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fb77 	bl	8002d4c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000664:	f000 fc5a 	bl	8000f1c <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	@ 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <MX_I2C1_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <MX_I2C1_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006ac:	f001 fbea 	bl	8001e84 <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 fc31 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006be:	f001 fc7c 	bl	8001fba <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 fc28 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 fcbe 	bl	8002050 <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 fc1f 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000085c 	.word	0x2000085c
 80006e8:	40005400 	.word	0x40005400
 80006ec:	30a175ab 	.word	0x30a175ab

080006f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80006f4:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 80006f6:	4a30      	ldr	r2, [pc, #192]	@ (80007b8 <MX_SAI1_Init+0xc8>)
 80006f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000708:	2240      	movs	r2, #64	@ 0x40
 800070a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800070e:	2200      	movs	r2, #0
 8000710:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000714:	2200      	movs	r2, #0
 8000716:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000738:	4a20      	ldr	r2, [pc, #128]	@ (80007bc <MX_SAI1_Init+0xcc>)
 800073a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800076c:	2208      	movs	r2, #8
 800076e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000772:	2201      	movs	r2, #1
 8000774:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 8000796:	2201      	movs	r2, #1
 8000798:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_SAI1_Init+0xc4>)
 80007a2:	f004 fb37 	bl	8004e14 <HAL_SAI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007ac:	f000 fbb6 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200008b0 	.word	0x200008b0
 80007b8:	40015404 	.word	0x40015404
 80007bc:	0002ee00 	.word	0x0002ee00

080007c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <MX_SDMMC1_SD_Init+0x48>)
 80007c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007dc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_SDMMC1_SD_Init+0x44>)
 80007f2:	f004 fd27 	bl	8005244 <HAL_SD_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80007fc:	f000 fb8e 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000944 	.word	0x20000944
 8000808:	50062400 	.word	0x50062400

0800080c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_SPI2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000826:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800082a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_SPI2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_SPI2_Init+0x74>)
 800083a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000842:	2208      	movs	r2, #8
 8000844:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_SPI2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_SPI2_Init+0x74>)
 800085a:	2207      	movs	r2, #7
 800085c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_SPI2_Init+0x74>)
 8000866:	2208      	movs	r2, #8
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_SPI2_Init+0x74>)
 800086c:	f005 fde1 	bl	8006432 <HAL_SPI_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fb51 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200009c4 	.word	0x200009c4
 8000884:	40003800 	.word	0x40003800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f005 fe99 	bl	8006608 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 fb1e 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f006 fd8c 	bl	8007400 <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 fb15 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f006 fdc1 	bl	800747c <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fb0c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f006 fd42 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fb04 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000a28 	.word	0x20000a28
 800091c:	40004400 	.word	0x40004400

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <MX_USART3_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800096a:	f005 fe4d 	bl	8006608 <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fad2 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800097c:	f006 fd40 	bl	8007400 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fac9 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800098e:	f006 fd75 	bl	800747c <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fac0 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800099e:	f006 fcf6 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fab8 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000abc 	.word	0x20000abc
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f001 fb74 	bl	80020e8 <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 fa89 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000b50 	.word	0x20000b50

08000a14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00b fb3d 	bl	800c0a0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a28:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000a2c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a30:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <MX_FMC_Init+0xc8>)
 8000a32:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a48:	2210      	movs	r2, #16
 8000a4a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a52:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000aa2:	23ff      	movs	r3, #255	@ 0xff
 8000aa4:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_FMC_Init+0xc4>)
 8000ac2:	f005 fd59 	bl	8006578 <HAL_SRAM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000acc:	f000 fa26 	bl	8000f1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20001034 	.word	0x20001034
 8000adc:	a0000104 	.word	0xa0000104

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000af6:	4bb2      	ldr	r3, [pc, #712]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4ab1      	ldr	r2, [pc, #708]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4baf      	ldr	r3, [pc, #700]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4bac      	ldr	r3, [pc, #688]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4aab      	ldr	r2, [pc, #684]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4ba9      	ldr	r3, [pc, #676]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	4ba6      	ldr	r3, [pc, #664]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4aa5      	ldr	r2, [pc, #660]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4ba3      	ldr	r3, [pc, #652]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4ba0      	ldr	r3, [pc, #640]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a9f      	ldr	r2, [pc, #636]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b9d      	ldr	r3, [pc, #628]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b9a      	ldr	r3, [pc, #616]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a99      	ldr	r2, [pc, #612]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b97      	ldr	r3, [pc, #604]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b94      	ldr	r3, [pc, #592]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4a93      	ldr	r2, [pc, #588]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4b91      	ldr	r3, [pc, #580]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b86:	f001 fcb7 	bl	80024f8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a8c      	ldr	r2, [pc, #560]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b8a      	ldr	r3, [pc, #552]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b87      	ldr	r3, [pc, #540]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a86      	ldr	r2, [pc, #536]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b84      	ldr	r3, [pc, #528]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bba:	4b81      	ldr	r3, [pc, #516]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a80      	ldr	r2, [pc, #512]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f244 0114 	movw	r1, #16404	@ 0x4014
 8000bd8:	487a      	ldr	r0, [pc, #488]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000bda:	f001 f93b 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be4:	4878      	ldr	r0, [pc, #480]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000be6:	f001 f935 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf2:	f001 f92f 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4874      	ldr	r0, [pc, #464]	@ (8000dcc <MX_GPIO_Init+0x2ec>)
 8000bfc:	f001 f92a 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000c00:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c12:	2305      	movs	r3, #5
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	486c      	ldr	r0, [pc, #432]	@ (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000c1e:	f000 ff87 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000c22:	f244 0314 	movw	r3, #16404	@ 0x4014
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4862      	ldr	r0, [pc, #392]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000c3c:	f000 ff78 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c40:	2310      	movs	r3, #16
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c50:	2302      	movs	r3, #2
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	485c      	ldr	r0, [pc, #368]	@ (8000dcc <MX_GPIO_Init+0x2ec>)
 8000c5c:	f000 ff68 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c60:	23b0      	movs	r3, #176	@ 0xb0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c70:	230a      	movs	r3, #10
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4855      	ldr	r0, [pc, #340]	@ (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000c7c:	f000 ff58 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c80:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	484d      	ldr	r0, [pc, #308]	@ (8000dd4 <MX_GPIO_Init+0x2f4>)
 8000c9e:	f000 ff47 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4846      	ldr	r0, [pc, #280]	@ (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000cb8:	f000 ff3a 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000cbc:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000cce:	230a      	movs	r3, #10
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	483a      	ldr	r0, [pc, #232]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000cda:	f000 ff29 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4832      	ldr	r0, [pc, #200]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000cfc:	f000 ff18 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000d00:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000d12:	2305      	movs	r3, #5
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4829      	ldr	r0, [pc, #164]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000d1e:	f000 ff07 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4823      	ldr	r0, [pc, #140]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000d3c:	f000 fef8 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000d40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d46:	2312      	movs	r3, #18
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d52:	2304      	movs	r3, #4
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <MX_GPIO_Init+0x2f4>)
 8000d5e:	f000 fee7 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d62:	2340      	movs	r3, #64	@ 0x40
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4814      	ldr	r0, [pc, #80]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000d78:	f000 feda 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d7c:	2384      	movs	r3, #132	@ 0x84
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000d98:	f000 feca 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dac:	2308      	movs	r3, #8
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000db8:	f000 feba 	bl	8001b30 <HAL_GPIO_Init>
 8000dbc:	e00c      	b.n	8000dd8 <MX_GPIO_Init+0x2f8>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48001c00 	.word	0x48001c00
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48002000 	.word	0x48002000
 8000dd4:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000dd8:	2318      	movs	r3, #24
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4849      	ldr	r0, [pc, #292]	@ (8000f10 <MX_GPIO_Init+0x430>)
 8000dec:	f000 fea0 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000df0:	2381      	movs	r3, #129	@ 0x81
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df4:	230b      	movs	r3, #11
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f000 fe93 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f000 fe82 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e2c:	2340      	movs	r3, #64	@ 0x40
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e46:	f000 fe73 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f000 fe62 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e7e:	230b      	movs	r3, #11
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4822      	ldr	r0, [pc, #136]	@ (8000f14 <MX_GPIO_Init+0x434>)
 8000e8a:	f000 fe51 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f000 fe40 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb4:	230b      	movs	r3, #11
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <MX_GPIO_Init+0x438>)
 8000ec4:	f000 fe34 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <MX_GPIO_Init+0x438>)
 8000ee0:	f000 fe26 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_GPIO_Init+0x438>)
 8000f02:	f000 fe15 	bl	8001b30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	@ 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48001400 	.word	0x48001400
 8000f18:	48000400 	.word	0x48000400

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <Error_Handler+0x8>

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0b2      	sub	sp, #200	@ 0xc8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	229c      	movs	r2, #156	@ 0x9c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f885 	bl	800c0a0 <memset>
  if(hi2c->Instance==I2C1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <HAL_I2C_MspInit+0xf8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d15e      	bne.n	800105e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa0:	2340      	movs	r3, #64	@ 0x40
 8000fa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 f987 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fb8:	f7ff ffb0 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd4:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	4a24      	ldr	r2, [pc, #144]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fec:	f001 fa84 	bl	80024f8 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001008:	2304      	movs	r3, #4
 800100a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001012:	4619      	mov	r1, r3
 8001014:	4816      	ldr	r0, [pc, #88]	@ (8001070 <HAL_I2C_MspInit+0x100>)
 8001016:	f000 fd8b 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001034:	2304      	movs	r3, #4
 8001036:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <HAL_I2C_MspInit+0x104>)
 8001042:	f000 fd75 	bl	8001b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 800104c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001050:	6593      	str	r3, [r2, #88]	@ 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_I2C_MspInit+0xfc>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	37c8      	adds	r7, #200	@ 0xc8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40005400 	.word	0x40005400
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400
 8001074:	48001800 	.word	0x48001800

08001078 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0b2      	sub	sp, #200	@ 0xc8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	229c      	movs	r2, #156	@ 0x9c
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00b f801 	bl	800c0a0 <memset>
  if(hsd->Instance==SDMMC1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a33      	ldr	r2, [pc, #204]	@ (8001170 <HAL_SD_MspInit+0xf8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d15f      	bne.n	8001168 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f900 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010c6:	f7ff ff29 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a29      	ldr	r2, [pc, #164]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_SD_MspInit+0xfc>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001112:	2304      	movs	r3, #4
 8001114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800112a:	230c      	movs	r3, #12
 800112c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001134:	4619      	mov	r1, r3
 8001136:	4810      	ldr	r0, [pc, #64]	@ (8001178 <HAL_SD_MspInit+0x100>)
 8001138:	f000 fcfa 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 800113c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001156:	230c      	movs	r3, #12
 8001158:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <HAL_SD_MspInit+0x104>)
 8001164:	f000 fce4 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001168:	bf00      	nop
 800116a:	37c8      	adds	r7, #200	@ 0xc8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	50062400 	.word	0x50062400
 8001174:	40021000 	.word	0x40021000
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48000800 	.word	0x48000800

08001180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <HAL_SPI_MspInit+0xb4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d144      	bne.n	800122c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ae:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_SPI_MspInit+0xb8>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <HAL_SPI_MspInit+0xbc>)
 8001206:	f000 fc93 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 800120a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121c:	2305      	movs	r3, #5
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <HAL_SPI_MspInit+0xc0>)
 8001228:	f000 fc82 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40003800 	.word	0x40003800
 8001238:	40021000 	.word	0x40021000
 800123c:	48002000 	.word	0x48002000
 8001240:	48000400 	.word	0x48000400

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b4      	sub	sp, #208	@ 0xd0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	229c      	movs	r2, #156	@ 0x9c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00a ff1b 	bl	800c0a0 <memset>
  if(huart->Instance==USART2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a54      	ldr	r2, [pc, #336]	@ (80013c0 <HAL_UART_MspInit+0x17c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d13c      	bne.n	80012ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4618      	mov	r0, r3
 8001282:	f002 f81d 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800128c:	f7ff fe46 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001290:	4b4c      	ldr	r3, [pc, #304]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	4a4b      	ldr	r2, [pc, #300]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129a:	6593      	str	r3, [r2, #88]	@ 0x58
 800129c:	4b49      	ldr	r3, [pc, #292]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b46      	ldr	r3, [pc, #280]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80012c0:	230c      	movs	r3, #12
 80012c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d8:	2307      	movs	r3, #7
 80012da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f000 fc22 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ec:	e063      	b.n	80013b6 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a35      	ldr	r2, [pc, #212]	@ (80013c8 <HAL_UART_MspInit+0x184>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d15e      	bne.n	80013b6 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012f8:	2304      	movs	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4618      	mov	r0, r3
 8001306:	f001 ffdb 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001310:	f7ff fe04 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a24      	ldr	r2, [pc, #144]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_UART_MspInit+0x180>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800135c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001376:	2307      	movs	r3, #7
 8001378:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f000 fbd3 	bl	8001b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800138a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800138e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a4:	2307      	movs	r3, #7
 80013a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013ae:	4619      	mov	r1, r3
 80013b0:	4806      	ldr	r0, [pc, #24]	@ (80013cc <HAL_UART_MspInit+0x188>)
 80013b2:	f000 fbbd 	bl	8001b30 <HAL_GPIO_Init>
}
 80013b6:	bf00      	nop
 80013b8:	37d0      	adds	r7, #208	@ 0xd0
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40004800 	.word	0x40004800
 80013cc:	48000400 	.word	0x48000400

080013d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0b2      	sub	sp, #200	@ 0xc8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	229c      	movs	r2, #156	@ 0x9c
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00a fe55 	bl	800c0a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013fe:	d16c      	bne.n	80014da <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001400:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001404:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f001 ff55 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800141c:	f7ff fd7e 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	4a2f      	ldr	r2, [pc, #188]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142c:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 8001438:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800143c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001452:	230a      	movs	r3, #10
 8001454:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001462:	f000 fb65 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8001466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001484:	f000 fb54 	bl	8001b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 800148e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d114      	bne.n	80014d6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80014c4:	f001 f808 	bl	80024d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <HAL_PCD_MspInit+0x114>)
 80014ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014d4:	e001      	b.n	80014da <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 80014d6:	f000 ffff 	bl	80024d8 <HAL_PWREx_EnableVddUSB>
}
 80014da:	bf00      	nop
 80014dc:	37c8      	adds	r7, #200	@ 0xc8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014fc:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <HAL_FMC_MspInit+0xe0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d15d      	bne.n	80015c0 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_FMC_MspInit+0xe0>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <HAL_FMC_MspInit+0xe4>)
 800150c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800150e:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <HAL_FMC_MspInit+0xe4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6513      	str	r3, [r2, #80]	@ 0x50
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_FMC_MspInit+0xe4>)
 8001518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001522:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 8001526:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4824      	ldr	r0, [pc, #144]	@ (80015d0 <HAL_FMC_MspInit+0xe8>)
 800153e:	f000 faf7 	bl	8001b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001542:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001546:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001554:	230c      	movs	r3, #12
 8001556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	481d      	ldr	r0, [pc, #116]	@ (80015d4 <HAL_FMC_MspInit+0xec>)
 800155e:	f000 fae7 	bl	8001b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001562:	2380      	movs	r3, #128	@ 0x80
 8001564:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <HAL_FMC_MspInit+0xf0>)
 800157c:	f000 fad8 	bl	8001b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001580:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001584:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4810      	ldr	r0, [pc, #64]	@ (80015dc <HAL_FMC_MspInit+0xf4>)
 800159c:	f000 fac8 	bl	8001b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80015a0:	233f      	movs	r3, #63	@ 0x3f
 80015a2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b0:	230c      	movs	r3, #12
 80015b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <HAL_FMC_MspInit+0xf8>)
 80015ba:	f000 fab9 	bl	8001b30 <HAL_GPIO_Init>
 80015be:	e000      	b.n	80015c2 <HAL_FMC_MspInit+0xda>
    return;
 80015c0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20001084 	.word	0x20001084
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48001000 	.word	0x48001000
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48001400 	.word	0x48001400
 80015e0:	48001800 	.word	0x48001800

080015e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015ec:	f7ff ff7c 	bl	80014e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0b0      	sub	sp, #192	@ 0xc0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	229c      	movs	r2, #156	@ 0x9c
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f00a fd49 	bl	800c0a0 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a32      	ldr	r2, [pc, #200]	@ (80016dc <HAL_SAI_MspInit+0xe4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d15d      	bne.n	80016d4 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800161c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800161e:	2300      	movs	r3, #0
 8001620:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800162a:	2310      	movs	r3, #16
 800162c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800163a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fe3b 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001650:	f7ff fc64 	bl	8000f1c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <HAL_SAI_MspInit+0xe8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <HAL_SAI_MspInit+0xec>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001660:	4a20      	ldr	r2, [pc, #128]	@ (80016e4 <HAL_SAI_MspInit+0xec>)
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001666:	6613      	str	r3, [r2, #96]	@ 0x60
 8001668:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HAL_SAI_MspInit+0xec>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_SAI_MspInit+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_SAI_MspInit+0xe8>)
 800167c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800167e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001698:	230d      	movs	r3, #13
 800169a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <HAL_SAI_MspInit+0xf0>)
 80016a6:	f000 fa43 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80016aa:	2364      	movs	r3, #100	@ 0x64
 80016ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016c2:	230d      	movs	r3, #13
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	@ (80016ec <HAL_SAI_MspInit+0xf4>)
 80016d0:	f000 fa2e 	bl	8001b30 <HAL_GPIO_Init>

    }
}
 80016d4:	bf00      	nop
 80016d6:	37c0      	adds	r7, #192	@ 0xc0
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40015404 	.word	0x40015404
 80016e0:	20001088 	.word	0x20001088
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48001000 	.word	0x48001000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f8c9 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f00a fcec 	bl	800c15c <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200a0000 	.word	0x200a0000
 80017b0:	00000800 	.word	0x00000800
 80017b4:	2000108c 	.word	0x2000108c
 80017b8:	20040000 	.word	0x20040000

080017bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001818 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff ffea 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f00a fcab 	bl	800c168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7fe febd 	bl	8000590 <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001818:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000082c 	.word	0x2000082c
  ldr r2, =_sidata
 8001824:	0800eff4 	.word	0x0800eff4
  ldr r2, =_sbss
 8001828:	20000840 	.word	0x20000840
  ldr r4, =_ebss
 800182c:	200021ac 	.word	0x200021ac

08001830 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_IRQHandler>

08001832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f943 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f80e 	bl	8001864 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001854:	f7ff fb68 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001858:	79fb      	ldrb	r3, [r7, #7]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001870:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_InitTick+0x6c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_InitTick+0x70>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f941 	bl	8001b16 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d809      	bhi.n	80018b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f919 	bl	8001ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_InitTick+0x74>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e007      	b.n	80018c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e004      	b.n	80018c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e001      	b.n	80018c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	20001090 	.word	0x20001090

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20001090 	.word	0x20001090

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff47 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff5c 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffb0 	bl	8001a84 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e166      	b.n	8001e0e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8158 	beq.w	8001e08 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x40>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	6939      	ldr	r1, [r7, #16]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80b2 	beq.w	8001e08 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b61      	ldr	r3, [pc, #388]	@ (8001e2c <HAL_GPIO_Init+0x2fc>)
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca8:	4a60      	ldr	r2, [pc, #384]	@ (8001e2c <HAL_GPIO_Init+0x2fc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e2c <HAL_GPIO_Init+0x2fc>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8001e30 <HAL_GPIO_Init+0x300>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ce6:	d02b      	beq.n	8001d40 <HAL_GPIO_Init+0x210>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a52      	ldr	r2, [pc, #328]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d025      	beq.n	8001d3c <HAL_GPIO_Init+0x20c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a51      	ldr	r2, [pc, #324]	@ (8001e38 <HAL_GPIO_Init+0x308>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d01f      	beq.n	8001d38 <HAL_GPIO_Init+0x208>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a50      	ldr	r2, [pc, #320]	@ (8001e3c <HAL_GPIO_Init+0x30c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d019      	beq.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4f      	ldr	r2, [pc, #316]	@ (8001e40 <HAL_GPIO_Init+0x310>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x200>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e44 <HAL_GPIO_Init+0x314>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1fc>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_GPIO_Init+0x318>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1f8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_GPIO_Init+0x31c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1f4>
 8001d20:	2307      	movs	r3, #7
 8001d22:	e00e      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d24:	2308      	movs	r3, #8
 8001d26:	e00c      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d28:	2306      	movs	r3, #6
 8001d2a:	e00a      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	e008      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d40:	2300      	movs	r3, #0
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d52:	4937      	ldr	r1, [pc, #220]	@ (8001e30 <HAL_GPIO_Init+0x300>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d84:	4a32      	ldr	r2, [pc, #200]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dae:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db4:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e02:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <HAL_GPIO_Init+0x320>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f ae91 	bne.w	8001b40 <HAL_GPIO_Init+0x10>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	48001000 	.word	0x48001000
 8001e44:	48001400 	.word	0x48001400
 8001e48:	48001800 	.word	0x48001800
 8001e4c:	48001c00 	.word	0x48001c00
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e08d      	b.n	8001fb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff f860 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	@ 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d108      	bne.n	8001f26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	e007      	b.n	8001f36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69d9      	ldr	r1, [r3, #28]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d138      	bne.n	8002042 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e032      	b.n	8002044 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2224      	movs	r2, #36	@ 0x24
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800200c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	d139      	bne.n	80020da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002070:	2302      	movs	r3, #2
 8002072:	e033      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	@ 0x24
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e101      	b.n	80022fe <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff f95e 	bl	80013d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f006 f897 	bl	800825a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7c1a      	ldrb	r2, [r3, #16]
 8002134:	f88d 2000 	strb.w	r2, [sp]
 8002138:	3304      	adds	r3, #4
 800213a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213c:	f006 f860 	bl	8008200 <USB_CoreInit>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0d5      	b.n	80022fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f006 f88f 	bl	800827c <USB_SetCurrentMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0c6      	b.n	80022fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e04a      	b.n	800220c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3315      	adds	r3, #21
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3314      	adds	r3, #20
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	b298      	uxth	r0, r3
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	332e      	adds	r3, #46	@ 0x2e
 80021b2:	4602      	mov	r2, r0
 80021b4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3318      	adds	r3, #24
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	331c      	adds	r3, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3320      	adds	r3, #32
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3324      	adds	r3, #36	@ 0x24
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3af      	bcc.n	8002176 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e044      	b.n	80022a6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	3301      	adds	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3b5      	bcc.n	800221c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7c1a      	ldrb	r2, [r3, #16]
 80022b8:	f88d 2000 	strb.w	r2, [sp]
 80022bc:	3304      	adds	r3, #4
 80022be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c0:	f006 f828 	bl	8008314 <USB_DevInit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e013      	b.n	80022fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f80a 	bl	8002306 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f006 f9cd 	bl	8008696 <USB_DevDisconnect>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	f043 0303 	orr.w	r3, r3, #3
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002360:	d102      	bne.n	8002368 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002366:	e00b      	b.n	8002380 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002368:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_PWREx_GetVoltageRange+0x3c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002376:	d102      	bne.n	800237e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800237c:	e000      	b.n	8002380 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800237e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000

08002390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d141      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800239e:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023aa:	d131      	bne.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ac:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b2:	4a46      	ldr	r2, [pc, #280]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023bc:	4b43      	ldr	r3, [pc, #268]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023c4:	4a41      	ldr	r2, [pc, #260]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023cc:	4b40      	ldr	r3, [pc, #256]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2232      	movs	r2, #50	@ 0x32
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4a3f      	ldr	r2, [pc, #252]	@ (80024d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	3301      	adds	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e2:	e002      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f6:	d102      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f2      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023fe:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240a:	d158      	bne.n	80024be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e057      	b.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002410:	4b2e      	ldr	r3, [pc, #184]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002416:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800241c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002420:	e04d      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002428:	d141      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800242a:	4b28      	ldr	r3, [pc, #160]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002436:	d131      	bne.n	800249c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243e:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002444:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002448:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002450:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2232      	movs	r2, #50	@ 0x32
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246e:	e002      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3b01      	subs	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002482:	d102      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f2      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d112      	bne.n	80024be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e011      	b.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024ac:	e007      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024ae:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40007000 	.word	0x40007000
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e6:	6053      	str	r3, [r2, #4]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000

080024f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002506:	6053      	str	r3, [r2, #4]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40007000 	.word	0x40007000

08002518 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f000 bc08 	b.w	8002d3c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252c:	4b96      	ldr	r3, [pc, #600]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002536:	4b94      	ldr	r3, [pc, #592]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80e4 	beq.w	8002716 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_RCC_OscConfig+0x4c>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	f040 808b 	bne.w	8002672 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8087 	bne.w	8002672 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002564:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x64>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e3df      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	4b81      	ldr	r3, [pc, #516]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_RCC_OscConfig+0x7e>
 800258c:	4b7e      	ldr	r3, [pc, #504]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002594:	e005      	b.n	80025a2 <HAL_RCC_OscConfig+0x8a>
 8002596:	4b7c      	ldr	r3, [pc, #496]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d223      	bcs.n	80025ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fdca 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e3c0      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ba:	4b73      	ldr	r3, [pc, #460]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a72      	ldr	r2, [pc, #456]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	496d      	ldr	r1, [pc, #436]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4968      	ldr	r1, [pc, #416]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	e025      	b.n	800263a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ee:	4b66      	ldr	r3, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a65      	ldr	r2, [pc, #404]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b63      	ldr	r3, [pc, #396]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4960      	ldr	r1, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260c:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	495b      	ldr	r1, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fd8a 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e380      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263a:	f000 fcc1 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4950      	ldr	r1, [pc, #320]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a4e      	ldr	r2, [pc, #312]	@ (8002790 <HAL_RCC_OscConfig+0x278>)
 8002658:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800265a:	4b4e      	ldr	r3, [pc, #312]	@ (8002794 <HAL_RCC_OscConfig+0x27c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f900 	bl	8001864 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d052      	beq.n	8002714 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	e364      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d032      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800267a:	4b43      	ldr	r3, [pc, #268]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a42      	ldr	r2, [pc, #264]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002686:	f7ff f93d 	bl	8001904 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268e:	f7ff f939 	bl	8001904 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e34d      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a0:	4b39      	ldr	r3, [pc, #228]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ac:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a35      	ldr	r2, [pc, #212]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4930      	ldr	r1, [pc, #192]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	492b      	ldr	r1, [pc, #172]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
 80026de:	e01a      	b.n	8002716 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ec:	f7ff f90a 	bl	8001904 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f4:	f7ff f906 	bl	8001904 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e31a      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1dc>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d073      	beq.n	800280a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d005      	beq.n	8002734 <HAL_RCC_OscConfig+0x21c>
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d10e      	bne.n	800274c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d063      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d15f      	bne.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2f7      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x24c>
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e025      	b.n	80027b0 <HAL_RCC_OscConfig+0x298>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276c:	d114      	bne.n	8002798 <HAL_RCC_OscConfig+0x280>
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a02      	ldr	r2, [pc, #8]	@ (8002788 <HAL_RCC_OscConfig+0x270>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e013      	b.n	80027b0 <HAL_RCC_OscConfig+0x298>
 8002788:	40021000 	.word	0x40021000
 800278c:	0800cf48 	.word	0x0800cf48
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004
 8002798:	4ba0      	ldr	r3, [pc, #640]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a9f      	ldr	r2, [pc, #636]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b9d      	ldr	r3, [pc, #628]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a9c      	ldr	r2, [pc, #624]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f8a4 	bl	8001904 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff f8a0 	bl	8001904 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e2b4      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	4b92      	ldr	r3, [pc, #584]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2a8>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7ff f890 	bl	8001904 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f88c 	bl	8001904 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2a0      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fa:	4b88      	ldr	r3, [pc, #544]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2d0>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d060      	beq.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x310>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d119      	bne.n	8002856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d116      	bne.n	8002856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	4b7c      	ldr	r3, [pc, #496]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x328>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e27d      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4973      	ldr	r1, [pc, #460]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e040      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d023      	beq.n	80028a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7ff f84b 	bl	8001904 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002872:	f7ff f847 	bl	8001904 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e25b      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002884:	4b65      	ldr	r3, [pc, #404]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b62      	ldr	r3, [pc, #392]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	495f      	ldr	r1, [pc, #380]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7ff f827 	bl	8001904 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7ff f823 	bl	8001904 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e237      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d03c      	beq.n	800295e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01c      	beq.n	8002926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	4a4a      	ldr	r2, [pc, #296]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7ff f802 	bl	8001904 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fffe 	bl	8001904 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e212      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCC_OscConfig+0x3ec>
 8002924:	e01b      	b.n	800295e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe ffe5 	bl	8001904 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe ffe1 	bl	8001904 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1f5      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ef      	bne.n	800293e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80a6 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002970:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	4b27      	ldr	r3, [pc, #156]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	4a26      	ldr	r2, [pc, #152]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002986:	6593      	str	r3, [r2, #88]	@ 0x58
 8002988:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002998:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <HAL_RCC_OscConfig+0x508>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d118      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b0:	f7fe ffa8 	bl	8001904 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b8:	f7fe ffa4 	bl	8001904 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1b8      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4d8>
 80029de:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ee:	e029      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_OscConfig+0x50c>
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	4a07      	ldr	r2, [pc, #28]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	4a03      	ldr	r2, [pc, #12]	@ (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	4b9d      	ldr	r3, [pc, #628]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2a:	4a9c      	ldr	r2, [pc, #624]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a34:	4b99      	ldr	r3, [pc, #612]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	4a98      	ldr	r2, [pc, #608]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe ff5a 	bl	8001904 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe ff56 	bl	8001904 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e168      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ed      	beq.n	8002a54 <HAL_RCC_OscConfig+0x53c>
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe ff43 	bl	8001904 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe ff3f 	bl	8001904 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e151      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a98:	4b80      	ldr	r3, [pc, #512]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ed      	bne.n	8002a82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b7b      	ldr	r3, [pc, #492]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	4a7a      	ldr	r2, [pc, #488]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002acc:	4b73      	ldr	r3, [pc, #460]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ad2:	4a72      	ldr	r2, [pc, #456]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe ff12 	bl	8001904 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae4:	f7fe ff0e 	bl	8001904 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e122      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af6:	4b69      	ldr	r3, [pc, #420]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ef      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x5cc>
 8002b04:	e01b      	b.n	8002b3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b06:	4b65      	ldr	r3, [pc, #404]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b0c:	4a63      	ldr	r2, [pc, #396]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fef5 	bl	8001904 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1e:	f7fe fef1 	bl	8001904 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e105      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b30:	4b5a      	ldr	r3, [pc, #360]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ef      	bne.n	8002b1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80f9 	beq.w	8002d3a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f040 80cf 	bne.w	8002cf0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b52:	4b52      	ldr	r3, [pc, #328]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0203 	and.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d12c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	3b01      	subs	r3, #1
 8002b72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d123      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d11b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d113      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d071      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d068      	beq.n	8002c98 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bc6:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bd2:	4b32      	ldr	r3, [pc, #200]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0ac      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002be2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bee:	f7fe fe89 	bl	8001904 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fe85 	bl	8001904 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e099      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c14:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_RCC_OscConfig+0x788>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c24:	3a01      	subs	r2, #1
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c2e:	0212      	lsls	r2, r2, #8
 8002c30:	4311      	orrs	r1, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c36:	0852      	lsrs	r2, r2, #1
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0552      	lsls	r2, r2, #21
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c4e:	06d2      	lsls	r2, r2, #27
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4912      	ldr	r1, [pc, #72]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c64:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c70:	f7fe fe48 	bl	8001904 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fe44 	bl	8001904 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e058      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c96:	e050      	b.n	8002d3a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04f      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca4:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d144      	bne.n	8002d3a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a20      	ldr	r2, [pc, #128]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc8:	f7fe fe1c 	bl	8001904 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fe18 	bl	8001904 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e02c      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x7b8>
 8002cee:	e024      	b.n	8002d3a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d01f      	beq.n	8002d36 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fdff 	bl	8001904 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fe fdfb 	bl	8001904 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	4905      	ldr	r1, [pc, #20]	@ (8002d44 <HAL_RCC_OscConfig+0x82c>)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x830>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e001      	b.n	8002d3a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	feeefffc 	.word	0xfeeefffc

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e11d      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b90      	ldr	r3, [pc, #576]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	498b      	ldr	r1, [pc, #556]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b89      	ldr	r3, [pc, #548]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e105      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b81      	ldr	r3, [pc, #516]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	497b      	ldr	r1, [pc, #492]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d079      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d11e      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	4b75      	ldr	r3, [pc, #468]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0dc      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002de6:	f000 fa07 	bl	80031f8 <RCC_GetSysClockFreqFromPLLSource>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a70      	ldr	r2, [pc, #448]	@ (8002fb0 <HAL_RCC_ClockConfig+0x264>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d946      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002df2:	4b6e      	ldr	r3, [pc, #440]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d140      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e06:	4a69      	ldr	r2, [pc, #420]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e035      	b.n	8002e80 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1c:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d115      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b9      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e34:	4b5d      	ldr	r3, [pc, #372]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0ad      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e44:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0a5      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e54:	f000 f8b4 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a55      	ldr	r2, [pc, #340]	@ (8002fb0 <HAL_RCC_ClockConfig+0x264>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d90f      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e60:	4b52      	ldr	r3, [pc, #328]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e74:	4a4d      	ldr	r2, [pc, #308]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e80:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 0203 	bic.w	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4947      	ldr	r1, [pc, #284]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fd37 	bl	8001904 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fe fd33 	bl	8001904 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e077      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 020c 	and.w	r2, r3, #12
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d1eb      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ec8:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a37      	ldr	r2, [pc, #220]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ed2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d208      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	492b      	ldr	r1, [pc, #172]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f02:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d210      	bcs.n	8002f32 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 020f 	bic.w	r2, r3, #15
 8002f18:	4923      	ldr	r1, [pc, #140]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e036      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4918      	ldr	r1, [pc, #96]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5c:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4910      	ldr	r1, [pc, #64]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f70:	f000 f826 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	490c      	ldr	r1, [pc, #48]	@ (8002fb4 <HAL_RCC_ClockConfig+0x268>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x26c>)
 8002f8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <HAL_RCC_ClockConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fc65 	bl	8001864 <HAL_InitTick>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	04c4b400 	.word	0x04c4b400
 8002fb4:	0800cf48 	.word	0x0800cf48
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	@ 0x24
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fce:	4b3e      	ldr	r3, [pc, #248]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d11e      	bne.n	8003032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff4:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003000:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e005      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003010:	4b2d      	ldr	r3, [pc, #180]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800301c:	4a2b      	ldr	r2, [pc, #172]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10d      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b04      	cmp	r3, #4
 8003036:	d102      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003038:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e004      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d101      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003044:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d134      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304e:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0xa6>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d003      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xac>
 8003064:	e005      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003066:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003068:	617b      	str	r3, [r7, #20]
      break;
 800306a:	e005      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800306c:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800306e:	617b      	str	r3, [r7, #20]
      break;
 8003070:	e002      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003078:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3301      	adds	r3, #1
 8003084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003086:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	fb03 f202 	mul.w	r2, r3, r2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309e:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	0e5b      	lsrs	r3, r3, #25
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	3301      	adds	r3, #1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030b8:	69bb      	ldr	r3, [r7, #24]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0800cf60 	.word	0x0800cf60
 80030d0:	00f42400 	.word	0x00f42400

080030d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4904      	ldr	r1, [pc, #16]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	0800cf58 	.word	0x0800cf58

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800311c:	f7ff ffda 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4904      	ldr	r1, [pc, #16]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	0800cf58 	.word	0x0800cf58

08003144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800315c:	f7ff f8f8 	bl	8002350 <HAL_PWREx_GetVoltageRange>
 8003160:	6178      	str	r0, [r7, #20]
 8003162:	e014      	b.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	4a21      	ldr	r2, [pc, #132]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800317c:	f7ff f8e8 	bl	8002350 <HAL_PWREx_GetVoltageRange>
 8003180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	4a1a      	ldr	r2, [pc, #104]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003194:	d10b      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	@ 0x80
 800319a:	d913      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2ba0      	cmp	r3, #160	@ 0xa0
 80031a0:	d902      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a2:	2302      	movs	r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	e00d      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e00a      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80031b2:	d902      	bls.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031b4:	2302      	movs	r3, #2
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e004      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b70      	cmp	r3, #112	@ 0x70
 80031be:	d101      	bne.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 020f 	bic.w	r2, r3, #15
 80031cc:	4909      	ldr	r1, [pc, #36]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40022000 	.word	0x40022000

080031f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d00b      	beq.n	8003226 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d825      	bhi.n	8003260 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d008      	beq.n	800322c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d11f      	bne.n	8003260 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003220:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003222:	613b      	str	r3, [r7, #16]
    break;
 8003224:	e01f      	b.n	8003266 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003226:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003228:	613b      	str	r3, [r7, #16]
    break;
 800322a:	e01c      	b.n	8003266 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800322c:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003238:	4b1e      	ldr	r3, [pc, #120]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e005      	b.n	8003254 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003248:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003254:	4a19      	ldr	r2, [pc, #100]	@ (80032bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	613b      	str	r3, [r7, #16]
    break;
 800325e:	e002      	b.n	8003266 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
    break;
 8003264:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	3301      	adds	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	fb03 f202 	mul.w	r2, r3, r2
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800328c:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0e5b      	lsrs	r3, r3, #25
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032a6:	683b      	ldr	r3, [r7, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	0800cf60 	.word	0x0800cf60

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c8:	2300      	movs	r3, #0
 80032ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032cc:	2300      	movs	r3, #0
 80032ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d040      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e0:	2b80      	cmp	r3, #128	@ 0x80
 80032e2:	d02a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032e4:	2b80      	cmp	r3, #128	@ 0x80
 80032e6:	d825      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032e8:	2b60      	cmp	r3, #96	@ 0x60
 80032ea:	d026      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032ec:	2b60      	cmp	r3, #96	@ 0x60
 80032ee:	d821      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	d006      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d81d      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d010      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003300:	e018      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003302:	4b89      	ldr	r3, [pc, #548]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a88      	ldr	r2, [pc, #544]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330e:	e015      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fa82 	bl	8004820 <RCCEx_PLLSAI1_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003320:	e00c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3320      	adds	r3, #32
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fb6d 	bl	8004a08 <RCCEx_PLLSAI2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003332:	e003      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	74fb      	strb	r3, [r7, #19]
      break;
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800333a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003342:	4b79      	ldr	r3, [pc, #484]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003348:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003350:	4975      	ldr	r1, [pc, #468]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003358:	e001      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d047      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d030      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003378:	d82a      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800337a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800337e:	d02a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003384:	d824      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800338c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003390:	d81e      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800339a:	d010      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800339c:	e018      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800339e:	4b62      	ldr	r3, [pc, #392]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a61      	ldr	r2, [pc, #388]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033aa:	e015      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fa34 	bl	8004820 <RCCEx_PLLSAI1_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033bc:	e00c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3320      	adds	r3, #32
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 fb1f 	bl	8004a08 <RCCEx_PLLSAI2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ce:	e003      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	74fb      	strb	r3, [r7, #19]
      break;
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033de:	4b52      	ldr	r3, [pc, #328]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	494e      	ldr	r1, [pc, #312]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80033f4:	e001      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 809f 	beq.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003408:	2300      	movs	r3, #0
 800340a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800340c:	4b46      	ldr	r3, [pc, #280]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800341c:	2300      	movs	r3, #0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	4a40      	ldr	r2, [pc, #256]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342c:	6593      	str	r3, [r2, #88]	@ 0x58
 800342e:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343e:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a3a      	ldr	r2, [pc, #232]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800344a:	f7fe fa5b 	bl	8001904 <HAL_GetTick>
 800344e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003450:	e009      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fe fa57 	bl	8001904 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d902      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	74fb      	strb	r3, [r7, #19]
        break;
 8003464:	e005      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003466:	4b31      	ldr	r3, [pc, #196]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ef      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d15b      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003482:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01f      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	429a      	cmp	r2, r3
 8003494:	d019      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a2:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034c2:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d016      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fa16 	bl	8001904 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	e00b      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fe fa12 	bl	8001904 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d902      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	74fb      	strb	r3, [r7, #19]
            break;
 80034f2:	e006      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ec      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10c      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	74bb      	strb	r3, [r7, #18]
 8003526:	e005      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003534:	7c7b      	ldrb	r3, [r7, #17]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4ba0      	ldr	r3, [pc, #640]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	4a9f      	ldr	r2, [pc, #636]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003544:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003552:	4b9a      	ldr	r3, [pc, #616]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	4996      	ldr	r1, [pc, #600]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003574:	4b91      	ldr	r3, [pc, #580]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f023 020c 	bic.w	r2, r3, #12
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	498e      	ldr	r1, [pc, #568]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003596:	4b89      	ldr	r3, [pc, #548]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	4985      	ldr	r1, [pc, #532]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035b8:	4b80      	ldr	r3, [pc, #512]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c6:	497d      	ldr	r1, [pc, #500]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035da:	4b78      	ldr	r3, [pc, #480]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	4974      	ldr	r1, [pc, #464]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003602:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	496c      	ldr	r1, [pc, #432]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800361e:	4b67      	ldr	r3, [pc, #412]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362c:	4963      	ldr	r1, [pc, #396]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003640:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800364e:	495b      	ldr	r1, [pc, #364]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003662:	4b56      	ldr	r3, [pc, #344]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003670:	4952      	ldr	r1, [pc, #328]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003684:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	494a      	ldr	r1, [pc, #296]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036a6:	4b45      	ldr	r3, [pc, #276]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	4941      	ldr	r1, [pc, #260]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036c8:	4b3c      	ldr	r3, [pc, #240]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	4939      	ldr	r1, [pc, #228]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d028      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ea:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f8:	4930      	ldr	r1, [pc, #192]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003708:	d106      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370a:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003714:	60d3      	str	r3, [r2, #12]
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f879 	bl	8004820 <RCCEx_PLLSAI1_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d04d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003750:	d108      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003752:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800375e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003762:	e012      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003764:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376a:	4a14      	ldr	r2, [pc, #80]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003770:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003782:	490e      	ldr	r1, [pc, #56]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003792:	d106      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003794:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379e:	60d3      	str	r3, [r2, #12]
 80037a0:	e020      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b6:	60d3      	str	r3, [r2, #12]
 80037b8:	e014      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 f825 	bl	8004820 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d028      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f0:	4b7a      	ldr	r3, [pc, #488]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fe:	4977      	ldr	r1, [pc, #476]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003810:	4b72      	ldr	r3, [pc, #456]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a71      	ldr	r2, [pc, #452]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	e011      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003826:	d10c      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fff6 	bl	8004820 <RCCEx_PLLSAI1_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003854:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800385e:	495f      	ldr	r1, [pc, #380]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f000 ffd1 	bl	8004820 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003898:	4b50      	ldr	r3, [pc, #320]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800389a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800389e:	f023 0204 	bic.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	494c      	ldr	r1, [pc, #304]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038bc:	4b47      	ldr	r3, [pc, #284]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038c2:	f023 0218 	bic.w	r2, r3, #24
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	4943      	ldr	r1, [pc, #268]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d035      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e0:	4b3e      	ldr	r3, [pc, #248]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3d      	ldr	r2, [pc, #244]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fe f80a 	bl	8001904 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f4:	f7fe f806 	bl	8001904 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	74fb      	strb	r3, [r7, #19]
        break;
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003908:	4b34      	ldr	r3, [pc, #208]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ef      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800391a:	4b30      	ldr	r3, [pc, #192]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800391c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800392a:	492c      	ldr	r1, [pc, #176]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3320      	adds	r3, #32
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f001 f865 	bl	8004a08 <RCCEx_PLLSAI2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01e      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003958:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800395a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800395e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	491c      	ldr	r1, [pc, #112]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3320      	adds	r3, #32
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f840 	bl	8004a08 <RCCEx_PLLSAI2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d017      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039a2:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	490a      	ldr	r1, [pc, #40]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039c4:	d105      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4a04      	ldr	r2, [pc, #16]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039d0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039f2:	d13e      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80039f4:	4bb6      	ldr	r3, [pc, #728]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fe:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a06:	d028      	beq.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a0e:	f200 86f2 	bhi.w	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a18:	d005      	beq.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a20:	d00e      	beq.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003a22:	f000 bee8 	b.w	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a26:	4baa      	ldr	r3, [pc, #680]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f040 86e2 	bne.w	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3a:	61fb      	str	r3, [r7, #28]
      break;
 8003a3c:	f000 bedd 	b.w	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003a40:	4ba3      	ldr	r3, [pc, #652]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	f040 86d7 	bne.w	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003a50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a54:	61fb      	str	r3, [r7, #28]
      break;
 8003a56:	f000 bed2 	b.w	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a66:	f040 86cc 	bne.w	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003a6a:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a6c:	61fb      	str	r3, [r7, #28]
      break;
 8003a6e:	f000 bec8 	b.w	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a72:	4b97      	ldr	r3, [pc, #604]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d036      	beq.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d840      	bhi.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003a94:	e039      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003a96:	4b8e      	ldr	r3, [pc, #568]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003aae:	4b88      	ldr	r3, [pc, #544]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003aba:	4b85      	ldr	r3, [pc, #532]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a84      	ldr	r2, [pc, #528]	@ (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ace:	e01f      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
      break;
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ad6:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae2:	d102      	bne.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003ae4:	4b7d      	ldr	r3, [pc, #500]	@ (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003ae6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ae8:	e012      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
      break;
 8003aee:	e00f      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003af0:	4b77      	ldr	r3, [pc, #476]	@ (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afc:	d102      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003afe:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
      break;
 8003b0e:	bf00      	nop
    }

    switch(PeriphClk)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b16:	f000 8604 	beq.w	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b20:	f200 8671 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b2a:	f000 8467 	beq.w	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b34:	f200 8667 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b3e:	f000 852f 	beq.w	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b48:	f200 865d 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b52:	f000 8185 	beq.w	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b5c:	f200 8653 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b66:	f000 80cb 	beq.w	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b70:	f200 8649 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7a:	f000 842e 	beq.w	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b84:	f200 863f 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b8e:	f000 83e2 	beq.w	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b98:	f200 8635 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	f000 80ad 	beq.w	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bac:	f200 862b 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	f000 809b 	beq.w	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	f200 8621 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bca:	f000 8089 	beq.w	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd4:	f200 8617 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bde:	f000 8552 	beq.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be8:	f200 860d 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf2:	f000 84fe 	beq.w	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	f200 8603 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c06:	f000 849f 	beq.w	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c10:	f200 85f9 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b80      	cmp	r3, #128	@ 0x80
 8003c18:	f000 846a 	beq.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b80      	cmp	r3, #128	@ 0x80
 8003c20:	f200 85f1 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d84c      	bhi.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 85ea 	beq.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	2b1f      	cmp	r3, #31
 8003c38:	f200 85e5 	bhi.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08004055 	.word	0x08004055
 8003c48:	080040c3 	.word	0x080040c3
 8003c4c:	08004807 	.word	0x08004807
 8003c50:	08004157 	.word	0x08004157
 8003c54:	08004807 	.word	0x08004807
 8003c58:	08004807 	.word	0x08004807
 8003c5c:	08004807 	.word	0x08004807
 8003c60:	080041cf 	.word	0x080041cf
 8003c64:	08004807 	.word	0x08004807
 8003c68:	08004807 	.word	0x08004807
 8003c6c:	08004807 	.word	0x08004807
 8003c70:	08004807 	.word	0x08004807
 8003c74:	08004807 	.word	0x08004807
 8003c78:	08004807 	.word	0x08004807
 8003c7c:	08004807 	.word	0x08004807
 8003c80:	08004253 	.word	0x08004253
 8003c84:	08004807 	.word	0x08004807
 8003c88:	08004807 	.word	0x08004807
 8003c8c:	08004807 	.word	0x08004807
 8003c90:	08004807 	.word	0x08004807
 8003c94:	08004807 	.word	0x08004807
 8003c98:	08004807 	.word	0x08004807
 8003c9c:	08004807 	.word	0x08004807
 8003ca0:	08004807 	.word	0x08004807
 8003ca4:	08004807 	.word	0x08004807
 8003ca8:	08004807 	.word	0x08004807
 8003cac:	08004807 	.word	0x08004807
 8003cb0:	08004807 	.word	0x08004807
 8003cb4:	08004807 	.word	0x08004807
 8003cb8:	08004807 	.word	0x08004807
 8003cbc:	08004807 	.word	0x08004807
 8003cc0:	080042d5 	.word	0x080042d5
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	f000 83e6 	beq.w	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003ccc:	f000 bd9b 	b.w	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	0007a120 	.word	0x0007a120
 8003cd8:	0800cf60 	.word	0x0800cf60
 8003cdc:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ce6:	f000 ff83 	bl	8004bf0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
      break;
 8003cec:	f000 bd8e 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003cf6:	f000 ff7b 	bl	8004bf0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003cfa:	61f8      	str	r0, [r7, #28]
      break;
 8003cfc:	f000 bd86 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003d00:	4b9a      	ldr	r3, [pc, #616]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d12:	d015      	beq.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d1a:	f200 8092 	bhi.w	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d24:	d029      	beq.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d2c:	f200 8089 	bhi.w	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d07b      	beq.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003d3e:	e080      	b.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d40:	4b8a      	ldr	r3, [pc, #552]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d17d      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d4c:	4b87      	ldr	r3, [pc, #540]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003d58:	4b84      	ldr	r3, [pc, #528]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003d64:	4b81      	ldr	r3, [pc, #516]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	4a7f      	ldr	r2, [pc, #508]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	61fb      	str	r3, [r7, #28]
          break;
 8003d78:	e066      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d86:	d162      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003d88:	4b78      	ldr	r3, [pc, #480]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d94:	d15b      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d96:	4b75      	ldr	r3, [pc, #468]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	fb03 f202 	mul.w	r2, r3, r2
 8003daa:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	3301      	adds	r3, #1
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	0d5b      	lsrs	r3, r3, #21
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]
          break;
 8003dd2:	e03c      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003dd4:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de0:	d138      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003de2:	4b62      	ldr	r3, [pc, #392]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dee:	d131      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003df0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	fb03 f202 	mul.w	r2, r3, r2
 8003e04:	4b59      	ldr	r3, [pc, #356]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	3301      	adds	r3, #1
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003e16:	4b55      	ldr	r3, [pc, #340]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	0d5b      	lsrs	r3, r3, #21
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	3301      	adds	r3, #1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
          break;
 8003e2c:	e012      	b.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d10e      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003e3e:	61fb      	str	r3, [r7, #28]
          break;
 8003e40:	e00b      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003e42:	bf00      	nop
 8003e44:	f000 bce2 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e48:	bf00      	nop
 8003e4a:	f000 bcdf 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e4e:	bf00      	nop
 8003e50:	f000 bcdc 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e54:	bf00      	nop
 8003e56:	f000 bcd9 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e5a:	bf00      	nop
        break;
 8003e5c:	f000 bcd6 	b.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003e60:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e6e:	d13d      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e70:	4b3e      	ldr	r3, [pc, #248]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e7c:	f040 84c5 	bne.w	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003e80:	4b3a      	ldr	r3, [pc, #232]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8c:	f040 84bd 	bne.w	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e9a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	fb03 f202 	mul.w	r2, r3, r2
 8003ea4:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3301      	adds	r3, #1
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	0edb      	lsrs	r3, r3, #27
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003ec8:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003ed4:	2311      	movs	r3, #17
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003eda:	2307      	movs	r3, #7
 8003edc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	61fb      	str	r3, [r7, #28]
      break;
 8003ee8:	f000 bc8f 	b.w	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003eec:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003efe:	d016      	beq.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f06:	f200 809b 	bhi.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f10:	d032      	beq.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f18:	f200 8092 	bhi.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8084 	beq.w	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f2a:	d052      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003f2c:	e088      	b.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f040 8084 	bne.w	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	4a03      	ldr	r2, [pc, #12]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	61fb      	str	r3, [r7, #28]
          break;
 8003f68:	e06c      	b.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0800cf60 	.word	0x0800cf60
 8003f74:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003f78:	4ba5      	ldr	r3, [pc, #660]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f84:	d160      	bne.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003f86:	4ba2      	ldr	r3, [pc, #648]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f92:	d159      	bne.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f94:	4b9e      	ldr	r3, [pc, #632]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	fb03 f202 	mul.w	r2, r3, r2
 8003fa8:	4b99      	ldr	r3, [pc, #612]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003fba:	4b95      	ldr	r3, [pc, #596]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	0d5b      	lsrs	r3, r3, #21
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61fb      	str	r3, [r7, #28]
          break;
 8003fd0:	e03a      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fde:	d135      	bne.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fec:	d12e      	bne.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	fb03 f202 	mul.w	r2, r3, r2
 8004002:	4b83      	ldr	r3, [pc, #524]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	3301      	adds	r3, #1
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	0d5b      	lsrs	r3, r3, #21
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	61fb      	str	r3, [r7, #28]
          break;
 800402a:	e00f      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800402c:	4b78      	ldr	r3, [pc, #480]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800402e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d10a      	bne.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800403a:	4b76      	ldr	r3, [pc, #472]	@ (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800403c:	61fb      	str	r3, [r7, #28]
          break;
 800403e:	e007      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8004040:	bf00      	nop
 8004042:	e3e2      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004044:	bf00      	nop
 8004046:	e3e0      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004048:	bf00      	nop
 800404a:	e3de      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800404c:	bf00      	nop
 800404e:	e3dc      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004050:	bf00      	nop
      break;
 8004052:	e3da      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004054:	4b6e      	ldr	r3, [pc, #440]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d827      	bhi.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8004066:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	0800407d 	.word	0x0800407d
 8004070:	08004085 	.word	0x08004085
 8004074:	0800408d 	.word	0x0800408d
 8004078:	080040a1 	.word	0x080040a1
          frequency = HAL_RCC_GetPCLK2Freq();
 800407c:	f7ff f84c 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8004080:	61f8      	str	r0, [r7, #28]
          break;
 8004082:	e01d      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004084:	f7fe ff9c 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004088:	61f8      	str	r0, [r7, #28]
          break;
 800408a:	e019      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800408c:	4b60      	ldr	r3, [pc, #384]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004098:	d10f      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800409a:	4b5f      	ldr	r3, [pc, #380]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800409c:	61fb      	str	r3, [r7, #28]
          break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d107      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
          break;
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80040b6:	bf00      	nop
 80040b8:	e3a8      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040ba:	bf00      	nop
 80040bc:	e3a6      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040be:	bf00      	nop
        break;
 80040c0:	e3a4      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80040c2:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d83a      	bhi.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80040d4:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004111 	.word	0x08004111
 80040e0:	0800414b 	.word	0x0800414b
 80040e4:	0800414b 	.word	0x0800414b
 80040e8:	0800414b 	.word	0x0800414b
 80040ec:	08004119 	.word	0x08004119
 80040f0:	0800414b 	.word	0x0800414b
 80040f4:	0800414b 	.word	0x0800414b
 80040f8:	0800414b 	.word	0x0800414b
 80040fc:	08004121 	.word	0x08004121
 8004100:	0800414b 	.word	0x0800414b
 8004104:	0800414b 	.word	0x0800414b
 8004108:	0800414b 	.word	0x0800414b
 800410c:	08004135 	.word	0x08004135
          frequency = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe ffec 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
          break;
 8004116:	e01d      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004118:	f7fe ff52 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800411c:	61f8      	str	r0, [r7, #28]
          break;
 800411e:	e019      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412c:	d10f      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800412e:	4b3a      	ldr	r3, [pc, #232]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004130:	61fb      	str	r3, [r7, #28]
          break;
 8004132:	e00c      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004134:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d107      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004146:	61fb      	str	r3, [r7, #28]
          break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800414a:	bf00      	nop
 800414c:	e35e      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800414e:	bf00      	nop
 8004150:	e35c      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004152:	bf00      	nop
        break;
 8004154:	e35a      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004156:	4b2e      	ldr	r3, [pc, #184]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b30      	cmp	r3, #48	@ 0x30
 8004166:	d021      	beq.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b30      	cmp	r3, #48	@ 0x30
 800416c:	d829      	bhi.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b20      	cmp	r3, #32
 8004172:	d011      	beq.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b20      	cmp	r3, #32
 8004178:	d823      	bhi.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b10      	cmp	r3, #16
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8004186:	e01c      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe ffb0 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 800418c:	61f8      	str	r0, [r7, #28]
          break;
 800418e:	e01d      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004190:	f7fe ff16 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004194:	61f8      	str	r0, [r7, #28]
          break;
 8004196:	e019      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a4:	d10f      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80041a8:	61fb      	str	r3, [r7, #28]
          break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041ac:	4b18      	ldr	r3, [pc, #96]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d107      	bne.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041be:	61fb      	str	r3, [r7, #28]
          break;
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80041c2:	bf00      	nop
 80041c4:	e322      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041c6:	bf00      	nop
 80041c8:	e320      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041ca:	bf00      	nop
        break;
 80041cc:	e31e      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80041de:	d027      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041e4:	d82f      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d017      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d829      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d004      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80041fe:	e022      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe ff74 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004204:	61f8      	str	r0, [r7, #28]
          break;
 8004206:	e023      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8004208:	f7fe feda 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800420c:	61f8      	str	r0, [r7, #28]
          break;
 800420e:	e01f      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004210:	40021000 	.word	0x40021000
 8004214:	02dc6c00 	.word	0x02dc6c00
 8004218:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800421c:	4b9b      	ldr	r3, [pc, #620]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d10f      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800422a:	4b99      	ldr	r3, [pc, #612]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800422c:	61fb      	str	r3, [r7, #28]
          break;
 800422e:	e00c      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004230:	4b96      	ldr	r3, [pc, #600]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d107      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	61fb      	str	r3, [r7, #28]
          break;
 8004244:	e003      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8004246:	bf00      	nop
 8004248:	e2e0      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800424a:	bf00      	nop
 800424c:	e2de      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800424e:	bf00      	nop
        break;
 8004250:	e2dc      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004252:	4b8e      	ldr	r3, [pc, #568]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004264:	d025      	beq.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800426c:	d82c      	bhi.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004274:	d013      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800427c:	d824      	bhi.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	d004      	beq.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800428c:	e01c      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800428e:	f7fe ff2d 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004292:	61f8      	str	r0, [r7, #28]
          break;
 8004294:	e01d      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004296:	f7fe fe93 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800429a:	61f8      	str	r0, [r7, #28]
          break;
 800429c:	e019      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800429e:	4b7b      	ldr	r3, [pc, #492]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042aa:	d10f      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80042ac:	4b78      	ldr	r3, [pc, #480]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80042ae:	61fb      	str	r3, [r7, #28]
          break;
 80042b0:	e00c      	b.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042b2:	4b76      	ldr	r3, [pc, #472]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80042c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c4:	61fb      	str	r3, [r7, #28]
          break;
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80042c8:	bf00      	nop
 80042ca:	e29f      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042cc:	bf00      	nop
 80042ce:	e29d      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042d0:	bf00      	nop
        break;
 80042d2:	e29b      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80042d4:	4b6d      	ldr	r3, [pc, #436]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e6:	d025      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ee:	d82c      	bhi.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f6:	d013      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042fe:	d824      	bhi.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430c:	d004      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800430e:	e01c      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe feec 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004314:	61f8      	str	r0, [r7, #28]
          break;
 8004316:	e01d      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004318:	f7fe fe52 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800431c:	61f8      	str	r0, [r7, #28]
          break;
 800431e:	e019      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d10f      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800432e:	4b58      	ldr	r3, [pc, #352]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004330:	61fb      	str	r3, [r7, #28]
          break;
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004334:	4b55      	ldr	r3, [pc, #340]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d107      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004346:	61fb      	str	r3, [r7, #28]
          break;
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800434a:	bf00      	nop
 800434c:	e25e      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800434e:	bf00      	nop
 8004350:	e25c      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004352:	bf00      	nop
        break;
 8004354:	e25a      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004356:	4b4d      	ldr	r3, [pc, #308]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004368:	d007      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004370:	d12f      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe fe25 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004376:	61f8      	str	r0, [r7, #28]
          break;
 8004378:	e02e      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800437a:	4b44      	ldr	r3, [pc, #272]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004386:	d126      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004388:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004394:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	fb03 f202 	mul.w	r2, r3, r2
 80043a8:	4b38      	ldr	r3, [pc, #224]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3301      	adds	r3, #1
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80043ba:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	0e5b      	lsrs	r3, r3, #25
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	3301      	adds	r3, #1
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	61fb      	str	r3, [r7, #28]
          break;
 80043d0:	e001      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80043d2:	bf00      	nop
 80043d4:	e21a      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043d6:	bf00      	nop
        break;
 80043d8:	e218      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80043da:	4b2c      	ldr	r3, [pc, #176]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe fe94 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 80043f0:	61f8      	str	r0, [r7, #28]
        break;
 80043f2:	e20b      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80043f4:	f7fe fde4 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80043f8:	61f8      	str	r0, [r7, #28]
        break;
 80043fa:	e207      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80043fc:	4b23      	ldr	r3, [pc, #140]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004402:	f003 0318 	and.w	r3, r3, #24
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d010      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b10      	cmp	r3, #16
 8004412:	d834      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d024      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004420:	e02d      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004422:	69b9      	ldr	r1, [r7, #24]
 8004424:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004428:	f000 fbe2 	bl	8004bf0 <RCCEx_GetSAIxPeriphCLKFreq>
 800442c:	61f8      	str	r0, [r7, #28]
          break;
 800442e:	e02b      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004430:	4b16      	ldr	r3, [pc, #88]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d122      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004448:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	e005      	b.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004454:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61fb      	str	r3, [r7, #28]
          break;
 8004468:	e00b      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d106      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800447a:	61fb      	str	r3, [r7, #28]
          break;
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800447e:	bf00      	nop
 8004480:	e1c4      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004482:	bf00      	nop
 8004484:	e1c2      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004486:	bf00      	nop
        break;
 8004488:	e1c0      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	00f42400 	.word	0x00f42400
 8004494:	0800cf60 	.word	0x0800cf60
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004498:	4b96      	ldr	r3, [pc, #600]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044aa:	d013      	beq.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b2:	d819      	bhi.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c0:	d004      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80044c2:	e011      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fe fe12 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
          break;
 80044ca:	e010      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80044cc:	f7fe fd78 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80044d0:	61f8      	str	r0, [r7, #28]
          break;
 80044d2:	e00c      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044d4:	4b87      	ldr	r3, [pc, #540]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e0:	d104      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80044e2:	4b85      	ldr	r3, [pc, #532]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044e4:	61fb      	str	r3, [r7, #28]
          break;
 80044e6:	e001      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80044e8:	bf00      	nop
 80044ea:	e18f      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ec:	bf00      	nop
        break;
 80044ee:	e18d      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80044f0:	4b80      	ldr	r3, [pc, #512]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004502:	d013      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450a:	d819      	bhi.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004518:	d004      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fde6 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004520:	61f8      	str	r0, [r7, #28]
          break;
 8004522:	e010      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004524:	f7fe fd4c 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004528:	61f8      	str	r0, [r7, #28]
          break;
 800452a:	e00c      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800452c:	4b71      	ldr	r3, [pc, #452]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d104      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800453a:	4b6f      	ldr	r3, [pc, #444]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800453c:	61fb      	str	r3, [r7, #28]
          break;
 800453e:	e001      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004540:	bf00      	nop
 8004542:	e163      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004544:	bf00      	nop
        break;
 8004546:	e161      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004548:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800455a:	d013      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004562:	d819      	bhi.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d004      	beq.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004574:	f7fe fdba 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004578:	61f8      	str	r0, [r7, #28]
          break;
 800457a:	e010      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 800457c:	f7fe fd20 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004580:	61f8      	str	r0, [r7, #28]
          break;
 8004582:	e00c      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004584:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004590:	d104      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004592:	4b59      	ldr	r3, [pc, #356]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004594:	61fb      	str	r3, [r7, #28]
          break;
 8004596:	e001      	b.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004598:	bf00      	nop
 800459a:	e137      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800459c:	bf00      	nop
        break;
 800459e:	e135      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80045a0:	4b54      	ldr	r3, [pc, #336]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d011      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d818      	bhi.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d004      	beq.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80045c4:	e011      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045c6:	f7fe fd91 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80045ca:	61f8      	str	r0, [r7, #28]
          break;
 80045cc:	e010      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80045ce:	f7fe fcf7 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80045d2:	61f8      	str	r0, [r7, #28]
          break;
 80045d4:	e00c      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e2:	d104      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80045e4:	4b44      	ldr	r3, [pc, #272]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045e6:	61fb      	str	r3, [r7, #28]
          break;
 80045e8:	e001      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80045ea:	bf00      	nop
 80045ec:	e10e      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ee:	bf00      	nop
        break;
 80045f0:	e10c      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80045f2:	4b40      	ldr	r3, [pc, #256]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004604:	d02c      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800460c:	d833      	bhi.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004614:	d01a      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800461c:	d82b      	bhi.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800462a:	d004      	beq.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800462c:	e023      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800462e:	f7fe fd5d 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004632:	61f8      	str	r0, [r7, #28]
          break;
 8004634:	e026      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004636:	4b2f      	ldr	r3, [pc, #188]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11a      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004644:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004648:	61fb      	str	r3, [r7, #28]
          break;
 800464a:	e016      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800464c:	4b29      	ldr	r3, [pc, #164]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004658:	d111      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800465c:	61fb      	str	r3, [r7, #28]
          break;
 800465e:	e00e      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004660:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d109      	bne.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004672:	61fb      	str	r3, [r7, #28]
          break;
 8004674:	e005      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004676:	bf00      	nop
 8004678:	e0c8      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800467a:	bf00      	nop
 800467c:	e0c6      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800467e:	bf00      	nop
 8004680:	e0c4      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004682:	bf00      	nop
        break;
 8004684:	e0c2      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004686:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004698:	d030      	beq.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046a0:	d837      	bhi.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a8:	d01a      	beq.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b0:	d82f      	bhi.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046be:	d004      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80046c0:	e027      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046c2:	f7fe fd13 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80046c6:	61f8      	str	r0, [r7, #28]
          break;
 80046c8:	e02a      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d11e      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80046d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046dc:	61fb      	str	r3, [r7, #28]
          break;
 80046de:	e01a      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ec:	d115      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80046ee:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80046f0:	61fb      	str	r3, [r7, #28]
          break;
 80046f2:	e012      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046fc:	4b46      	ldr	r3, [pc, #280]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
          break;
 8004710:	e005      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004712:	bf00      	nop
 8004714:	e07a      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004716:	bf00      	nop
 8004718:	e078      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800471a:	bf00      	nop
 800471c:	e076      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800471e:	bf00      	nop
        break;
 8004720:	e074      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004722:	4b3d      	ldr	r3, [pc, #244]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004728:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004734:	d02c      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800473c:	d855      	bhi.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800474a:	d004      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 800474c:	e04d      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fc37 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8004752:	61f8      	str	r0, [r7, #28]
          break;
 8004754:	e04e      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004756:	4b30      	ldr	r3, [pc, #192]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d145      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004762:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 800476e:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800477a:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a25      	ldr	r2, [pc, #148]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	61fb      	str	r3, [r7, #28]
          break;
 800478e:	e02e      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004790:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800479c:	d129      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800479e:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047aa:	d122      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	fb03 f202 	mul.w	r2, r3, r2
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3301      	adds	r3, #1
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80047d2:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	0d5b      	lsrs	r3, r3, #21
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	3301      	adds	r3, #1
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	61fb      	str	r3, [r7, #28]
          break;
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80047ea:	bf00      	nop
 80047ec:	e00e      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047ee:	bf00      	nop
 80047f0:	e00c      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047f2:	bf00      	nop
        break;
 80047f4:	e00a      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80047f6:	bf00      	nop
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80047fa:	bf00      	nop
 80047fc:	e006      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80047fe:	bf00      	nop
 8004800:	e004      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004802:	bf00      	nop
 8004804:	e002      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800480a:	bf00      	nop
    }
  }

  return(frequency);
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	0800cf60 	.word	0x0800cf60

08004820 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800482e:	4b72      	ldr	r3, [pc, #456]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00e      	beq.n	8004858 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800483a:	4b6f      	ldr	r3, [pc, #444]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0203 	and.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d103      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
       ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d142      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	e03f      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d018      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x72>
 8004860:	2b03      	cmp	r3, #3
 8004862:	d825      	bhi.n	80048b0 <RCCEx_PLLSAI1_Config+0x90>
 8004864:	2b01      	cmp	r3, #1
 8004866:	d002      	beq.n	800486e <RCCEx_PLLSAI1_Config+0x4e>
 8004868:	2b02      	cmp	r3, #2
 800486a:	d009      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x60>
 800486c:	e020      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800486e:	4b62      	ldr	r3, [pc, #392]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11d      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487e:	e01a      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004880:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e013      	b.n	80048ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004892:	4b59      	ldr	r3, [pc, #356]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800489e:	4b56      	ldr	r3, [pc, #344]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ae:	e006      	b.n	80048be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e004      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048be:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80048c6:	4b4c      	ldr	r3, [pc, #304]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 0203 	bic.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4949      	ldr	r1, [pc, #292]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 8086 	bne.w	80049ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e0:	4b45      	ldr	r3, [pc, #276]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a44      	ldr	r2, [pc, #272]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fd f80a 	bl	8001904 <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f2:	e009      	b.n	8004908 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f4:	f7fd f806 	bl	8001904 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d902      	bls.n	8004908 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	73fb      	strb	r3, [r7, #15]
        break;
 8004906:	e005      	b.n	8004914 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004908:	4b3b      	ldr	r3, [pc, #236]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ef      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d168      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d113      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	4b35      	ldr	r3, [pc, #212]	@ (80049fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004926:	4013      	ands	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	0211      	lsls	r1, r2, #8
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68d2      	ldr	r2, [r2, #12]
 8004932:	06d2      	lsls	r2, r2, #27
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6852      	ldr	r2, [r2, #4]
 800493a:	3a01      	subs	r2, #1
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	430a      	orrs	r2, r1
 8004940:	492d      	ldr	r1, [pc, #180]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]
 8004946:	e02d      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d115      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494e:	4b2a      	ldr	r3, [pc, #168]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	0211      	lsls	r1, r2, #8
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6912      	ldr	r2, [r2, #16]
 8004960:	0852      	lsrs	r2, r2, #1
 8004962:	3a01      	subs	r2, #1
 8004964:	0552      	lsls	r2, r2, #21
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6852      	ldr	r2, [r2, #4]
 800496c:	3a01      	subs	r2, #1
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	430a      	orrs	r2, r1
 8004972:	4921      	ldr	r1, [pc, #132]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
 8004978:	e014      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497a:	4b1f      	ldr	r3, [pc, #124]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6952      	ldr	r2, [r2, #20]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0652      	lsls	r2, r2, #25
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6852      	ldr	r2, [r2, #4]
 8004998:	3a01      	subs	r2, #1
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	430a      	orrs	r2, r1
 800499e:	4916      	ldr	r1, [pc, #88]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049a4:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fc ffa8 	bl	8001904 <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b6:	e009      	b.n	80049cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b8:	f7fc ffa4 	bl	8001904 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d902      	bls.n	80049cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ca:	e005      	b.n	80049d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049cc:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ef      	beq.n	80049b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	4904      	ldr	r1, [pc, #16]	@ (80049f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	07ff800f 	.word	0x07ff800f
 8004a00:	ff9f800f 	.word	0xff9f800f
 8004a04:	f9ff800f 	.word	0xf9ff800f

08004a08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a16:	4b72      	ldr	r3, [pc, #456]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00e      	beq.n	8004a40 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a22:	4b6f      	ldr	r3, [pc, #444]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0203 	and.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d103      	bne.n	8004a3a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
       ||
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d142      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e03f      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d018      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0x72>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d825      	bhi.n	8004a98 <RCCEx_PLLSAI2_Config+0x90>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <RCCEx_PLLSAI2_Config+0x4e>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d009      	beq.n	8004a68 <RCCEx_PLLSAI2_Config+0x60>
 8004a54:	e020      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a56:	4b62      	ldr	r3, [pc, #392]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e01a      	b.n	8004a9e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	4b5d      	ldr	r3, [pc, #372]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e013      	b.n	8004aa2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7a:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a86:	4b56      	ldr	r3, [pc, #344]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e004      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004aae:	4b4c      	ldr	r3, [pc, #304]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4949      	ldr	r1, [pc, #292]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 8086 	bne.w	8004bd4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ac8:	4b45      	ldr	r3, [pc, #276]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a44      	ldr	r2, [pc, #272]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc ff16 	bl	8001904 <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ada:	e009      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004adc:	f7fc ff12 	bl	8001904 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	73fb      	strb	r3, [r7, #15]
        break;
 8004aee:	e005      	b.n	8004afc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af0:	4b3b      	ldr	r3, [pc, #236]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ef      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d168      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d113      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b08:	4b35      	ldr	r3, [pc, #212]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	4b35      	ldr	r3, [pc, #212]	@ (8004be4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6892      	ldr	r2, [r2, #8]
 8004b14:	0211      	lsls	r1, r2, #8
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	06d2      	lsls	r2, r2, #27
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6852      	ldr	r2, [r2, #4]
 8004b22:	3a01      	subs	r2, #1
 8004b24:	0112      	lsls	r2, r2, #4
 8004b26:	430a      	orrs	r2, r1
 8004b28:	492d      	ldr	r1, [pc, #180]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	614b      	str	r3, [r1, #20]
 8004b2e:	e02d      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d115      	bne.n	8004b62 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b36:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	0211      	lsls	r1, r2, #8
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6912      	ldr	r2, [r2, #16]
 8004b48:	0852      	lsrs	r2, r2, #1
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	0552      	lsls	r2, r2, #21
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6852      	ldr	r2, [r2, #4]
 8004b54:	3a01      	subs	r2, #1
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	4921      	ldr	r1, [pc, #132]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	614b      	str	r3, [r1, #20]
 8004b60:	e014      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b62:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	4b21      	ldr	r3, [pc, #132]	@ (8004bec <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	0211      	lsls	r1, r2, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6952      	ldr	r2, [r2, #20]
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0652      	lsls	r2, r2, #25
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	430a      	orrs	r2, r1
 8004b86:	4916      	ldr	r1, [pc, #88]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b8c:	4b14      	ldr	r3, [pc, #80]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a13      	ldr	r2, [pc, #76]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fc feb4 	bl	8001904 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b9e:	e009      	b.n	8004bb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ba0:	f7fc feb0 	bl	8001904 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d902      	bls.n	8004bb4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8004bb2:	e005      	b.n	8004bc0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ef      	beq.n	8004ba0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bc6:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	07ff800f 	.word	0x07ff800f
 8004be8:	ff9f800f 	.word	0xff9f800f
 8004bec:	f9ff800f 	.word	0xf9ff800f

08004bf0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	@ 0x24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c0c:	d10b      	bne.n	8004c26 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c0e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c14:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004c18:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b60      	cmp	r3, #96	@ 0x60
 8004c1e:	d112      	bne.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c20:	4b7a      	ldr	r3, [pc, #488]	@ (8004e0c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	e00f      	b.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2c:	d10b      	bne.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004c2e:	4b76      	ldr	r3, [pc, #472]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c38:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c40:	d101      	bne.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004c42:	4b72      	ldr	r3, [pc, #456]	@ (8004e0c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c44:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 80d6 	bne.w	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d003      	beq.n	8004c60 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5e:	d13b      	bne.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c60:	4b69      	ldr	r3, [pc, #420]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c6c:	f040 80c4 	bne.w	8004df8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004c70:	4b65      	ldr	r3, [pc, #404]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80bd 	beq.w	8004df8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c7e:	4b62      	ldr	r3, [pc, #392]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	3301      	adds	r3, #1
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c92:	4b5d      	ldr	r3, [pc, #372]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c9c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	0edb      	lsrs	r3, r3, #27
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004cb0:	4b55      	ldr	r3, [pc, #340]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004cbc:	2311      	movs	r3, #17
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e001      	b.n	8004cc6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fb03 f202 	mul.w	r2, r3, r2
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004cd6:	e08f      	b.n	8004df8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13a      	bne.n	8004d54 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004cde:	4b4a      	ldr	r3, [pc, #296]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cea:	f040 8086 	bne.w	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004cee:	4b46      	ldr	r3, [pc, #280]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d07f      	beq.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cfa:	4b43      	ldr	r3, [pc, #268]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	3301      	adds	r3, #1
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d18:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	0edb      	lsrs	r3, r3, #27
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004d2c:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004d38:	2311      	movs	r3, #17
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e001      	b.n	8004d42 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004d3e:	2307      	movs	r3, #7
 8004d40:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	fb03 f202 	mul.w	r2, r3, r2
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e052      	b.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b80      	cmp	r3, #128	@ 0x80
 8004d58:	d003      	beq.n	8004d62 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d60:	d109      	bne.n	8004d76 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d62:	4b29      	ldr	r3, [pc, #164]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6e:	d144      	bne.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004d70:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004d72:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d74:	e041      	b.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d003      	beq.n	8004d84 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d82:	d13a      	bne.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004d84:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d90:	d133      	bne.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004d92:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d02d      	beq.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	3301      	adds	r3, #1
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dbc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	0edb      	lsrs	r3, r3, #27
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004ddc:	2311      	movs	r3, #17
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e001      	b.n	8004de6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004de2:	2307      	movs	r3, #7
 8004de4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	fb03 f202 	mul.w	r2, r3, r2
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e000      	b.n	8004dfa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004df8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3724      	adds	r7, #36	@ 0x24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	001fff68 	.word	0x001fff68
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e1c7      	b.n	80051b6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d10e      	bne.n	8004e4e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a81      	ldr	r2, [pc, #516]	@ (800503c <HAL_SAI_Init+0x228>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d107      	bne.n	8004e4a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d103      	bne.n	8004e4a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e1b3      	b.n	80051b6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fbc8 	bl	80015f8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f9b1 	bl	80051d0 <SAI_Disable>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e19e      	b.n	80051b6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d00c      	beq.n	8004ea2 <HAL_SAI_Init+0x8e>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d80d      	bhi.n	8004ea8 <HAL_SAI_Init+0x94>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SAI_Init+0x82>
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d003      	beq.n	8004e9c <HAL_SAI_Init+0x88>
 8004e94:	e008      	b.n	8004ea8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004e9a:	e008      	b.n	8004eae <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ea0:	e005      	b.n	8004eae <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ea6:	e002      	b.n	8004eae <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004eac:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d81d      	bhi.n	8004ef2 <HAL_SAI_Init+0xde>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <HAL_SAI_Init+0xa8>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed3 	.word	0x08004ed3
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	08004ee3 	.word	0x08004ee3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
      break;
 8004ed0:	e012      	b.n	8004ef8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ed6:	61fb      	str	r3, [r7, #28]
      break;
 8004ed8:	e00e      	b.n	8004ef8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ede:	61fb      	str	r3, [r7, #28]
      break;
 8004ee0:	e00a      	b.n	8004ef8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ee2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ee6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ef0:	e002      	b.n	8004ef8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      break;
 8004ef6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a4f      	ldr	r2, [pc, #316]	@ (800503c <HAL_SAI_Init+0x228>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_SAI_Init+0xf8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a4e      	ldr	r2, [pc, #312]	@ (8005040 <HAL_SAI_Init+0x22c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8005044 <HAL_SAI_Init+0x230>)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e002      	b.n	8004f1a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004f14:	4a4c      	ldr	r2, [pc, #304]	@ (8005048 <HAL_SAI_Init+0x234>)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d073      	beq.n	800500a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a45      	ldr	r2, [pc, #276]	@ (800503c <HAL_SAI_Init+0x228>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_SAI_Init+0x122>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a43      	ldr	r2, [pc, #268]	@ (8005040 <HAL_SAI_Init+0x22c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d105      	bne.n	8004f42 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f36:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f3a:	f7fe fd51 	bl	80039e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f3e:	61b8      	str	r0, [r7, #24]
 8004f40:	e004      	b.n	8004f4c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004f42:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f46:	f7fe fd4b 	bl	80039e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f4a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f54:	d120      	bne.n	8004f98 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d102      	bne.n	8004f64 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004f5e:	2340      	movs	r3, #64	@ 0x40
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e00a      	b.n	8004f7a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d103      	bne.n	8004f74 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e002      	b.n	8004f7a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f78:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4619      	mov	r1, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e017      	b.n	8004fc8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SAI_Init+0x192>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e000      	b.n	8004fa8 <HAL_SAI_Init+0x194>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4a20      	ldr	r2, [pc, #128]	@ (800504c <HAL_SAI_Init+0x238>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	08da      	lsrs	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <HAL_SAI_Init+0x238>)
 8004fda:	fba3 2301 	umull	r2, r3, r3, r1
 8004fde:	08da      	lsrs	r2, r3, #3
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	1aca      	subs	r2, r1, r3
 8004fea:	2a08      	cmp	r2, #8
 8004fec:	d904      	bls.n	8004ff8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d104      	bne.n	800500a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	085a      	lsrs	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_SAI_Init+0x206>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d109      	bne.n	800502e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_SAI_Init+0x212>
 8005022:	2300      	movs	r3, #0
 8005024:	e001      	b.n	800502a <HAL_SAI_Init+0x216>
 8005026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	e012      	b.n	8005054 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d10c      	bne.n	8005050 <HAL_SAI_Init+0x23c>
 8005036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800503a:	e00a      	b.n	8005052 <HAL_SAI_Init+0x23e>
 800503c:	40015404 	.word	0x40015404
 8005040:	40015424 	.word	0x40015424
 8005044:	40015400 	.word	0x40015400
 8005048:	40015800 	.word	0x40015800
 800504c:	cccccccd 	.word	0xcccccccd
 8005050:	2300      	movs	r3, #0
 8005052:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b58      	ldr	r3, [pc, #352]	@ (80051c0 <HAL_SAI_Init+0x3ac>)
 8005060:	400b      	ands	r3, r1
 8005062:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005078:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507e:	431a      	orrs	r2, r3
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800508c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005098:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	051b      	lsls	r3, r3, #20
 80050a0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80050a6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80050be:	f023 030f 	bic.w	r3, r3, #15
 80050c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b35      	ldr	r3, [pc, #212]	@ (80051c4 <HAL_SAI_Init+0x3b0>)
 80050ee:	400b      	ands	r3, r1
 80050f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6899      	ldr	r1, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005102:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8005108:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800510e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	3b01      	subs	r3, #1
 8005116:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005118:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68d9      	ldr	r1, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005130:	400b      	ands	r3, r1
 8005132:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005142:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800514a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005150:	3b01      	subs	r3, #1
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <HAL_SAI_Init+0x3b4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d119      	bne.n	800519c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005168:	4b18      	ldr	r3, [pc, #96]	@ (80051cc <HAL_SAI_Init+0x3b8>)
 800516a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516c:	4a17      	ldr	r2, [pc, #92]	@ (80051cc <HAL_SAI_Init+0x3b8>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10e      	bne.n	800519c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	3b01      	subs	r3, #1
 8005188:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800518a:	4910      	ldr	r1, [pc, #64]	@ (80051cc <HAL_SAI_Init+0x3b8>)
 800518c:	4313      	orrs	r3, r2
 800518e:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005190:	4b0e      	ldr	r3, [pc, #56]	@ (80051cc <HAL_SAI_Init+0x3b8>)
 8005192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005194:	4a0d      	ldr	r2, [pc, #52]	@ (80051cc <HAL_SAI_Init+0x3b8>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3728      	adds	r7, #40	@ 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	f805c010 	.word	0xf805c010
 80051c4:	fff88000 	.word	0xfff88000
 80051c8:	40015404 	.word	0x40015404
 80051cc:	40015400 	.word	0x40015400

080051d0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051d8:	4b18      	ldr	r3, [pc, #96]	@ (800523c <SAI_Disable+0x6c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <SAI_Disable+0x70>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0b1b      	lsrs	r3, r3, #12
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80051fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	72fb      	strb	r3, [r7, #11]
      break;
 8005216:	e009      	b.n	800522c <SAI_Disable+0x5c>
    }
    count--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e7      	bne.n	80051fc <SAI_Disable+0x2c>

  return status;
 800522c:	7afb      	ldrb	r3, [r7, #11]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000000 	.word	0x20000000
 8005240:	95cbec1b 	.word	0x95cbec1b

08005244 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	@ 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e083      	b.n	800535e <HAL_SD_Init+0x11a>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb ff05 	bl	8001078 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2203      	movs	r2, #3
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f876 	bl	8005368 <HAL_SD_InitCard>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e06b      	b.n	800535e <HAL_SD_Init+0x11a>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005286:	f107 0308 	add.w	r3, r7, #8
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fab1 	bl	80057f4 <HAL_SD_GetCardStatus>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e060      	b.n	800535e <HAL_SD_Init+0x11a>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800529c:	7e3b      	ldrb	r3, [r7, #24]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80052a2:	7e7b      	ldrb	r3, [r7, #25]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10a      	bne.n	80052c6 <HAL_SD_Init+0x82>
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <HAL_SD_Init+0x78>
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052c4:	e00b      	b.n	80052de <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d104      	bne.n	80052d8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052d6:	e002      	b.n	80052de <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb3b 	bl	8005960 <HAL_SD_ConfigWideBusOperation>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e034      	b.n	800535e <HAL_SD_Init+0x11a>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80052f4:	f7fc fb06 	bl	8001904 <HAL_GetTick>
 80052f8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80052fa:	e014      	b.n	8005326 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80052fc:	f7fc fb02 	bl	8001904 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d10c      	bne.n	8005326 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005312:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e01b      	b.n	800535e <HAL_SD_Init+0x11a>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fc2e 	bl	8005b88 <HAL_SD_GetCardState>
 800532c:	4603      	mov	r3, r0
 800532e:	2b04      	cmp	r3, #4
 8005330:	d1e4      	bne.n	80052fc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fb11 	bl	8005960 <HAL_SD_ConfigWideBusOperation>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e00a      	b.n	800535e <HAL_SD_Init+0x11a>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	@ 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005368:	b5b0      	push	{r4, r5, r7, lr}
 800536a:	b08e      	sub	sp, #56	@ 0x38
 800536c:	af04      	add	r7, sp, #16
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005370:	2300      	movs	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005380:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005384:	f7fe fb2c 	bl	80039e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e079      	b.n	8005498 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	4a3d      	ldr	r2, [pc, #244]	@ (80054a0 <HAL_SD_InitCard+0x138>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0210 	orr.w	r2, r2, #16
 80053ce:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681d      	ldr	r5, [r3, #0]
 80053d4:	466c      	mov	r4, sp
 80053d6:	f107 0314 	add.w	r3, r7, #20
 80053da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053e8:	4628      	mov	r0, r5
 80053ea:	f002 f9f5 	bl	80077d8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fa27 	bl	8007846 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005404:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <HAL_SD_InitCard+0x13c>)
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	3301      	adds	r3, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f7fc fa84 	bl	800191c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fc97 	bl	8005d48 <SD_PowerON>
 800541a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e02e      	b.n	8005498 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fbc4 	bl	8005bc8 <SD_InitCard>
 8005440:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01b      	b.n	8005498 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005468:	4618      	mov	r0, r3
 800546a:	f002 fa83 	bl	8007974 <SDMMC_CmdBlockLength>
 800546e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00f      	beq.n	8005496 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a0b      	ldr	r2, [pc, #44]	@ (80054a8 <HAL_SD_InitCard+0x140>)
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	@ 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bdb0      	pop	{r4, r5, r7, pc}
 80054a0:	014f8b59 	.word	0x014f8b59
 80054a4:	00012110 	.word	0x00012110
 80054a8:	1fe00fff 	.word	0x1fe00fff

080054ac <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	0f9b      	lsrs	r3, r3, #30
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c6:	0e9b      	lsrs	r3, r3, #26
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005502:	b2da      	uxtb	r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800550c:	0d1b      	lsrs	r3, r3, #20
 800550e:	b29a      	uxth	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800552a:	0bdb      	lsrs	r3, r3, #15
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800553c:	0b9b      	lsrs	r3, r3, #14
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	b2da      	uxtb	r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800554e:	0b5b      	lsrs	r3, r3, #13
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005560:	0b1b      	lsrs	r3, r3, #12
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d163      	bne.n	8005644 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005580:	009a      	lsls	r2, r3, #2
 8005582:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005586:	4013      	ands	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800558c:	0f92      	lsrs	r2, r2, #30
 800558e:	431a      	orrs	r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005598:	0edb      	lsrs	r3, r3, #27
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055bc:	0d5b      	lsrs	r3, r3, #21
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055ce:	0c9b      	lsrs	r3, r3, #18
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e0:	0bdb      	lsrs	r3, r3, #15
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	7e1b      	ldrb	r3, [r3, #24]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	3302      	adds	r3, #2
 8005604:	2201      	movs	r2, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800560e:	fb03 f202 	mul.w	r2, r3, r2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	7a1b      	ldrb	r3, [r3, #8]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2201      	movs	r2, #1
 8005622:	409a      	lsls	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005630:	0a52      	lsrs	r2, r2, #9
 8005632:	fb03 f202 	mul.w	r2, r3, r2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005640:	659a      	str	r2, [r3, #88]	@ 0x58
 8005642:	e031      	b.n	80056a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d11d      	bne.n	8005688 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	431a      	orrs	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	3301      	adds	r3, #1
 8005668:	029a      	lsls	r2, r3, #10
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800567c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	@ 0x58
 8005686:	e00f      	b.n	80056a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a58      	ldr	r2, [pc, #352]	@ (80057f0 <HAL_SD_GetCardCSD+0x344>)
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005694:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e09d      	b.n	80057e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ac:	0b9b      	lsrs	r3, r3, #14
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e0:	0fdb      	lsrs	r3, r3, #31
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ec:	0f5b      	lsrs	r3, r3, #29
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	0e9b      	lsrs	r3, r3, #26
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	b2da      	uxtb	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005710:	0d9b      	lsrs	r3, r3, #22
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	b2da      	uxtb	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005722:	0d5b      	lsrs	r3, r3, #21
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	0bdb      	lsrs	r3, r3, #15
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005766:	0b9b      	lsrs	r3, r3, #14
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577a:	0b5b      	lsrs	r3, r3, #13
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578e:	0b1b      	lsrs	r3, r3, #12
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a2:	0a9b      	lsrs	r3, r3, #10
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	1fe00fff 	.word	0x1fe00fff

080057f4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b094      	sub	sp, #80	@ 0x50
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fba8 	bl	8005f60 <SD_SendSDStatus>
 8005810:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005814:	2b00      	cmp	r3, #0
 8005816:	d011      	beq.n	800583c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a4f      	ldr	r2, [pc, #316]	@ (800595c <HAL_SD_GetCardStatus+0x168>)
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800583a:	e070      	b.n	800591e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	099b      	lsrs	r3, r3, #6
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	b2da      	uxtb	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	b29b      	uxth	r3, r3
 8005862:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005866:	b29a      	uxth	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0e1b      	lsrs	r3, r3, #24
 800586c:	b29b      	uxth	r3, r3
 800586e:	4313      	orrs	r3, r2
 8005870:	b29a      	uxth	r2, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	061a      	lsls	r2, r3, #24
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005882:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800588c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	0d1b      	lsrs	r3, r3, #20
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	0a9b      	lsrs	r3, r3, #10
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	b2da      	uxtb	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	b2da      	uxtb	r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	0e1b      	lsrs	r3, r3, #24
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005926:	4618      	mov	r0, r3
 8005928:	f002 f824 	bl	8007974 <SDMMC_CmdBlockLength>
 800592c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800592e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a08      	ldr	r2, [pc, #32]	@ (800595c <HAL_SD_GetCardStatus+0x168>)
 800593a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8005950:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005954:	4618      	mov	r0, r3
 8005956:	3750      	adds	r7, #80	@ 0x50
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	1fe00fff 	.word	0x1fe00fff

08005960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005960:	b5b0      	push	{r4, r5, r7, lr}
 8005962:	b090      	sub	sp, #64	@ 0x40
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	2b03      	cmp	r3, #3
 800597e:	d02e      	beq.n	80059de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005986:	d106      	bne.n	8005996 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38
 8005994:	e029      	b.n	80059ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800599c:	d10a      	bne.n	80059b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fbd6 	bl	8006150 <SD_WideBus_Enable>
 80059a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80059b2:	e01a      	b.n	80059ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fc13 	bl	80061e6 <SD_WideBus_Disable>
 80059c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80059ce:	e00c      	b.n	80059ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	@ 0x38
 80059dc:	e005      	b.n	80059ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a60      	ldr	r2, [pc, #384]	@ (8005b78 <HAL_SD_ConfigWideBusOperation+0x218>)
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a00:	e097      	b.n	8005b32 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005a02:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005a06:	f7fd ffeb 	bl	80039e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a0a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8086 	beq.w	8005b20 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	4952      	ldr	r1, [pc, #328]	@ (8005b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005a32:	fba1 1303 	umull	r1, r3, r1, r3
 8005a36:	0e1b      	lsrs	r3, r3, #24
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d303      	bcc.n	8005a44 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e05a      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4c:	d103      	bne.n	8005a56 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e051      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5e:	d126      	bne.n	8005aae <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10e      	bne.n	8005a86 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	4a45      	ldr	r2, [pc, #276]	@ (8005b80 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d906      	bls.n	8005a7e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	4a42      	ldr	r2, [pc, #264]	@ (8005b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	0e5b      	lsrs	r3, r3, #25
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e03d      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	e039      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	4a3b      	ldr	r2, [pc, #236]	@ (8005b80 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	4a38      	ldr	r2, [pc, #224]	@ (8005b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	0e5b      	lsrs	r3, r3, #25
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e029      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e025      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d906      	bls.n	8005acc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	0e1b      	lsrs	r3, r3, #24
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	e016      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e012      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d906      	bls.n	8005af4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	4a24      	ldr	r2, [pc, #144]	@ (8005b7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	e002      	b.n	8005afa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681d      	ldr	r5, [r3, #0]
 8005b04:	466c      	mov	r4, sp
 8005b06:	f107 0318 	add.w	r3, r7, #24
 8005b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f001 fe5d 	bl	80077d8 <SDMMC_Init>
 8005b1e:	e008      	b.n	8005b32 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 ff1a 	bl	8007974 <SDMMC_CmdBlockLength>
 8005b40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b78 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005b4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3730      	adds	r7, #48	@ 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bdb0      	pop	{r4, r5, r7, pc}
 8005b76:	bf00      	nop
 8005b78:	1fe00fff 	.word	0x1fe00fff
 8005b7c:	55e63b89 	.word	0x55e63b89
 8005b80:	02faf080 	.word	0x02faf080
 8005b84:	017d7840 	.word	0x017d7840

08005b88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fab0 	bl	8006100 <SD_SendStatus>
 8005ba0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0a5b      	lsrs	r3, r3, #9
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005bbe:	693b      	ldr	r3, [r7, #16]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bc8:	b5b0      	push	{r4, r5, r7, lr}
 8005bca:	b090      	sub	sp, #64	@ 0x40
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fe46 	bl	800786a <SDMMC_GetPowerState>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005be4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005be8:	e0a9      	b.n	8005d3e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d02e      	beq.n	8005c50 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 ffc9 	bl	8007b8e <SDMMC_CmdSendCID>
 8005bfc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <SD_InitCard+0x40>
    {
      return errorstate;
 8005c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c06:	e09a      	b.n	8005d3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fe71 	bl	80078f6 <SDMMC_GetResponse>
 8005c14:	4602      	mov	r2, r0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2104      	movs	r1, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fe68 	bl	80078f6 <SDMMC_GetResponse>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2108      	movs	r1, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fe5f 	bl	80078f6 <SDMMC_GetResponse>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	210c      	movs	r1, #12
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fe56 	bl	80078f6 <SDMMC_GetResponse>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d00d      	beq.n	8005c74 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f107 020e 	add.w	r2, r7, #14
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 ffd2 	bl	8007c0c <SDMMC_CmdSetRelAdd>
 8005c68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <SD_InitCard+0xac>
    {
      return errorstate;
 8005c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c72:	e064      	b.n	8005d3e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d036      	beq.n	8005cea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c7c:	89fb      	ldrh	r3, [r7, #14]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f001 ff9b 	bl	8007bcc <SDMMC_CmdSendCSD>
 8005c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <SD_InitCard+0xda>
    {
      return errorstate;
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca0:	e04d      	b.n	8005d3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fe24 	bl	80078f6 <SDMMC_GetResponse>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2104      	movs	r1, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fe1b 	bl	80078f6 <SDMMC_GetResponse>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2108      	movs	r1, #8
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fe12 	bl	80078f6 <SDMMC_GetResponse>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	210c      	movs	r1, #12
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fe09 	bl	80078f6 <SDMMC_GetResponse>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2104      	movs	r1, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fe00 	bl	80078f6 <SDMMC_GetResponse>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	0d1a      	lsrs	r2, r3, #20
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cfe:	f107 0310 	add.w	r3, r7, #16
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fbd1 	bl	80054ac <HAL_SD_GetCardCSD>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d14:	e013      	b.n	8005d3e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	2200      	movs	r2, #0
 8005d22:	461c      	mov	r4, r3
 8005d24:	4615      	mov	r5, r2
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	f001 fe45 	bl	80079ba <SDMMC_CmdSelDesel>
 8005d30:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <SD_InitCard+0x174>
  {
    return errorstate;
 8005d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3a:	e000      	b.n	8005d3e <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3740      	adds	r7, #64	@ 0x40
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005d48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7fb fdd2 	bl	8001904 <HAL_GetTick>
 8005d60:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fe4b 	bl	8007a02 <SDMMC_CmdGoIdleState>
 8005d6c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <SD_PowerON+0x30>
  {
    return errorstate;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	e0ed      	b.n	8005f54 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fe5e 	bl	8007a3e <SDMMC_CmdOperCond>
 8005d82:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fe34 	bl	8007a02 <SDMMC_CmdGoIdleState>
 8005d9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <SD_PowerON+0x64>
    {
      return errorstate;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	e0d6      	b.n	8005f54 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d137      	bne.n	8005e24 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fe5f 	bl	8007a7e <SDMMC_CmdAppCommand>
 8005dc0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02d      	beq.n	8005e24 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005dcc:	e0c2      	b.n	8005f54 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fe52 	bl	8007a7e <SDMMC_CmdAppCommand>
 8005dda:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	e0b6      	b.n	8005f54 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	495c      	ldr	r1, [pc, #368]	@ (8005f5c <SD_PowerON+0x214>)
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 fe69 	bl	8007ac4 <SDMMC_CmdAppOperCommand>
 8005df2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005dfe:	e0a9      	b.n	8005f54 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fd75 	bl	80078f6 <SDMMC_GetResponse>
 8005e0c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	0fdb      	lsrs	r3, r3, #31
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <SD_PowerON+0xd2>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <SD_PowerON+0xd4>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]

    count++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d802      	bhi.n	8005e34 <SD_PowerON+0xec>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0cc      	beq.n	8005dce <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d902      	bls.n	8005e44 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e42:	e087      	b.n	8005f54 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d07e      	beq.n	8005f4c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d17a      	bne.n	8005f52 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d075      	beq.n	8005f52 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0208 	orr.w	r2, r2, #8
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 ff29 	bl	8007cda <SDMMC_CmdVoltageSwitch>
 8005e88:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <SD_PowerON+0x162>
        {
          return errorstate;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	e05f      	b.n	8005f54 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e94:	f7fb fd36 	bl	8001904 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d102      	bne.n	8005eaa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8005ea4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ea8:	e054      	b.n	8005f54 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eb8:	d1ec      	bne.n	8005e94 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005ec2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ed2:	d002      	beq.n	8005eda <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005ed8:	e03c      	b.n	8005f54 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f000 fa9e 	bl	800641c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0204 	orr.w	r2, r2, #4
 8005eee:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005ef0:	e00a      	b.n	8005f08 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ef2:	f7fb fd07 	bl	8001904 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8005f02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f06:	e025      	b.n	8005f54 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f16:	d1ec      	bne.n	8005ef2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f30:	d102      	bne.n	8005f38 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f36:	e00d      	b.n	8005f54 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2213      	movs	r2, #19
 8005f3e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f4a:	e002      	b.n	8005f52 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	c1100000 	.word	0xc1100000

08005f60 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	@ 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7fb fccb 	bl	8001904 <HAL_GetTick>
 8005f6e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fcbb 	bl	80078f6 <SDMMC_GetResponse>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f8a:	d102      	bne.n	8005f92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f90:	e0b0      	b.n	80060f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2140      	movs	r1, #64	@ 0x40
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fceb 	bl	8007974 <SDMMC_CmdBlockLength>
 8005f9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	e0a0      	b.n	80060f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f001 fd5d 	bl	8007a7e <SDMMC_CmdAppCommand>
 8005fc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	e08d      	b.n	80060f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005fde:	2340      	movs	r3, #64	@ 0x40
 8005fe0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005fe2:	2360      	movs	r3, #96	@ 0x60
 8005fe4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f107 0208 	add.w	r2, r7, #8
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fc8d 	bl	800791c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fe45 	bl	8007c96 <SDMMC_CmdStatusRegister>
 800600c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02b      	beq.n	800606c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	e069      	b.n	80060f4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800602e:	2300      	movs	r3, #0
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006032:	e00d      	b.n	8006050 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fbf7 	bl	800782c <SDMMC_ReadFIFO>
 800603e:	4602      	mov	r2, r0
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	601a      	str	r2, [r3, #0]
        pData++;
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	3304      	adds	r3, #4
 8006048:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 800604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604c:	3301      	adds	r3, #1
 800604e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	2b07      	cmp	r3, #7
 8006054:	d9ee      	bls.n	8006034 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006056:	f7fb fc55 	bl	8001904 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d102      	bne.n	800606c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006066:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800606a:	e043      	b.n	80060f4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0d2      	beq.n	8006020 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006088:	2308      	movs	r3, #8
 800608a:	e033      	b.n	80060f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	e02a      	b.n	80060f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80060ac:	2320      	movs	r3, #32
 80060ae:	e021      	b.n	80060f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fbb9 	bl	800782c <SDMMC_ReadFIFO>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060be:	601a      	str	r2, [r3, #0]
    pData++;
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	3304      	adds	r3, #4
 80060c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060c6:	f7fb fc1d 	bl	8001904 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d102      	bne.n	80060dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060da:	e00b      	b.n	80060f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e2      	bne.n	80060b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a03      	ldr	r2, [pc, #12]	@ (80060fc <SD_SendSDStatus+0x19c>)
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	@ 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	18000f3a 	.word	0x18000f3a

08006100 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006110:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006114:	e018      	b.n	8006148 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f001 fd94 	bl	8007c50 <SDMMC_CmdSendStatus>
 8006128:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	e009      	b.n	8006148 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fbdb 	bl	80078f6 <SDMMC_GetResponse>
 8006140:	4602      	mov	r2, r0
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fbc5 	bl	80078f6 <SDMMC_GetResponse>
 800616c:	4603      	mov	r3, r0
 800616e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006176:	d102      	bne.n	800617e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006178:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800617c:	e02f      	b.n	80061de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800617e:	f107 030c 	add.w	r3, r7, #12
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f879 	bl	800627c <SD_FindSCR>
 800618a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	e023      	b.n	80061de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01c      	beq.n	80061da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f001 fc66 	bl	8007a7e <SDMMC_CmdAppCommand>
 80061b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	e00f      	b.n	80061de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 fc9d 	bl	8007b04 <SDMMC_CmdBusWidth>
 80061ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e003      	b.n	80061de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e001      	b.n	80061de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fb7a 	bl	80078f6 <SDMMC_GetResponse>
 8006202:	4603      	mov	r3, r0
 8006204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800620c:	d102      	bne.n	8006214 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800620e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006212:	e02f      	b.n	8006274 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006214:	f107 030c 	add.w	r3, r7, #12
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f82e 	bl	800627c <SD_FindSCR>
 8006220:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	e023      	b.n	8006274 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01c      	beq.n	8006270 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f001 fc1b 	bl	8007a7e <SDMMC_CmdAppCommand>
 8006248:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	e00f      	b.n	8006274 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fc52 	bl	8007b04 <SDMMC_CmdBusWidth>
 8006260:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	e003      	b.n	8006274 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800626c:	2300      	movs	r3, #0
 800626e:	e001      	b.n	8006274 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006270:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	@ 0x38
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006286:	f7fb fb3d 	bl	8001904 <HAL_GetTick>
 800628a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2108      	movs	r1, #8
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fb66 	bl	8007974 <SDMMC_CmdBlockLength>
 80062a8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	e0ad      	b.n	8006410 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f001 fbdc 	bl	8007a7e <SDMMC_CmdAppCommand>
 80062c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	e09e      	b.n	8006410 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80062d8:	2308      	movs	r3, #8
 80062da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80062dc:	2330      	movs	r3, #48	@ 0x30
 80062de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062e0:	2302      	movs	r3, #2
 80062e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f107 0210 	add.w	r2, r7, #16
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fb10 	bl	800791c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fc22 	bl	8007b4a <SDMMC_CmdSendSCR>
 8006306:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d027      	beq.n	800635e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	e07e      	b.n	8006410 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d113      	bne.n	8006348 <SD_FindSCR+0xcc>
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	2b00      	cmp	r3, #0
 8006324:	d110      	bne.n	8006348 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fa7e 	bl	800782c <SDMMC_ReadFIFO>
 8006330:	4603      	mov	r3, r0
 8006332:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fa77 	bl	800782c <SDMMC_ReadFIFO>
 800633e:	4603      	mov	r3, r0
 8006340:	60fb      	str	r3, [r7, #12]
      index++;
 8006342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006344:	3301      	adds	r3, #1
 8006346:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006348:	f7fb fadc 	bl	8001904 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d102      	bne.n	800635e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006358:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800635c:	e058      	b.n	8006410 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006364:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0d1      	beq.n	8006312 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2208      	movs	r2, #8
 8006382:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006384:	2308      	movs	r3, #8
 8006386:	e043      	b.n	8006410 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2202      	movs	r2, #2
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800639e:	2302      	movs	r3, #2
 80063a0:	e036      	b.n	8006410 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2220      	movs	r2, #32
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80063b8:	2320      	movs	r3, #32
 80063ba:	e029      	b.n	8006410 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <SD_FindSCR+0x19c>)
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	061a      	lsls	r2, r3, #24
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	0e1b      	lsrs	r3, r3, #24
 80063e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	601a      	str	r2, [r3, #0]
    scr++;
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	3304      	adds	r3, #4
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	061a      	lsls	r2, r3, #24
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006402:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	0e1b      	lsrs	r3, r3, #24
 8006408:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3738      	adds	r7, #56	@ 0x38
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	18000f3a 	.word	0x18000f3a

0800641c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e095      	b.n	8006570 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006454:	d009      	beq.n	800646a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	61da      	str	r2, [r3, #28]
 800645c:	e005      	b.n	800646a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fa fe7b 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064aa:	d902      	bls.n	80064b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e002      	b.n	80064b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80064c0:	d007      	beq.n	80064d2 <HAL_SPI_Init+0xa0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ca:	d002      	beq.n	80064d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006514:	ea42 0103 	orr.w	r1, r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	0c1b      	lsrs	r3, r3, #16
 800652e:	f003 0204 	and.w	r2, r3, #4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800654e:	ea42 0103 	orr.w	r1, r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e038      	b.n	8006600 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7fb f81e 	bl	80015e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3308      	adds	r3, #8
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f000 ffee 	bl	8007594 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	461a      	mov	r2, r3
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	f001 f880 	bl	80076c8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6858      	ldr	r0, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	f001 f8c4 	bl	8007762 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	6892      	ldr	r2, [r2, #8]
 80065e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	6892      	ldr	r2, [r2, #8]
 80065ee:	f041 0101 	orr.w	r1, r1, #1
 80065f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e042      	b.n	80066a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fa fe09 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2224      	movs	r2, #36	@ 0x24
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc7c 	bl	8006f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f97d 	bl	8006958 <UART_SetConfig>
 800665e:	4603      	mov	r3, r0
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e01b      	b.n	80066a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fcfb 	bl	8007094 <UART_CheckIdleState>
 800669e:	4603      	mov	r3, r0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	@ 0x28
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d17b      	bne.n	80067ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <HAL_UART_Transmit+0x26>
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e074      	b.n	80067bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2221      	movs	r2, #33	@ 0x21
 80066de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066e2:	f7fb f90f 	bl	8001904 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006700:	d108      	bne.n	8006714 <HAL_UART_Transmit+0x6c>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e003      	b.n	800671c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800671c:	e030      	b.n	8006780 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	@ 0x80
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fd5d 	bl	80071e8 <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e03d      	b.n	80067bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	881a      	ldrh	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006752:	b292      	uxth	r2, r2
 8006754:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	3302      	adds	r3, #2
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e007      	b.n	800676e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1c8      	bne.n	800671e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	2140      	movs	r1, #64	@ 0x40
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fd26 	bl	80071e8 <UART_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e006      	b.n	80067bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	@ 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067da:	2b20      	cmp	r3, #32
 80067dc:	f040 80b6 	bne.w	800694c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Receive+0x28>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0ae      	b.n	800694e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2222      	movs	r2, #34	@ 0x22
 80067fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006806:	f7fb f87d 	bl	8001904 <HAL_GetTick>
 800680a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006824:	d10e      	bne.n	8006844 <HAL_UART_Receive+0x80>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d105      	bne.n	800683a <HAL_UART_Receive+0x76>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006834:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006838:	e02d      	b.n	8006896 <HAL_UART_Receive+0xd2>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	22ff      	movs	r2, #255	@ 0xff
 800683e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006842:	e028      	b.n	8006896 <HAL_UART_Receive+0xd2>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10d      	bne.n	8006868 <HAL_UART_Receive+0xa4>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_UART_Receive+0x9a>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	22ff      	movs	r2, #255	@ 0xff
 8006858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800685c:	e01b      	b.n	8006896 <HAL_UART_Receive+0xd2>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	227f      	movs	r2, #127	@ 0x7f
 8006862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006866:	e016      	b.n	8006896 <HAL_UART_Receive+0xd2>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006870:	d10d      	bne.n	800688e <HAL_UART_Receive+0xca>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <HAL_UART_Receive+0xc0>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	227f      	movs	r2, #127	@ 0x7f
 800687e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006882:	e008      	b.n	8006896 <HAL_UART_Receive+0xd2>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	223f      	movs	r2, #63	@ 0x3f
 8006888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800688c:	e003      	b.n	8006896 <HAL_UART_Receive+0xd2>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800689c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a6:	d108      	bne.n	80068ba <HAL_UART_Receive+0xf6>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	e003      	b.n	80068c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80068c2:	e037      	b.n	8006934 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2200      	movs	r2, #0
 80068cc:	2120      	movs	r1, #32
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fc8a 	bl	80071e8 <UART_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e033      	b.n	800694e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10c      	bne.n	8006906 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	4013      	ands	r3, r2
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	3302      	adds	r3, #2
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e00d      	b.n	8006922 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800690c:	b29b      	uxth	r3, r3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	8a7b      	ldrh	r3, [r7, #18]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4013      	ands	r3, r2
 8006916:	b2da      	uxtb	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	3301      	adds	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1c1      	bne.n	80068c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800695c:	b08c      	sub	sp, #48	@ 0x30
 800695e:	af00      	add	r7, sp, #0
 8006960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4baa      	ldr	r3, [pc, #680]	@ (8006c30 <UART_SetConfig+0x2d8>)
 8006988:	4013      	ands	r3, r2
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006990:	430b      	orrs	r3, r1
 8006992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a9f      	ldr	r2, [pc, #636]	@ (8006c34 <UART_SetConfig+0x2dc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d8:	430b      	orrs	r3, r1
 80069da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	f023 010f 	bic.w	r1, r3, #15
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a90      	ldr	r2, [pc, #576]	@ (8006c38 <UART_SetConfig+0x2e0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d125      	bne.n	8006a48 <UART_SetConfig+0xf0>
 80069fc:	4b8f      	ldr	r3, [pc, #572]	@ (8006c3c <UART_SetConfig+0x2e4>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d81a      	bhi.n	8006a40 <UART_SetConfig+0xe8>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <UART_SetConfig+0xb8>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006a29 	.word	0x08006a29
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e116      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e112      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e10e      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e10a      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e106      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c40 <UART_SetConfig+0x2e8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d138      	bne.n	8006ac4 <UART_SetConfig+0x16c>
 8006a52:	4b7a      	ldr	r3, [pc, #488]	@ (8006c3c <UART_SetConfig+0x2e4>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a58:	f003 030c 	and.w	r3, r3, #12
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	d82d      	bhi.n	8006abc <UART_SetConfig+0x164>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <UART_SetConfig+0x110>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a9d 	.word	0x08006a9d
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006abd 	.word	0x08006abd
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e0d8      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e0d4      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006aac:	2304      	movs	r3, #4
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e0d0      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e0cc      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e0c8      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c44 <UART_SetConfig+0x2ec>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d125      	bne.n	8006b1a <UART_SetConfig+0x1c2>
 8006ace:	4b5b      	ldr	r3, [pc, #364]	@ (8006c3c <UART_SetConfig+0x2e4>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad8:	2b30      	cmp	r3, #48	@ 0x30
 8006ada:	d016      	beq.n	8006b0a <UART_SetConfig+0x1b2>
 8006adc:	2b30      	cmp	r3, #48	@ 0x30
 8006ade:	d818      	bhi.n	8006b12 <UART_SetConfig+0x1ba>
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d00a      	beq.n	8006afa <UART_SetConfig+0x1a2>
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d814      	bhi.n	8006b12 <UART_SetConfig+0x1ba>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <UART_SetConfig+0x19a>
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d008      	beq.n	8006b02 <UART_SetConfig+0x1aa>
 8006af0:	e00f      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af8:	e0ad      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006afa:	2302      	movs	r3, #2
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b00:	e0a9      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b02:	2304      	movs	r3, #4
 8006b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b08:	e0a5      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b10:	e0a1      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b12:	2310      	movs	r3, #16
 8006b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b18:	e09d      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c48 <UART_SetConfig+0x2f0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d125      	bne.n	8006b70 <UART_SetConfig+0x218>
 8006b24:	4b45      	ldr	r3, [pc, #276]	@ (8006c3c <UART_SetConfig+0x2e4>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b30:	d016      	beq.n	8006b60 <UART_SetConfig+0x208>
 8006b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b34:	d818      	bhi.n	8006b68 <UART_SetConfig+0x210>
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d00a      	beq.n	8006b50 <UART_SetConfig+0x1f8>
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d814      	bhi.n	8006b68 <UART_SetConfig+0x210>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <UART_SetConfig+0x1f0>
 8006b42:	2b40      	cmp	r3, #64	@ 0x40
 8006b44:	d008      	beq.n	8006b58 <UART_SetConfig+0x200>
 8006b46:	e00f      	b.n	8006b68 <UART_SetConfig+0x210>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e082      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e07e      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e07a      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e076      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e072      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a35      	ldr	r2, [pc, #212]	@ (8006c4c <UART_SetConfig+0x2f4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d12a      	bne.n	8006bd0 <UART_SetConfig+0x278>
 8006b7a:	4b30      	ldr	r3, [pc, #192]	@ (8006c3c <UART_SetConfig+0x2e4>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b88:	d01a      	beq.n	8006bc0 <UART_SetConfig+0x268>
 8006b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8e:	d81b      	bhi.n	8006bc8 <UART_SetConfig+0x270>
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b94:	d00c      	beq.n	8006bb0 <UART_SetConfig+0x258>
 8006b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b9a:	d815      	bhi.n	8006bc8 <UART_SetConfig+0x270>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <UART_SetConfig+0x250>
 8006ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba4:	d008      	beq.n	8006bb8 <UART_SetConfig+0x260>
 8006ba6:	e00f      	b.n	8006bc8 <UART_SetConfig+0x270>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e052      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e04e      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e04a      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e046      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e042      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <UART_SetConfig+0x2dc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d13a      	bne.n	8006c50 <UART_SetConfig+0x2f8>
 8006bda:	4b18      	ldr	r3, [pc, #96]	@ (8006c3c <UART_SetConfig+0x2e4>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be8:	d01a      	beq.n	8006c20 <UART_SetConfig+0x2c8>
 8006bea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bee:	d81b      	bhi.n	8006c28 <UART_SetConfig+0x2d0>
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf4:	d00c      	beq.n	8006c10 <UART_SetConfig+0x2b8>
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bfa:	d815      	bhi.n	8006c28 <UART_SetConfig+0x2d0>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <UART_SetConfig+0x2b0>
 8006c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c04:	d008      	beq.n	8006c18 <UART_SetConfig+0x2c0>
 8006c06:	e00f      	b.n	8006c28 <UART_SetConfig+0x2d0>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e022      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006c10:	2302      	movs	r3, #2
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e01e      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e01a      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e016      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e012      	b.n	8006c56 <UART_SetConfig+0x2fe>
 8006c30:	cfff69f3 	.word	0xcfff69f3
 8006c34:	40008000 	.word	0x40008000
 8006c38:	40013800 	.word	0x40013800
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40004400 	.word	0x40004400
 8006c44:	40004800 	.word	0x40004800
 8006c48:	40004c00 	.word	0x40004c00
 8006c4c:	40005000 	.word	0x40005000
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4aae      	ldr	r2, [pc, #696]	@ (8006f14 <UART_SetConfig+0x5bc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	f040 8097 	bne.w	8006d90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d823      	bhi.n	8006cb2 <UART_SetConfig+0x35a>
 8006c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <UART_SetConfig+0x318>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006cb3 	.word	0x08006cb3
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006cb3 	.word	0x08006cb3
 8006c80:	08006ca3 	.word	0x08006ca3
 8006c84:	08006cb3 	.word	0x08006cb3
 8006c88:	08006cb3 	.word	0x08006cb3
 8006c8c:	08006cb3 	.word	0x08006cb3
 8006c90:	08006cab 	.word	0x08006cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c94:	f7fc fa2a 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8006c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c9a:	e010      	b.n	8006cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006f18 <UART_SetConfig+0x5c0>)
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ca0:	e00d      	b.n	8006cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca2:	f7fc f98d 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8006ca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ca8:	e009      	b.n	8006cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cb0:	e005      	b.n	8006cbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8130 	beq.w	8006f26 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	4a94      	ldr	r2, [pc, #592]	@ (8006f1c <UART_SetConfig+0x5c4>)
 8006ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d305      	bcc.n	8006cf6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d903      	bls.n	8006cfe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cfc:	e113      	b.n	8006f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2200      	movs	r2, #0
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	60fa      	str	r2, [r7, #12]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	4a84      	ldr	r2, [pc, #528]	@ (8006f1c <UART_SetConfig+0x5c4>)
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2200      	movs	r2, #0
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d20:	f7f9 fabe 	bl	80002a0 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	020b      	lsls	r3, r1, #8
 8006d36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d3a:	0202      	lsls	r2, r0, #8
 8006d3c:	6979      	ldr	r1, [r7, #20]
 8006d3e:	6849      	ldr	r1, [r1, #4]
 8006d40:	0849      	lsrs	r1, r1, #1
 8006d42:	2000      	movs	r0, #0
 8006d44:	460c      	mov	r4, r1
 8006d46:	4605      	mov	r5, r0
 8006d48:	eb12 0804 	adds.w	r8, r2, r4
 8006d4c:	eb43 0905 	adc.w	r9, r3, r5
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	469a      	mov	sl, r3
 8006d58:	4693      	mov	fp, r2
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	465b      	mov	r3, fp
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fa9d 	bl	80002a0 <__aeabi_uldivmod>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d74:	d308      	bcc.n	8006d88 <UART_SetConfig+0x430>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d7c:	d204      	bcs.n	8006d88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6a3a      	ldr	r2, [r7, #32]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	e0ce      	b.n	8006f26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d8e:	e0ca      	b.n	8006f26 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d98:	d166      	bne.n	8006e68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d827      	bhi.n	8006df2 <UART_SetConfig+0x49a>
 8006da2:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0x450>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	08006df3 	.word	0x08006df3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006deb 	.word	0x08006deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fc f98e 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd2:	e014      	b.n	8006dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7fc f9a0 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8006dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dda:	e010      	b.n	8006dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8006f18 <UART_SetConfig+0x5c0>)
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006de0:	e00d      	b.n	8006dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fc f8ed 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8006de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de8:	e009      	b.n	8006dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006df0:	e005      	b.n	8006dfe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8090 	beq.w	8006f26 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	4a44      	ldr	r2, [pc, #272]	@ (8006f1c <UART_SetConfig+0x5c4>)
 8006e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e18:	005a      	lsls	r2, r3, #1
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	441a      	add	r2, r3
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	d916      	bls.n	8006e60 <UART_SetConfig+0x508>
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e38:	d212      	bcs.n	8006e60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f023 030f 	bic.w	r3, r3, #15
 8006e42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	8bfb      	ldrh	r3, [r7, #30]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	8bfa      	ldrh	r2, [r7, #30]
 8006e5c:	60da      	str	r2, [r3, #12]
 8006e5e:	e062      	b.n	8006f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e66:	e05e      	b.n	8006f26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d828      	bhi.n	8006ec2 <UART_SetConfig+0x56a>
 8006e70:	a201      	add	r2, pc, #4	@ (adr r2, 8006e78 <UART_SetConfig+0x520>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	08006ec3 	.word	0x08006ec3
 8006e88:	08006eb3 	.word	0x08006eb3
 8006e8c:	08006ec3 	.word	0x08006ec3
 8006e90:	08006ec3 	.word	0x08006ec3
 8006e94:	08006ec3 	.word	0x08006ec3
 8006e98:	08006ebb 	.word	0x08006ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9c:	f7fc f926 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea2:	e014      	b.n	8006ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fc f938 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eaa:	e010      	b.n	8006ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eac:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <UART_SetConfig+0x5c0>)
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eb0:	e00d      	b.n	8006ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb2:	f7fc f885 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8006eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb8:	e009      	b.n	8006ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ec0:	e005      	b.n	8006ece <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d028      	beq.n	8006f26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	4a10      	ldr	r2, [pc, #64]	@ (8006f1c <UART_SetConfig+0x5c4>)
 8006eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	441a      	add	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d910      	bls.n	8006f20 <UART_SetConfig+0x5c8>
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f04:	d20c      	bcs.n	8006f20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60da      	str	r2, [r3, #12]
 8006f10:	e009      	b.n	8006f26 <UART_SetConfig+0x5ce>
 8006f12:	bf00      	nop
 8006f14:	40008000 	.word	0x40008000
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	0800cf90 	.word	0x0800cf90
      }
      else
      {
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3730      	adds	r7, #48	@ 0x30
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01a      	beq.n	8007066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800704e:	d10a      	bne.n	8007066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
  }
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b098      	sub	sp, #96	@ 0x60
 8007098:	af02      	add	r7, sp, #8
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070a4:	f7fa fc2e 	bl	8001904 <HAL_GetTick>
 80070a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d12f      	bne.n	8007118 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f88e 	bl	80071e8 <UART_WaitOnFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d022      	beq.n	8007118 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e6      	bne.n	80070d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e063      	b.n	80071e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b04      	cmp	r3, #4
 8007124:	d149      	bne.n	80071ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007126:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712e:	2200      	movs	r2, #0
 8007130:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f857 	bl	80071e8 <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d03c      	beq.n	80071ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	623b      	str	r3, [r7, #32]
   return(result);
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	60fb      	str	r3, [r7, #12]
   return(result);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	69b9      	ldr	r1, [r7, #24]
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	617b      	str	r3, [r7, #20]
   return(result);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e012      	b.n	80071e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3758      	adds	r7, #88	@ 0x58
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f8:	e04f      	b.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d04b      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007202:	f7fa fb7f 	bl	8001904 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	429a      	cmp	r2, r3
 8007210:	d302      	bcc.n	8007218 <UART_WaitOnFlagUntilTimeout+0x30>
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e04e      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d037      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b80      	cmp	r3, #128	@ 0x80
 800722e:	d034      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b40      	cmp	r3, #64	@ 0x40
 8007234:	d031      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d110      	bne.n	8007266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2208      	movs	r2, #8
 800724a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f838 	bl	80072c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2208      	movs	r2, #8
 8007256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e029      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007274:	d111      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800727e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f81e 	bl	80072c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e00f      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4013      	ands	r3, r2
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	bf0c      	ite	eq
 80072aa:	2301      	moveq	r3, #1
 80072ac:	2300      	movne	r3, #0
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d0a0      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b095      	sub	sp, #84	@ 0x54
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	61fb      	str	r3, [r7, #28]
   return(result);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e3      	bne.n	80072fc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d118      	bne.n	800736e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	60bb      	str	r3, [r7, #8]
   return(result);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f023 0310 	bic.w	r3, r3, #16
 8007350:	647b      	str	r3, [r7, #68]	@ 0x44
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6979      	ldr	r1, [r7, #20]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	613b      	str	r3, [r7, #16]
   return(result);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007382:	bf00      	nop
 8007384:	3754      	adds	r7, #84	@ 0x54
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e027      	b.n	80073f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2224      	movs	r2, #36	@ 0x24
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0201 	bic.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80073d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007414:	2302      	movs	r3, #2
 8007416:	e02d      	b.n	8007474 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2224      	movs	r2, #36	@ 0x24
 8007424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f84f 	bl	80074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e02d      	b.n	80074f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2224      	movs	r2, #36	@ 0x24
 80074a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f811 	bl	80074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007518:	e031      	b.n	800757e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800751a:	2308      	movs	r3, #8
 800751c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800751e:	2308      	movs	r3, #8
 8007520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	0e5b      	lsrs	r3, r3, #25
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	0f5b      	lsrs	r3, r3, #29
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	7b3a      	ldrb	r2, [r7, #12]
 8007546:	4911      	ldr	r1, [pc, #68]	@ (800758c <UARTEx_SetNbDataToProcess+0x94>)
 8007548:	5c8a      	ldrb	r2, [r1, r2]
 800754a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800754e:	7b3a      	ldrb	r2, [r7, #12]
 8007550:	490f      	ldr	r1, [pc, #60]	@ (8007590 <UARTEx_SetNbDataToProcess+0x98>)
 8007552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007554:	fb93 f3f2 	sdiv	r3, r3, r2
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	7b7a      	ldrb	r2, [r7, #13]
 8007564:	4909      	ldr	r1, [pc, #36]	@ (800758c <UARTEx_SetNbDataToProcess+0x94>)
 8007566:	5c8a      	ldrb	r2, [r1, r2]
 8007568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800756c:	7b7a      	ldrb	r2, [r7, #13]
 800756e:	4908      	ldr	r1, [pc, #32]	@ (8007590 <UARTEx_SetNbDataToProcess+0x98>)
 8007570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007572:	fb93 f3f2 	sdiv	r3, r3, r2
 8007576:	b29a      	uxth	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	0800cfa8 	.word	0x0800cfa8
 8007590:	0800cfb0 	.word	0x0800cfb0

08007594 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f023 0101 	bic.w	r1, r3, #1
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d102      	bne.n	80075c4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80075be:	2340      	movs	r3, #64	@ 0x40
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	e001      	b.n	80075c8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80075d4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80075da:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80075e0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80075e6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80075ec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80075f2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80075f8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80075fe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8007604:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007636:	4b23      	ldr	r3, [pc, #140]	@ (80076c4 <FMC_NORSRAM_Init+0x130>)
 8007638:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007640:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007648:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8007650:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007658:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	43db      	mvns	r3, r3
 8007668:	ea02 0103 	and.w	r1, r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4319      	orrs	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007682:	d10c      	bne.n	800769e <FMC_NORSRAM_Init+0x10a>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	0008fb7f 	.word	0x0008fb7f

080076c8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80076de:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80076e6:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80076ee:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80076f6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8007700:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	3b02      	subs	r3, #2
 8007708:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800770a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8007716:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772a:	d113      	bne.n	8007754 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007734:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	3b01      	subs	r3, #1
 800773c:	051b      	lsls	r3, r3, #20
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	4313      	orrs	r3, r2
 8007742:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007776:	d121      	bne.n	80077bc <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007780:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	4319      	orrs	r1, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	4319      	orrs	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	079b      	lsls	r3, r3, #30
 800779e:	4319      	orrs	r1, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4319      	orrs	r1, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	430b      	orrs	r3, r1
 80077ae:	ea42 0103 	orr.w	r1, r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80077ba:	e005      	b.n	80077c8 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80077c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80077d8:	b084      	sub	sp, #16
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	f107 001c 	add.w	r0, r7, #28
 80077e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80077ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80077f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80077f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 80077f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80077f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 80077fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80077fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 80077fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <SDMMC_Init+0x50>)
 800780c:	4013      	ands	r3, r2
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	b004      	add	sp, #16
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	ffc02c00 	.word	0xffc02c00

0800782c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f043 0203 	orr.w	r2, r3, #3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800785a:	2002      	movs	r0, #2
 800785c:	f7fa f85e 	bl	800191c <HAL_Delay>

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0303 	and.w	r3, r3, #3
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80078ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80078b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <SDMMC_SendCommand+0x50>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	fffee0c0 	.word	0xfffee0c0

080078dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	b2db      	uxtb	r3, r3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3314      	adds	r3, #20
 8007904:	461a      	mov	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	4413      	add	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007942:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007948:	431a      	orrs	r2, r3
                       Data->DPSM);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800794e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007966:	2300      	movs	r3, #0

}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007982:	2310      	movs	r3, #16
 8007984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800798a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ff73 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80079a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a6:	2110      	movs	r1, #16
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9b9 	bl	8007d20 <SDMMC_GetCmdResp1>
 80079ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b0:	69fb      	ldr	r3, [r7, #28]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b08a      	sub	sp, #40	@ 0x28
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80079ca:	2307      	movs	r3, #7
 80079cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079dc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff ff4f 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80079ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ee:	2107      	movs	r1, #7
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f995 	bl	8007d20 <SDMMC_GetCmdResp1>
 80079f6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3728      	adds	r7, #40	@ 0x28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff ff2e 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fbb9 	bl	80081a4 <SDMMC_GetCmdError>
 8007a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a34:	69fb      	ldr	r3, [r7, #28]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a46:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a60:	f107 0308 	add.w	r3, r7, #8
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff0e 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb4b 	bl	8008108 <SDMMC_GetCmdResp7>
 8007a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a74:	69fb      	ldr	r3, [r7, #28]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007a8c:	2337      	movs	r3, #55	@ 0x37
 8007a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff feee 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab0:	2137      	movs	r1, #55	@ 0x37
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f934 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aba:	69fb      	ldr	r3, [r7, #28]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ad2:	2329      	movs	r3, #41	@ 0x29
 8007ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff fecb 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa50 	bl	8007f98 <SDMMC_GetCmdResp3>
 8007af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afa:	69fb      	ldr	r3, [r7, #28]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007b12:	2306      	movs	r3, #6
 8007b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff feab 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b36:	2106      	movs	r1, #6
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f8f1 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b40:	69fb      	ldr	r3, [r7, #28]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b088      	sub	sp, #32
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007b56:	2333      	movs	r3, #51	@ 0x33
 8007b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff fe89 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7a:	2133      	movs	r1, #51	@ 0x33
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f8cf 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b84:	69fb      	ldr	r3, [r7, #28]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe67 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9a2 	bl	8007f04 <SDMMC_GetCmdResp2>
 8007bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007bda:	2309      	movs	r3, #9
 8007bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007bde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bee:	f107 0308 	add.w	r3, r7, #8
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fe47 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f982 	bl	8007f04 <SDMMC_GetCmdResp2>
 8007c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c02:	69fb      	ldr	r3, [r7, #28]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fe27 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	2103      	movs	r1, #3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9ea 	bl	8008018 <SDMMC_GetCmdResp6>
 8007c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c46:	69fb      	ldr	r3, [r7, #28]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c5e:	230d      	movs	r3, #13
 8007c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fe05 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c82:	210d      	movs	r1, #13
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f84b 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007c8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b088      	sub	sp, #32
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007ca2:	230d      	movs	r3, #13
 8007ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007caa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fde3 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc6:	210d      	movs	r1, #13
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f829 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b088      	sub	sp, #32
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007ce6:	230b      	movs	r3, #11
 8007ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cfa:	f107 0308 	add.w	r3, r7, #8
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fdc1 	bl	8007888 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d0a:	210b      	movs	r1, #11
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f807 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d14:	69fb      	ldr	r3, [r7, #28]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d2e:	4b70      	ldr	r3, [pc, #448]	@ (8007ef0 <SDMMC_GetCmdResp1+0x1d0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a70      	ldr	r2, [pc, #448]	@ (8007ef4 <SDMMC_GetCmdResp1+0x1d4>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	0a5a      	lsrs	r2, r3, #9
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d50:	e0c9      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d56:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4b67      	ldr	r3, [pc, #412]	@ (8007ef8 <SDMMC_GetCmdResp1+0x1d8>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ea      	bne.n	8007d42 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d7e:	2304      	movs	r3, #4
 8007d80:	e0b1      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0a6      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a58      	ldr	r2, [pc, #352]	@ (8007efc <SDMMC_GetCmdResp1+0x1dc>)
 8007d9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fd9c 	bl	80078dc <SDMMC_GetCommandResponse>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d001      	beq.n	8007db2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e099      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007db2:	2100      	movs	r1, #0
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff fd9e 	bl	80078f6 <SDMMC_GetResponse>
 8007dba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4b50      	ldr	r3, [pc, #320]	@ (8007f00 <SDMMC_GetCmdResp1+0x1e0>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e08d      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da02      	bge.n	8007dd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dd4:	e087      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007de0:	2340      	movs	r3, #64	@ 0x40
 8007de2:	e080      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007dee:	2380      	movs	r3, #128	@ 0x80
 8007df0:	e079      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e00:	e071      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e10:	e069      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e20:	e061      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e30:	e059      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e40:	e051      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e50:	e049      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e60:	e041      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e70:	e039      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007e80:	e031      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007e90:	e029      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ea0:	e021      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007eac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007eb0:	e019      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ebc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007ec0:	e011      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007ecc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007ed0:	e009      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007edc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007ee0:	e001      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000000 	.word	0x20000000
 8007ef4:	10624dd3 	.word	0x10624dd3
 8007ef8:	00200045 	.word	0x00200045
 8007efc:	002000c5 	.word	0x002000c5
 8007f00:	fdffe008 	.word	0xfdffe008

08007f04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f8c <SDMMC_GetCmdResp2+0x88>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	@ (8007f90 <SDMMC_GetCmdResp2+0x8c>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	0a5b      	lsrs	r3, r3, #9
 8007f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
 8007f20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1e5a      	subs	r2, r3, #1
 8007f26:	60fa      	str	r2, [r7, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f30:	e026      	b.n	8007f80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0ef      	beq.n	8007f22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1ea      	bne.n	8007f22 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f5e:	2304      	movs	r3, #4
 8007f60:	e00e      	b.n	8007f80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e003      	b.n	8007f80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a06      	ldr	r2, [pc, #24]	@ (8007f94 <SDMMC_GetCmdResp2+0x90>)
 8007f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20000000 	.word	0x20000000
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	002000c5 	.word	0x002000c5

08007f98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800800c <SDMMC_GetCmdResp3+0x74>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8008010 <SDMMC_GetCmdResp3+0x78>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	0a5b      	lsrs	r3, r3, #9
 8007fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	1e5a      	subs	r2, r3, #1
 8007fba:	60fa      	str	r2, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fc4:	e01b      	b.n	8007ffe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ef      	beq.n	8007fb6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1ea      	bne.n	8007fb6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2204      	movs	r2, #4
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ff2:	2304      	movs	r3, #4
 8007ff4:	e003      	b.n	8007ffe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a06      	ldr	r2, [pc, #24]	@ (8008014 <SDMMC_GetCmdResp3+0x7c>)
 8007ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000000 	.word	0x20000000
 8008010:	10624dd3 	.word	0x10624dd3
 8008014:	002000c5 	.word	0x002000c5

08008018 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	460b      	mov	r3, r1
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008026:	4b35      	ldr	r3, [pc, #212]	@ (80080fc <SDMMC_GetCmdResp6+0xe4>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a35      	ldr	r2, [pc, #212]	@ (8008100 <SDMMC_GetCmdResp6+0xe8>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	0a5b      	lsrs	r3, r3, #9
 8008032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	61fa      	str	r2, [r7, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d102      	bne.n	800804c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008046:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800804a:	e052      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008050:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0ef      	beq.n	800803c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1ea      	bne.n	800803c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2204      	movs	r2, #4
 8008076:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008078:	2304      	movs	r3, #4
 800807a:	e03a      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800808e:	2301      	movs	r3, #1
 8008090:	e02f      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fc22 	bl	80078dc <SDMMC_GetCommandResponse>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	4293      	cmp	r3, r2
 80080a0:	d001      	beq.n	80080a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e025      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a16      	ldr	r2, [pc, #88]	@ (8008104 <SDMMC_GetCmdResp6+0xec>)
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80080ac:	2100      	movs	r1, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fc21 	bl	80078f6 <SDMMC_GetResponse>
 80080b4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	0c1b      	lsrs	r3, r3, #16
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e011      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80080dc:	e009      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080ec:	e001      	b.n	80080f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80080ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000000 	.word	0x20000000
 8008100:	10624dd3 	.word	0x10624dd3
 8008104:	002000c5 	.word	0x002000c5

08008108 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008110:	4b22      	ldr	r3, [pc, #136]	@ (800819c <SDMMC_GetCmdResp7+0x94>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a22      	ldr	r2, [pc, #136]	@ (80081a0 <SDMMC_GetCmdResp7+0x98>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	0a5b      	lsrs	r3, r3, #9
 800811c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008120:	fb02 f303 	mul.w	r3, r2, r3
 8008124:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1e5a      	subs	r2, r3, #1
 800812a:	60fa      	str	r2, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008130:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008134:	e02c      	b.n	8008190 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800813a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0ef      	beq.n	8008126 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1ea      	bne.n	8008126 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2204      	movs	r2, #4
 8008160:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008162:	2304      	movs	r3, #4
 8008164:	e014      	b.n	8008190 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008178:	2301      	movs	r3, #1
 800817a:	e009      	b.n	8008190 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2240      	movs	r2, #64	@ 0x40
 800818c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800818e:	2300      	movs	r3, #0

}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000000 	.word	0x20000000
 80081a0:	10624dd3 	.word	0x10624dd3

080081a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081ac:	4b11      	ldr	r3, [pc, #68]	@ (80081f4 <SDMMC_GetCmdError+0x50>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a11      	ldr	r2, [pc, #68]	@ (80081f8 <SDMMC_GetCmdError+0x54>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	0a5b      	lsrs	r3, r3, #9
 80081b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
 80081c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	60fa      	str	r2, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081d0:	e009      	b.n	80081e6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f1      	beq.n	80081c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a06      	ldr	r2, [pc, #24]	@ (80081fc <SDMMC_GetCmdError+0x58>)
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000000 	.word	0x20000000
 80081f8:	10624dd3 	.word	0x10624dd3
 80081fc:	002000c5 	.word	0x002000c5

08008200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008200:	b084      	sub	sp, #16
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	f107 001c 	add.w	r0, r7, #28
 800820e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa68 	bl	80086f4 <USB_CoreReset>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008228:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	@ 0x38
 800823c:	e005      	b.n	800824a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008256:	b004      	add	sp, #16
 8008258:	4770      	bx	lr

0800825a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d115      	bne.n	80082ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082aa:	200a      	movs	r0, #10
 80082ac:	f7f9 fb36 	bl	800191c <HAL_Delay>
      ms += 10U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	330a      	adds	r3, #10
 80082b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa0e 	bl	80086d8 <USB_GetMode>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d01e      	beq.n	8008300 <USB_SetCurrentMode+0x84>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80082c6:	d9f0      	bls.n	80082aa <USB_SetCurrentMode+0x2e>
 80082c8:	e01a      	b.n	8008300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d115      	bne.n	80082fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082dc:	200a      	movs	r0, #10
 80082de:	f7f9 fb1d 	bl	800191c <HAL_Delay>
      ms += 10U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	330a      	adds	r3, #10
 80082e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9f5 	bl	80086d8 <USB_GetMode>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <USB_SetCurrentMode+0x84>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80082f8:	d9f0      	bls.n	80082dc <USB_SetCurrentMode+0x60>
 80082fa:	e001      	b.n	8008300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e005      	b.n	800830c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2bc8      	cmp	r3, #200	@ 0xc8
 8008304:	d101      	bne.n	800830a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008314:	b084      	sub	sp, #16
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	e009      	b.n	8008348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3340      	adds	r3, #64	@ 0x40
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	3301      	adds	r3, #1
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b0e      	cmp	r3, #14
 800834c:	d9f2      	bls.n	8008334 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800834e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008352:	2b00      	cmp	r3, #0
 8008354:	d11c      	bne.n	8008390 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008364:	f043 0302 	orr.w	r3, r3, #2
 8008368:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e005      	b.n	800839c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083a2:	461a      	mov	r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083a8:	2103      	movs	r1, #3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f95a 	bl	8008664 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083b0:	2110      	movs	r1, #16
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8f6 	bl	80085a4 <USB_FlushTxFifo>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f920 	bl	8008608 <USB_FlushRxFifo>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d8:	461a      	mov	r2, r3
 80083da:	2300      	movs	r3, #0
 80083dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f0:	461a      	mov	r2, r3
 80083f2:	2300      	movs	r3, #0
 80083f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083f6:	2300      	movs	r3, #0
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	e043      	b.n	8008484 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008412:	d118      	bne.n	8008446 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008426:	461a      	mov	r2, r3
 8008428:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e013      	b.n	8008458 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843c:	461a      	mov	r2, r3
 800843e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	e008      	b.n	8008458 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008476:	461a      	mov	r2, r3
 8008478:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800847c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3301      	adds	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008488:	461a      	mov	r2, r3
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4293      	cmp	r3, r2
 800848e:	d3b5      	bcc.n	80083fc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	e043      	b.n	800851e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084ac:	d118      	bne.n	80084e0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c0:	461a      	mov	r2, r3
 80084c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	e013      	b.n	80084f2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d6:	461a      	mov	r2, r3
 80084d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e008      	b.n	80084f2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ec:	461a      	mov	r2, r3
 80084ee:	2300      	movs	r3, #0
 80084f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	461a      	mov	r2, r3
 8008500:	2300      	movs	r3, #0
 8008502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	461a      	mov	r2, r3
 8008512:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	3301      	adds	r3, #1
 800851c:	613b      	str	r3, [r7, #16]
 800851e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008522:	461a      	mov	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4293      	cmp	r3, r2
 8008528:	d3b5      	bcc.n	8008496 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800853c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800854a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	f043 0210 	orr.w	r2, r3, #16
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	4b10      	ldr	r3, [pc, #64]	@ (80085a0 <USB_DevInit+0x28c>)
 800855e:	4313      	orrs	r3, r2
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008564:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f043 0208 	orr.w	r2, r3, #8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008578:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800857c:	2b01      	cmp	r3, #1
 800857e:	d107      	bne.n	8008590 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008588:	f043 0304 	orr.w	r3, r3, #4
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800859c:	b004      	add	sp, #16
 800859e:	4770      	bx	lr
 80085a0:	803c3800 	.word	0x803c3800

080085a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085be:	d901      	bls.n	80085c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e01b      	b.n	80085fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	daf2      	bge.n	80085b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	019b      	lsls	r3, r3, #6
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e8:	d901      	bls.n	80085ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e006      	b.n	80085fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d0f0      	beq.n	80085dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008620:	d901      	bls.n	8008626 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e018      	b.n	8008658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	daf2      	bge.n	8008614 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2210      	movs	r2, #16
 8008636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008644:	d901      	bls.n	800864a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e006      	b.n	8008658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0310 	and.w	r3, r3, #16
 8008652:	2b10      	cmp	r3, #16
 8008654:	d0f0      	beq.n	8008638 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008684:	4313      	orrs	r3, r2
 8008686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086b0:	f023 0303 	bic.w	r3, r3, #3
 80086b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086c4:	f043 0302 	orr.w	r3, r3, #2
 80086c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0301 	and.w	r3, r3, #1
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800870c:	d901      	bls.n	8008712 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e01b      	b.n	800874a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	daf2      	bge.n	8008700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f043 0201 	orr.w	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008736:	d901      	bls.n	800873c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e006      	b.n	800874a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b01      	cmp	r3, #1
 8008746:	d0f0      	beq.n	800872a <USB_CoreReset+0x36>

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8008768:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800876a:	461a      	mov	r2, r3
        err.type, err.code);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	4807      	ldr	r0, [pc, #28]	@ (8008794 <ai_log_err+0x3c>)
 8008776:	f003 fb4b 	bl	800be10 <iprintf>
 800877a:	e009      	b.n	8008790 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800877c:	793b      	ldrb	r3, [r7, #4]
 800877e:	4619      	mov	r1, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008786:	461a      	mov	r2, r3
 8008788:	4803      	ldr	r0, [pc, #12]	@ (8008798 <ai_log_err+0x40>)
 800878a:	f003 fb41 	bl	800be10 <iprintf>

  do {} while (1);
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <ai_log_err+0x38>
 8008794:	0800cd40 	.word	0x0800cd40
 8008798:	0800cd74 	.word	0x0800cd74

0800879c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_mnist_create_and_init(&mnist, act_addr, NULL);
 80087a4:	2200      	movs	r2, #0
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4828      	ldr	r0, [pc, #160]	@ (800884c <ai_boostrap+0xb0>)
 80087aa:	f000 fb01 	bl	8008db0 <ai_mnist_create_and_init>
 80087ae:	4603      	mov	r3, r0
 80087b0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80087b2:	7b3b      	ldrb	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d006      	beq.n	80087c6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_mnist_create_and_init");
 80087b8:	4925      	ldr	r1, [pc, #148]	@ (8008850 <ai_boostrap+0xb4>)
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff ffcc 	bl	8008758 <ai_log_err>
    return -1;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	e03e      	b.n	8008844 <ai_boostrap+0xa8>
  }

  ai_input = ai_mnist_inputs_get(mnist, NULL);
 80087c6:	4b21      	ldr	r3, [pc, #132]	@ (800884c <ai_boostrap+0xb0>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fb6d 	bl	8008eac <ai_mnist_inputs_get>
 80087d2:	4603      	mov	r3, r0
 80087d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008854 <ai_boostrap+0xb8>)
 80087d6:	6013      	str	r3, [r2, #0]
  ai_output = ai_mnist_outputs_get(mnist, NULL);
 80087d8:	4b1c      	ldr	r3, [pc, #112]	@ (800884c <ai_boostrap+0xb0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb7e 	bl	8008ee0 <ai_mnist_outputs_get>
 80087e4:	4603      	mov	r3, r0
 80087e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008858 <ai_boostrap+0xbc>)
 80087e8:	6013      	str	r3, [r2, #0]

#if defined(AI_MNIST_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MNIST_IN_NUM; idx++) {
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	e00f      	b.n	8008810 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80087f0:	4b18      	ldr	r3, [pc, #96]	@ (8008854 <ai_boostrap+0xb8>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	4916      	ldr	r1, [pc, #88]	@ (800885c <ai_boostrap+0xc0>)
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_IN_NUM; idx++) {
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	ddec      	ble.n	80087f0 <ai_boostrap+0x54>

#if defined(AI_MNIST_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MNIST_OUT_NUM; idx++) {
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	e00f      	b.n	800883c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800881c:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <ai_boostrap+0xbc>)
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	490c      	ldr	r1, [pc, #48]	@ (8008860 <ai_boostrap+0xc4>)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_OUT_NUM; idx++) {
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3301      	adds	r3, #1
 800883a:	613b      	str	r3, [r7, #16]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	ddec      	ble.n	800881c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MNIST_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20001fbc 	.word	0x20001fbc
 8008850:	0800cda4 	.word	0x0800cda4
 8008854:	20001fc0 	.word	0x20001fc0
 8008858:	20001fc4 	.word	0x20001fc4
 800885c:	20001094 	.word	0x20001094
 8008860:	20001098 	.word	0x20001098

08008864 <ai_run>:

static int ai_run(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_mnist_run(mnist, ai_input, ai_output);
 800886a:	4b0f      	ldr	r3, [pc, #60]	@ (80088a8 <ai_run+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0f      	ldr	r2, [pc, #60]	@ (80088ac <ai_run+0x48>)
 8008870:	6811      	ldr	r1, [r2, #0]
 8008872:	4a0f      	ldr	r2, [pc, #60]	@ (80088b0 <ai_run+0x4c>)
 8008874:	6812      	ldr	r2, [r2, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fb88 	bl	8008f8c <ai_mnist_run>
 800887c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d00c      	beq.n	800889e <ai_run+0x3a>
    ai_log_err(ai_mnist_get_error(mnist),
 8008884:	4b08      	ldr	r3, [pc, #32]	@ (80088a8 <ai_run+0x44>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fa6f 	bl	8008d6c <ai_mnist_get_error>
 800888e:	4603      	mov	r3, r0
 8008890:	4908      	ldr	r1, [pc, #32]	@ (80088b4 <ai_run+0x50>)
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff ff60 	bl	8008758 <ai_log_err>
        "ai_mnist_run");
    return -1;
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	e000      	b.n	80088a0 <ai_run+0x3c>
  }

  return 0;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20001fbc 	.word	0x20001fbc
 80088ac:	20001fc0 	.word	0x20001fc0
 80088b0:	20001fc4 	.word	0x20001fc4
 80088b4:	0800cdc0 	.word	0x0800cdc0

080088b8 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8 *data[])
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08e      	sub	sp, #56	@ 0x38
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
    unsigned char tmp[BYTES_IN_FLOATS] = {0};  // Taille des données d'entrée : 5 caractéristiques
 80088c0:	2300      	movs	r3, #0
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	605a      	str	r2, [r3, #4]
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	60da      	str	r2, [r3, #12]
    int num_elements = sizeof(tmp) / sizeof(tmp[0]);
 80088d2:	2314      	movs	r3, #20
 80088d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int num_floats = num_elements / 4;
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da00      	bge.n	80088de <acquire_and_process_data+0x26>
 80088dc:	3303      	adds	r3, #3
 80088de:	109b      	asrs	r3, r3, #2
 80088e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)tmp, sizeof(tmp), TIMEOUT);
 80088e2:	f107 0110 	add.w	r1, r7, #16
 80088e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80088ea:	2214      	movs	r2, #20
 80088ec:	482f      	ldr	r0, [pc, #188]	@ (80089ac <acquire_and_process_data+0xf4>)
 80088ee:	f7fd ff69 	bl	80067c4 <HAL_UART_Receive>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK)
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d007      	beq.n	8008910 <acquire_and_process_data+0x58>
    {
        printf("Failed to receive data from UART. Error code: %d\n", status);
 8008900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008904:	4619      	mov	r1, r3
 8008906:	482a      	ldr	r0, [pc, #168]	@ (80089b0 <acquire_and_process_data+0xf8>)
 8008908:	f003 fa82 	bl	800be10 <iprintf>
        return (1);
 800890c:	2301      	movs	r3, #1
 800890e:	e048      	b.n	80089a2 <acquire_and_process_data+0xea>
    }

    if (num_elements % 4 != 0)
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <acquire_and_process_data+0x6c>
    {
        printf("The array length is not a multiple of 4 bytes. Cannot reconstruct floats.\n");
 800891a:	4826      	ldr	r0, [pc, #152]	@ (80089b4 <acquire_and_process_data+0xfc>)
 800891c:	f003 fae0 	bl	800bee0 <puts>
        return (1);
 8008920:	2301      	movs	r3, #1
 8008922:	e03e      	b.n	80089a2 <acquire_and_process_data+0xea>
    }

    // Reconstruction des floats depuis les bytes reçus
    for (size_t i = 0; i < num_floats; i++)
 8008924:	2300      	movs	r3, #0
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
 8008928:	e036      	b.n	8008998 <acquire_and_process_data+0xe0>
    {
        unsigned char bytes[4] = {0};
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
        for (size_t j = 0; j < 4; j++)
 800892e:	2300      	movs	r3, #0
 8008930:	633b      	str	r3, [r7, #48]	@ 0x30
 8008932:	e010      	b.n	8008956 <acquire_and_process_data+0x9e>
        {
            bytes[j] = tmp[i * 4 + j];
 8008934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008936:	009a      	lsls	r2, r3, #2
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	4413      	add	r3, r2
 800893c:	3338      	adds	r3, #56	@ 0x38
 800893e:	443b      	add	r3, r7
 8008940:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8008944:	f107 020c 	add.w	r2, r7, #12
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	4413      	add	r3, r2
 800894c:	460a      	mov	r2, r1
 800894e:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < 4; j++)
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	3301      	adds	r3, #1
 8008954:	633b      	str	r3, [r7, #48]	@ 0x30
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	2b03      	cmp	r3, #3
 800895a:	d9eb      	bls.n	8008934 <acquire_and_process_data+0x7c>
        }
        ((uint8_t *)data)[(i * 4)] = bytes[0];
 800895c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	7b3a      	ldrb	r2, [r7, #12]
 8008966:	701a      	strb	r2, [r3, #0]
        ((uint8_t *)data)[(i * 4 + 1)] = bytes[1];
 8008968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	3301      	adds	r3, #1
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	7b7a      	ldrb	r2, [r7, #13]
 8008974:	701a      	strb	r2, [r3, #0]
        ((uint8_t *)data)[(i * 4 + 2)] = bytes[2];
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3302      	adds	r3, #2
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
 8008980:	7bba      	ldrb	r2, [r7, #14]
 8008982:	701a      	strb	r2, [r3, #0]
        ((uint8_t *)data)[(i * 4 + 3)] = bytes[3];
 8008984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	3303      	adds	r3, #3
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	7bfa      	ldrb	r2, [r7, #15]
 8008990:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < num_floats; i++)
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008994:	3301      	adds	r3, #1
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800899c:	429a      	cmp	r2, r3
 800899e:	d3c4      	bcc.n	800892a <acquire_and_process_data+0x72>
    }

    return (0);
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3738      	adds	r7, #56	@ 0x38
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000a28 	.word	0x20000a28
 80089b0:	0800cdd0 	.word	0x0800cdd0
 80089b4:	0800ce04 	.word	0x0800ce04

080089b8 <post_process>:


int post_process(ai_i8 *data[])
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b090      	sub	sp, #64	@ 0x40
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
    if (data == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <post_process+0x18>
    {
        printf("The output data is NULL.\n");
 80089c6:	4838      	ldr	r0, [pc, #224]	@ (8008aa8 <post_process+0xf0>)
 80089c8:	f003 fa8a 	bl	800bee0 <puts>
        return (1);
 80089cc:	2301      	movs	r3, #1
 80089ce:	e067      	b.n	8008aa0 <post_process+0xe8>
    }

    uint8_t *output = data;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34
    float outs[CLASS_NUMBER] = {0.0};  // Changer CLASS_NUMBER pour 6
 80089d4:	f107 0318 	add.w	r3, r7, #24
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	611a      	str	r2, [r3, #16]
 80089e4:	615a      	str	r2, [r3, #20]
    uint8_t outs_uint8[CLASS_NUMBER] = {0};
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	2300      	movs	r3, #0
 80089ec:	82bb      	strh	r3, [r7, #20]

    // Convertir la probabilité en float
    for (size_t i = 0; i < CLASS_NUMBER; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f2:	e03a      	b.n	8008a6a <post_process+0xb2>
    {
        uint8_t temp[4] = {0};
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
        // Extraire 4 octets pour reconstruire un float
        for (size_t j = 0; j < 4; j++)
 80089f8:	2300      	movs	r3, #0
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089fc:	e00f      	b.n	8008a1e <post_process+0x66>
        {
            temp[j] = output[i * 4 + j];
 80089fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a00:	009a      	lsls	r2, r3, #2
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	4413      	add	r3, r2
 8008a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a08:	4413      	add	r3, r2
 8008a0a:	7819      	ldrb	r1, [r3, #0]
 8008a0c:	f107 020c 	add.w	r2, r7, #12
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	4413      	add	r3, r2
 8008a14:	460a      	mov	r2, r1
 8008a16:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < 4; j++)
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d9ec      	bls.n	80089fe <post_process+0x46>
        }
        outs[i] = *(float *)&temp;  // Convertir les octets en float
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	3340      	adds	r3, #64	@ 0x40
 8008a30:	443b      	add	r3, r7
 8008a32:	3b28      	subs	r3, #40	@ 0x28
 8008a34:	601a      	str	r2, [r3, #0]
        outs_uint8[i] = (char)(outs[i] * 255);  // Convertir le float en uint8 pour UART
 8008a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	3340      	adds	r3, #64	@ 0x40
 8008a3c:	443b      	add	r3, r7
 8008a3e:	3b28      	subs	r3, #40	@ 0x28
 8008a40:	edd3 7a00 	vldr	s15, [r3]
 8008a44:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008aac <post_process+0xf4>
 8008a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a50:	edc7 7a00 	vstr	s15, [r7]
 8008a54:	783b      	ldrb	r3, [r7, #0]
 8008a56:	b2d9      	uxtb	r1, r3
 8008a58:	f107 0210 	add.w	r2, r7, #16
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5e:	4413      	add	r3, r2
 8008a60:	460a      	mov	r2, r1
 8008a62:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8008a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a66:	3301      	adds	r3, #1
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d9c1      	bls.n	80089f4 <post_process+0x3c>
    }

    // Transmettre les résultats via UART
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)outs_uint8, sizeof(outs_uint8), TIMEOUT);
 8008a70:	f107 0110 	add.w	r1, r7, #16
 8008a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a78:	2206      	movs	r2, #6
 8008a7a:	480d      	ldr	r0, [pc, #52]	@ (8008ab0 <post_process+0xf8>)
 8008a7c:	f7fd fe14 	bl	80066a8 <HAL_UART_Transmit>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status != HAL_OK)
 8008a86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <post_process+0xe6>
    {
        printf("Failed to transmit data to UART. Error code: %d\n", status);
 8008a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a92:	4619      	mov	r1, r3
 8008a94:	4807      	ldr	r0, [pc, #28]	@ (8008ab4 <post_process+0xfc>)
 8008a96:	f003 f9bb 	bl	800be10 <iprintf>
        return (1);
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <post_process+0xe8>
    }

    return 0;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3740      	adds	r7, #64	@ 0x40
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0800ce50 	.word	0x0800ce50
 8008aac:	437f0000 	.word	0x437f0000
 8008ab0:	20000a28 	.word	0x20000a28
 8008ab4:	0800ce6c 	.word	0x0800ce6c

08008ab8 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8008abc:	4803      	ldr	r0, [pc, #12]	@ (8008acc <MX_X_CUBE_AI_Init+0x14>)
 8008abe:	f003 fa0f 	bl	800bee0 <puts>

  ai_boostrap(data_activations0);
 8008ac2:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <MX_X_CUBE_AI_Init+0x18>)
 8008ac4:	f7ff fe6a 	bl	800879c <ai_boostrap>
    /* USER CODE END 5 */
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	0800cea0 	.word	0x0800cea0
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8008ae0:	4816      	ldr	r0, [pc, #88]	@ (8008b3c <MX_X_CUBE_AI_Process+0x68>)
 8008ae2:	f003 f9fd 	bl	800bee0 <puts>

  if (mnist) {
 8008ae6:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <MX_X_CUBE_AI_Process+0x6c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d013      	beq.n	8008b16 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8008aee:	4815      	ldr	r0, [pc, #84]	@ (8008b44 <MX_X_CUBE_AI_Process+0x70>)
 8008af0:	f7ff fee2 	bl	80088b8 <acquire_and_process_data>
 8008af4:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8008afc:	f7ff feb2 	bl	8008864 <ai_run>
 8008b00:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d103      	bne.n	8008b10 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8008b08:	480f      	ldr	r0, [pc, #60]	@ (8008b48 <MX_X_CUBE_AI_Process+0x74>)
 8008b0a:	f7ff ff55 	bl	80089b8 <post_process>
 8008b0e:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0eb      	beq.n	8008aee <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8008b1c:	2311      	movs	r3, #17
 8008b1e:	703b      	strb	r3, [r7, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2210      	movs	r2, #16
 8008b24:	f362 231f 	bfi	r3, r2, #8, #24
 8008b28:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8008b2a:	4908      	ldr	r1, [pc, #32]	@ (8008b4c <MX_X_CUBE_AI_Process+0x78>)
 8008b2c:	6838      	ldr	r0, [r7, #0]
 8008b2e:	f7ff fe13 	bl	8008758 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800cec0 	.word	0x0800cec0
 8008b40:	20001fbc 	.word	0x20001fbc
 8008b44:	20001094 	.word	0x20001094
 8008b48:	20001098 	.word	0x20001098
 8008b4c:	0800cedc 	.word	0x0800cedc

08008b50 <mnist_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_mnist_activations_map, 1, params)) {
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4831      	ldr	r0, [pc, #196]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b60:	f000 faee 	bl	8009140 <ai_platform_get_activations_map>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d051      	beq.n	8008c0e <mnist_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_mnist_activations_map[0] + 248);
 8008b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	33f8      	adds	r3, #248	@ 0xf8
 8008b70:	4a2d      	ldr	r2, [pc, #180]	@ (8008c28 <mnist_configure_activations+0xd8>)
 8008b72:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 248);
 8008b74:	4b2b      	ldr	r3, [pc, #172]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	33f8      	adds	r3, #248	@ 0xf8
 8008b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8008c28 <mnist_configure_activations+0xd8>)
 8008b7c:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_mnist_activations_map[0] + 3384);
 8008b7e:	4b29      	ldr	r3, [pc, #164]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f603 5338 	addw	r3, r3, #3384	@ 0xd38
 8008b86:	4a29      	ldr	r2, [pc, #164]	@ (8008c2c <mnist_configure_activations+0xdc>)
 8008b88:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_mnist_activations_map[0] + 3384);
 8008b8a:	4b26      	ldr	r3, [pc, #152]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f603 5338 	addw	r3, r3, #3384	@ 0xd38
 8008b92:	4a26      	ldr	r2, [pc, #152]	@ (8008c2c <mnist_configure_activations+0xdc>)
 8008b94:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch1_array.data = AI_PTR(g_mnist_activations_map[0] + 3420);
 8008b96:	4b23      	ldr	r3, [pc, #140]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f603 535c 	addw	r3, r3, #3420	@ 0xd5c
 8008b9e:	4a24      	ldr	r2, [pc, #144]	@ (8008c30 <mnist_configure_activations+0xe0>)
 8008ba0:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch1_array.data_start = AI_PTR(g_mnist_activations_map[0] + 3420);
 8008ba2:	4b20      	ldr	r3, [pc, #128]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f603 535c 	addw	r3, r3, #3420	@ 0xd5c
 8008baa:	4a21      	ldr	r2, [pc, #132]	@ (8008c30 <mnist_configure_activations+0xe0>)
 8008bac:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_output_array.data = AI_PTR(g_mnist_activations_map[0] + 0);
 8008bae:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a20      	ldr	r2, [pc, #128]	@ (8008c34 <mnist_configure_activations+0xe4>)
 8008bb4:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 0);
 8008bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1e      	ldr	r2, [pc, #120]	@ (8008c34 <mnist_configure_activations+0xe4>)
 8008bbc:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_mnist_activations_map[0] + 1568);
 8008bbe:	4b19      	ldr	r3, [pc, #100]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8008bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8008c38 <mnist_configure_activations+0xe8>)
 8008bc8:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 1568);
 8008bca:	4b16      	ldr	r3, [pc, #88]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8008bd2:	4a19      	ldr	r2, [pc, #100]	@ (8008c38 <mnist_configure_activations+0xe8>)
 8008bd4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_mnist_activations_map[0] + 0);
 8008bd6:	4b13      	ldr	r3, [pc, #76]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <mnist_configure_activations+0xec>)
 8008bdc:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 0);
 8008bde:	4b11      	ldr	r3, [pc, #68]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <mnist_configure_activations+0xec>)
 8008be4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_mnist_activations_map[0] + 64);
 8008be6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3340      	adds	r3, #64	@ 0x40
 8008bec:	4a14      	ldr	r2, [pc, #80]	@ (8008c40 <mnist_configure_activations+0xf0>)
 8008bee:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 64);
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3340      	adds	r3, #64	@ 0x40
 8008bf6:	4a12      	ldr	r2, [pc, #72]	@ (8008c40 <mnist_configure_activations+0xf0>)
 8008bf8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_mnist_activations_map[0] + 0);
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a11      	ldr	r2, [pc, #68]	@ (8008c44 <mnist_configure_activations+0xf4>)
 8008c00:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_mnist_activations_map[0] + 0);
 8008c02:	4b08      	ldr	r3, [pc, #32]	@ (8008c24 <mnist_configure_activations+0xd4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a0f      	ldr	r2, [pc, #60]	@ (8008c44 <mnist_configure_activations+0xf4>)
 8008c08:	60d3      	str	r3, [r2, #12]
    return true;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e005      	b.n	8008c1a <mnist_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008c0e:	2213      	movs	r2, #19
 8008c10:	2130      	movs	r1, #48	@ 0x30
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb16 	bl	8009244 <ai_platform_network_set_error>
  return false;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001fc8 	.word	0x20001fc8
 8008c28:	20000010 	.word	0x20000010
 8008c2c:	200000d0 	.word	0x200000d0
 8008c30:	200000e0 	.word	0x200000e0
 8008c34:	20000020 	.word	0x20000020
 8008c38:	20000030 	.word	0x20000030
 8008c3c:	20000040 	.word	0x20000040
 8008c40:	20000050 	.word	0x20000050
 8008c44:	20000060 	.word	0x20000060

08008c48 <mnist_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mnist_weights_map, 1, params)) {
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	2101      	movs	r1, #1
 8008c56:	483e      	ldr	r0, [pc, #248]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008c58:	f000 fa1e 	bl	8009098 <ai_platform_get_weights_map>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d06c      	beq.n	8008d3c <mnist_configure_weights+0xf4>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8008c62:	4b3c      	ldr	r3, [pc, #240]	@ (8008d54 <mnist_configure_weights+0x10c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8008d54 <mnist_configure_weights+0x10c>)
 8008c6c:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_mnist_weights_map[0] + 0);
 8008c6e:	4b38      	ldr	r3, [pc, #224]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a38      	ldr	r2, [pc, #224]	@ (8008d54 <mnist_configure_weights+0x10c>)
 8008c74:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_mnist_weights_map[0] + 0);
 8008c76:	4b36      	ldr	r3, [pc, #216]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a36      	ldr	r2, [pc, #216]	@ (8008d54 <mnist_configure_weights+0x10c>)
 8008c7c:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8008c7e:	4b36      	ldr	r3, [pc, #216]	@ (8008d58 <mnist_configure_weights+0x110>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c86:	4a34      	ldr	r2, [pc, #208]	@ (8008d58 <mnist_configure_weights+0x110>)
 8008c88:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_mnist_weights_map[0] + 72);
 8008c8a:	4b31      	ldr	r3, [pc, #196]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3348      	adds	r3, #72	@ 0x48
 8008c90:	4a31      	ldr	r2, [pc, #196]	@ (8008d58 <mnist_configure_weights+0x110>)
 8008c92:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_mnist_weights_map[0] + 72);
 8008c94:	4b2e      	ldr	r3, [pc, #184]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3348      	adds	r3, #72	@ 0x48
 8008c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8008d58 <mnist_configure_weights+0x110>)
 8008c9c:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d5c <mnist_configure_weights+0x114>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8008d5c <mnist_configure_weights+0x114>)
 8008ca8:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_mnist_weights_map[0] + 1104);
 8008caa:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 8008cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d5c <mnist_configure_weights+0x114>)
 8008cb4:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_mnist_weights_map[0] + 80);
 8008cb6:	4b26      	ldr	r3, [pc, #152]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3350      	adds	r3, #80	@ 0x50
 8008cbc:	4a27      	ldr	r2, [pc, #156]	@ (8008d5c <mnist_configure_weights+0x114>)
 8008cbe:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008cc0:	4b27      	ldr	r3, [pc, #156]	@ (8008d60 <mnist_configure_weights+0x118>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cc8:	4a25      	ldr	r2, [pc, #148]	@ (8008d60 <mnist_configure_weights+0x118>)
 8008cca:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_mnist_weights_map[0] + 7376);
 8008ccc:	4b20      	ldr	r3, [pc, #128]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	4a22      	ldr	r2, [pc, #136]	@ (8008d60 <mnist_configure_weights+0x118>)
 8008cd8:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_mnist_weights_map[0] + 7376);
 8008cda:	4b1d      	ldr	r3, [pc, #116]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8008d60 <mnist_configure_weights+0x118>)
 8008ce6:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d64 <mnist_configure_weights+0x11c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8008d64 <mnist_configure_weights+0x11c>)
 8008cf2:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_mnist_weights_map[0] + 7440);
 8008cf4:	4b16      	ldr	r3, [pc, #88]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4a19      	ldr	r2, [pc, #100]	@ (8008d64 <mnist_configure_weights+0x11c>)
 8008d00:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_mnist_weights_map[0] + 7440);
 8008d02:	4b13      	ldr	r3, [pc, #76]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8008d0a:	3310      	adds	r3, #16
 8008d0c:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <mnist_configure_weights+0x11c>)
 8008d0e:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008d10:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <mnist_configure_weights+0x120>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d18:	4a13      	ldr	r2, [pc, #76]	@ (8008d68 <mnist_configure_weights+0x120>)
 8008d1a:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_mnist_weights_map[0] + 8080);
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8008d24:	3310      	adds	r3, #16
 8008d26:	4a10      	ldr	r2, [pc, #64]	@ (8008d68 <mnist_configure_weights+0x120>)
 8008d28:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_mnist_weights_map[0] + 8080);
 8008d2a:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <mnist_configure_weights+0x108>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8008d32:	3310      	adds	r3, #16
 8008d34:	4a0c      	ldr	r2, [pc, #48]	@ (8008d68 <mnist_configure_weights+0x120>)
 8008d36:	60d3      	str	r3, [r2, #12]
    return true;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e005      	b.n	8008d48 <mnist_configure_weights+0x100>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008d3c:	2212      	movs	r2, #18
 8008d3e:	2130      	movs	r1, #48	@ 0x30
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa7f 	bl	8009244 <ai_platform_network_set_error>
  return false;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001fcc 	.word	0x20001fcc
 8008d54:	20000070 	.word	0x20000070
 8008d58:	20000080 	.word	0x20000080
 8008d5c:	20000090 	.word	0x20000090
 8008d60:	200000a0 	.word	0x200000a0
 8008d64:	200000b0 	.word	0x200000b0
 8008d68:	200000c0 	.word	0x200000c0

08008d6c <ai_mnist_get_error>:
}


AI_API_ENTRY
ai_error ai_mnist_get_error(ai_handle network)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa59 	bl	800922c <ai_platform_network_get_error>
 8008d7a:	4603      	mov	r3, r0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <ai_mnist_create>:


AI_API_ENTRY
ai_error ai_mnist_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2305      	movs	r3, #5
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2301      	movs	r3, #1
 8008d98:	4a04      	ldr	r2, [pc, #16]	@ (8008dac <ai_mnist_create+0x28>)
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fb41 	bl	8009424 <ai_platform_network_create>
 8008da2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	2000072c 	.word	0x2000072c

08008db0 <ai_mnist_create_and_init>:


AI_API_ENTRY
ai_error ai_mnist_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b094      	sub	sp, #80	@ 0x50
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_mnist_create(network, AI_MNIST_DATA_CONFIG);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff ffe0 	bl	8008d84 <ai_mnist_create>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8008dc8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <ai_mnist_create_and_init+0x24>
    return err;
 8008dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd2:	e067      	b.n	8008ea4 <ai_mnist_create_and_init+0xf4>
  }
  
  if (ai_mnist_data_params_get(&params) != true) {
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f8e7 	bl	8008fac <ai_mnist_data_params_get>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f083 0301 	eor.w	r3, r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d008      	beq.n	8008dfc <ai_mnist_create_and_init+0x4c>
    err = ai_mnist_get_error(*network);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff ffbc 	bl	8008d6c <ai_mnist_get_error>
 8008df4:	4603      	mov	r3, r0
 8008df6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8008df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfa:	e053      	b.n	8008ea4 <ai_mnist_create_and_init+0xf4>
  }
#if defined(AI_MNIST_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e02:	e012      	b.n	8008e2a <ai_mnist_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008e04:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8008e08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	330c      	adds	r3, #12
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f92c 	bl	8009078 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8008e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <ai_mnist_create_and_init+0x8a>
 8008e30:	8bfb      	ldrh	r3, [r7, #30]
 8008e32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d3e4      	bcc.n	8008e04 <ai_mnist_create_and_init+0x54>
  }
#endif
#if defined(AI_MNIST_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008e40:	e012      	b.n	8008e68 <ai_mnist_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008e42:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8008e46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4413      	add	r3, r2
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	f107 0310 	add.w	r3, r7, #16
 8008e56:	3304      	adds	r3, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f90d 	bl	8009078 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8008e5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008e62:	3301      	adds	r3, #1
 8008e64:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <ai_mnist_create_and_init+0xc8>
 8008e6e:	8afb      	ldrh	r3, [r7, #22]
 8008e70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d3e4      	bcc.n	8008e42 <ai_mnist_create_and_init+0x92>
  }
#endif
  if (ai_mnist_init(*network, &params) != true) {
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f107 0210 	add.w	r2, r7, #16
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f846 	bl	8008f14 <ai_mnist_init>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f083 0301 	eor.w	r3, r3, #1
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <ai_mnist_create_and_init+0xf2>
    err = ai_mnist_get_error(*network);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff ff67 	bl	8008d6c <ai_mnist_get_error>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8008ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3750      	adds	r7, #80	@ 0x50
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <ai_mnist_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d104      	bne.n	8008ec6 <ai_mnist_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008ebc:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <ai_mnist_inputs_get+0x2c>)
 8008ebe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a06      	ldr	r2, [pc, #24]	@ (8008edc <ai_mnist_inputs_get+0x30>)
 8008ec4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9c1 	bl	8009250 <ai_platform_inputs_get>
 8008ece:	4603      	mov	r3, r0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	2000072c 	.word	0x2000072c
 8008edc:	a1c00100 	.word	0xa1c00100

08008ee0 <ai_mnist_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <ai_mnist_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008ef0:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <ai_mnist_outputs_get+0x2c>)
 8008ef2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a06      	ldr	r2, [pc, #24]	@ (8008f10 <ai_mnist_outputs_get+0x30>)
 8008ef8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa1d 	bl	800933c <ai_platform_outputs_get>
 8008f02:	4603      	mov	r3, r0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	2000072c 	.word	0x2000072c
 8008f10:	a1c00100 	.word	0xa1c00100

08008f14 <ai_mnist_init>:


AI_API_ENTRY
ai_bool ai_mnist_init(
  ai_handle network, const ai_network_params* params)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fac1 	bl	80094a8 <ai_platform_network_init>
 8008f26:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <ai_mnist_init+0x22>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e026      	b.n	8008f84 <ai_mnist_init+0x70>
  ok &= mnist_configure_weights(net_ctx, params);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff fe85 	bl	8008c48 <mnist_configure_weights>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bf14      	ite	ne
 8008f4a:	2301      	movne	r3, #1
 8008f4c:	2300      	moveq	r3, #0
 8008f4e:	72fb      	strb	r3, [r7, #11]
  ok &= mnist_configure_activations(net_ctx, params);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff fdfc 	bl	8008b50 <mnist_configure_activations>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	bf14      	ite	ne
 8008f64:	2301      	movne	r3, #1
 8008f66:	2300      	moveq	r3, #0
 8008f68:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fb6a 	bl	8009644 <ai_platform_network_post_init>
 8008f70:	4603      	mov	r3, r0
 8008f72:	461a      	mov	r2, r3
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bf14      	ite	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008f82:	7afb      	ldrb	r3, [r7, #11]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <ai_mnist_run>:


AI_API_ENTRY
ai_i32 ai_mnist_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb81 	bl	80096a4 <ai_platform_network_process>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <ai_mnist_data_params_get>:
 * @ingroup mnist_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mnist_data_params_get(ai_network_params* params)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <ai_mnist_data_params_get+0x12>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e016      	b.n	8008fec <ai_mnist_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008ff4 <ai_mnist_data_params_get+0x48>)
 8008fc0:	f107 0310 	add.w	r3, r7, #16
 8008fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fc8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_DATA_ACTIVATIONS_COUNT, g_mnist_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff8 <ai_mnist_data_params_get+0x4c>)
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fd6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_DATA_WEIGHTS_COUNT, g_mnist_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008fda:	f107 0210 	add.w	r2, r7, #16
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8ff 	bl	80091e8 <ai_platform_bind_network_params>
 8008fea:	4603      	mov	r3, r0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	0800cf38 	.word	0x0800cf38
 8008ff8:	0800cf40 	.word	0x0800cf40

08008ffc <ai_buffer_get_size>:
 8008ffc:	b378      	cbz	r0, 800905e <ai_buffer_get_size+0x62>
 8008ffe:	b410      	push	{r4}
 8009000:	6803      	ldr	r3, [r0, #0]
 8009002:	4a17      	ldr	r2, [pc, #92]	@ (8009060 <ai_buffer_get_size+0x64>)
 8009004:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009008:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800900c:	4293      	cmp	r3, r2
 800900e:	d01e      	beq.n	800904e <ai_buffer_get_size+0x52>
 8009010:	6984      	ldr	r4, [r0, #24]
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	7d03      	ldrb	r3, [r0, #20]
 8009016:	6941      	ldr	r1, [r0, #20]
 8009018:	f1a3 0301 	sub.w	r3, r3, #1
 800901c:	fab3 f383 	clz	r3, r3
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009026:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800902a:	da0b      	bge.n	8009044 <ai_buffer_get_size+0x48>
 800902c:	2b01      	cmp	r3, #1
 800902e:	d102      	bne.n	8009036 <ai_buffer_get_size+0x3a>
 8009030:	2802      	cmp	r0, #2
 8009032:	d007      	beq.n	8009044 <ai_buffer_get_size+0x48>
 8009034:	2302      	movs	r3, #2
 8009036:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800903a:	3301      	adds	r3, #1
 800903c:	4298      	cmp	r0, r3
 800903e:	fb01 f202 	mul.w	r2, r1, r2
 8009042:	d1f3      	bne.n	800902c <ai_buffer_get_size+0x30>
 8009044:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	2900      	cmp	r1, #0
 8009050:	d0de      	beq.n	8009010 <ai_buffer_get_size+0x14>
 8009052:	6984      	ldr	r4, [r0, #24]
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	321f      	adds	r2, #31
 8009058:	f022 021f 	bic.w	r2, r2, #31
 800905c:	e7da      	b.n	8009014 <ai_buffer_get_size+0x18>
 800905e:	4770      	bx	lr
 8009060:	000400c0 	.word	0x000400c0

08009064 <ai_buffer_array_sane>:
 8009064:	b138      	cbz	r0, 8009076 <ai_buffer_array_sane+0x12>
 8009066:	6843      	ldr	r3, [r0, #4]
 8009068:	b123      	cbz	r3, 8009074 <ai_buffer_array_sane+0x10>
 800906a:	8840      	ldrh	r0, [r0, #2]
 800906c:	3800      	subs	r0, #0
 800906e:	bf18      	it	ne
 8009070:	2001      	movne	r0, #1
 8009072:	4770      	bx	lr
 8009074:	4618      	mov	r0, r3
 8009076:	4770      	bx	lr

08009078 <ai_buffer_array_item_set_address>:
 8009078:	b150      	cbz	r0, 8009090 <ai_buffer_array_item_set_address+0x18>
 800907a:	6843      	ldr	r3, [r0, #4]
 800907c:	b14b      	cbz	r3, 8009092 <ai_buffer_array_item_set_address+0x1a>
 800907e:	8840      	ldrh	r0, [r0, #2]
 8009080:	b900      	cbnz	r0, 8009084 <ai_buffer_array_item_set_address+0xc>
 8009082:	4770      	bx	lr
 8009084:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009088:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800908c:	2001      	movs	r0, #1
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	4770      	bx	lr
 8009092:	4618      	mov	r0, r3
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop

08009098 <ai_platform_get_weights_map>:
 8009098:	2a00      	cmp	r2, #0
 800909a:	d037      	beq.n	800910c <ai_platform_get_weights_map+0x74>
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	b1a0      	cbz	r0, 80090cc <ai_platform_get_weights_map+0x34>
 80090a2:	460f      	mov	r7, r1
 80090a4:	b191      	cbz	r1, 80090cc <ai_platform_get_weights_map+0x34>
 80090a6:	4b25      	ldr	r3, [pc, #148]	@ (800913c <ai_platform_get_weights_map+0xa4>)
 80090a8:	6810      	ldr	r0, [r2, #0]
 80090aa:	4298      	cmp	r0, r3
 80090ac:	4615      	mov	r5, r2
 80090ae:	d00f      	beq.n	80090d0 <ai_platform_get_weights_map+0x38>
 80090b0:	6855      	ldr	r5, [r2, #4]
 80090b2:	b15d      	cbz	r5, 80090cc <ai_platform_get_weights_map+0x34>
 80090b4:	682e      	ldr	r6, [r5, #0]
 80090b6:	429e      	cmp	r6, r3
 80090b8:	d02a      	beq.n	8009110 <ai_platform_get_weights_map+0x78>
 80090ba:	f1a1 0001 	sub.w	r0, r1, #1
 80090be:	6025      	str	r5, [r4, #0]
 80090c0:	fab0 f080 	clz	r0, r0
 80090c4:	0940      	lsrs	r0, r0, #5
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	42a7      	cmp	r7, r4
 80090ca:	d034      	beq.n	8009136 <ai_platform_get_weights_map+0x9e>
 80090cc:	2000      	movs	r0, #0
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d0:	1d10      	adds	r0, r2, #4
 80090d2:	f7ff ffc7 	bl	8009064 <ai_buffer_array_sane>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0f8      	beq.n	80090cc <ai_platform_get_weights_map+0x34>
 80090da:	88eb      	ldrh	r3, [r5, #6]
 80090dc:	429f      	cmp	r7, r3
 80090de:	d1f5      	bne.n	80090cc <ai_platform_get_weights_map+0x34>
 80090e0:	f04f 0c00 	mov.w	ip, #0
 80090e4:	1f20      	subs	r0, r4, #4
 80090e6:	46e6      	mov	lr, ip
 80090e8:	68ab      	ldr	r3, [r5, #8]
 80090ea:	4463      	add	r3, ip
 80090ec:	f10c 0c1c 	add.w	ip, ip, #28
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b12b      	cbz	r3, 8009100 <ai_platform_get_weights_map+0x68>
 80090f4:	f10e 0e01 	add.w	lr, lr, #1
 80090f8:	4577      	cmp	r7, lr
 80090fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80090fe:	d1f3      	bne.n	80090e8 <ai_platform_get_weights_map+0x50>
 8009100:	eba7 000e 	sub.w	r0, r7, lr
 8009104:	fab0 f080 	clz	r0, r0
 8009108:	0940      	lsrs	r0, r0, #5
 800910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800910c:	2000      	movs	r0, #0
 800910e:	4770      	bx	lr
 8009110:	1f20      	subs	r0, r4, #4
 8009112:	462a      	mov	r2, r5
 8009114:	2400      	movs	r4, #0
 8009116:	e000      	b.n	800911a <ai_platform_get_weights_map+0x82>
 8009118:	461c      	mov	r4, r3
 800911a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800911e:	42b3      	cmp	r3, r6
 8009120:	d0d2      	beq.n	80090c8 <ai_platform_get_weights_map+0x30>
 8009122:	f840 3f04 	str.w	r3, [r0, #4]!
 8009126:	1c63      	adds	r3, r4, #1
 8009128:	429f      	cmp	r7, r3
 800912a:	d1f5      	bne.n	8009118 <ai_platform_get_weights_map+0x80>
 800912c:	3402      	adds	r4, #2
 800912e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009132:	42b3      	cmp	r3, r6
 8009134:	d1ca      	bne.n	80090cc <ai_platform_get_weights_map+0x34>
 8009136:	2001      	movs	r0, #1
 8009138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913a:	bf00      	nop
 800913c:	a1facade 	.word	0xa1facade

08009140 <ai_platform_get_activations_map>:
 8009140:	2a00      	cmp	r2, #0
 8009142:	d038      	beq.n	80091b6 <ai_platform_get_activations_map+0x76>
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	b1a0      	cbz	r0, 8009174 <ai_platform_get_activations_map+0x34>
 800914a:	460f      	mov	r7, r1
 800914c:	b191      	cbz	r1, 8009174 <ai_platform_get_activations_map+0x34>
 800914e:	4b25      	ldr	r3, [pc, #148]	@ (80091e4 <ai_platform_get_activations_map+0xa4>)
 8009150:	6810      	ldr	r0, [r2, #0]
 8009152:	4298      	cmp	r0, r3
 8009154:	4615      	mov	r5, r2
 8009156:	d00f      	beq.n	8009178 <ai_platform_get_activations_map+0x38>
 8009158:	6a15      	ldr	r5, [r2, #32]
 800915a:	b15d      	cbz	r5, 8009174 <ai_platform_get_activations_map+0x34>
 800915c:	682e      	ldr	r6, [r5, #0]
 800915e:	429e      	cmp	r6, r3
 8009160:	d02b      	beq.n	80091ba <ai_platform_get_activations_map+0x7a>
 8009162:	f1a1 0001 	sub.w	r0, r1, #1
 8009166:	6025      	str	r5, [r4, #0]
 8009168:	fab0 f080 	clz	r0, r0
 800916c:	0940      	lsrs	r0, r0, #5
 800916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009170:	42a7      	cmp	r7, r4
 8009172:	d035      	beq.n	80091e0 <ai_platform_get_activations_map+0xa0>
 8009174:	2000      	movs	r0, #0
 8009176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009178:	f102 000c 	add.w	r0, r2, #12
 800917c:	f7ff ff72 	bl	8009064 <ai_buffer_array_sane>
 8009180:	2800      	cmp	r0, #0
 8009182:	d0f7      	beq.n	8009174 <ai_platform_get_activations_map+0x34>
 8009184:	89eb      	ldrh	r3, [r5, #14]
 8009186:	429f      	cmp	r7, r3
 8009188:	d1f4      	bne.n	8009174 <ai_platform_get_activations_map+0x34>
 800918a:	f04f 0c00 	mov.w	ip, #0
 800918e:	1f20      	subs	r0, r4, #4
 8009190:	46e6      	mov	lr, ip
 8009192:	692b      	ldr	r3, [r5, #16]
 8009194:	4463      	add	r3, ip
 8009196:	f10c 0c1c 	add.w	ip, ip, #28
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	b12b      	cbz	r3, 80091aa <ai_platform_get_activations_map+0x6a>
 800919e:	f10e 0e01 	add.w	lr, lr, #1
 80091a2:	4577      	cmp	r7, lr
 80091a4:	f840 3f04 	str.w	r3, [r0, #4]!
 80091a8:	d1f3      	bne.n	8009192 <ai_platform_get_activations_map+0x52>
 80091aa:	eba7 000e 	sub.w	r0, r7, lr
 80091ae:	fab0 f080 	clz	r0, r0
 80091b2:	0940      	lsrs	r0, r0, #5
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b6:	2000      	movs	r0, #0
 80091b8:	4770      	bx	lr
 80091ba:	1f20      	subs	r0, r4, #4
 80091bc:	462a      	mov	r2, r5
 80091be:	2400      	movs	r4, #0
 80091c0:	e000      	b.n	80091c4 <ai_platform_get_activations_map+0x84>
 80091c2:	461c      	mov	r4, r3
 80091c4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	d0d1      	beq.n	8009170 <ai_platform_get_activations_map+0x30>
 80091cc:	f840 3f04 	str.w	r3, [r0, #4]!
 80091d0:	1c63      	adds	r3, r4, #1
 80091d2:	429f      	cmp	r7, r3
 80091d4:	d1f5      	bne.n	80091c2 <ai_platform_get_activations_map+0x82>
 80091d6:	3402      	adds	r4, #2
 80091d8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80091dc:	42b3      	cmp	r3, r6
 80091de:	d1c9      	bne.n	8009174 <ai_platform_get_activations_map+0x34>
 80091e0:	2001      	movs	r0, #1
 80091e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e4:	a1facade 	.word	0xa1facade

080091e8 <ai_platform_bind_network_params>:
 80091e8:	b1a0      	cbz	r0, 8009214 <ai_platform_bind_network_params+0x2c>
 80091ea:	b1b1      	cbz	r1, 800921a <ai_platform_bind_network_params+0x32>
 80091ec:	b1c2      	cbz	r2, 8009220 <ai_platform_bind_network_params+0x38>
 80091ee:	b410      	push	{r4}
 80091f0:	4603      	mov	r3, r0
 80091f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009228 <ai_platform_bind_network_params+0x40>)
 80091f4:	f843 4b04 	str.w	r4, [r3], #4
 80091f8:	f100 0c0c 	add.w	ip, r0, #12
 80091fc:	c903      	ldmia	r1, {r0, r1}
 80091fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8009202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009206:	e88c 0003 	stmia.w	ip, {r0, r1}
 800920a:	2301      	movs	r3, #1
 800920c:	4618      	mov	r0, r3
 800920e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	4603      	mov	r3, r0
 8009216:	4618      	mov	r0, r3
 8009218:	4770      	bx	lr
 800921a:	460b      	mov	r3, r1
 800921c:	4618      	mov	r0, r3
 800921e:	4770      	bx	lr
 8009220:	4613      	mov	r3, r2
 8009222:	4618      	mov	r0, r3
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	a1facade 	.word	0xa1facade

0800922c <ai_platform_network_get_error>:
 800922c:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <ai_platform_network_get_error+0x14>)
 800922e:	6802      	ldr	r2, [r0, #0]
 8009230:	4393      	bics	r3, r2
 8009232:	d102      	bne.n	800923a <ai_platform_network_get_error+0xe>
 8009234:	300c      	adds	r0, #12
 8009236:	f000 bc77 	b.w	8009b28 <core_get_error>
 800923a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800923e:	4770      	bx	lr
 8009240:	a1c00100 	.word	0xa1c00100

08009244 <ai_platform_network_set_error>:
 8009244:	b110      	cbz	r0, 800924c <ai_platform_network_set_error+0x8>
 8009246:	300c      	adds	r0, #12
 8009248:	f000 bc74 	b.w	8009b34 <core_set_error>
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop

08009250 <ai_platform_inputs_get>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4b38      	ldr	r3, [pc, #224]	@ (8009338 <ai_platform_inputs_get+0xe8>)
 8009256:	6802      	ldr	r2, [r0, #0]
 8009258:	b085      	sub	sp, #20
 800925a:	4393      	bics	r3, r2
 800925c:	9003      	str	r0, [sp, #12]
 800925e:	9102      	str	r1, [sp, #8]
 8009260:	d160      	bne.n	8009324 <ai_platform_inputs_get+0xd4>
 8009262:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009264:	2b00      	cmp	r3, #0
 8009266:	d04f      	beq.n	8009308 <ai_platform_inputs_get+0xb8>
 8009268:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800926c:	f1ba 0f00 	cmp.w	sl, #0
 8009270:	d04a      	beq.n	8009308 <ai_platform_inputs_get+0xb8>
 8009272:	f04f 0b00 	mov.w	fp, #0
 8009276:	465d      	mov	r5, fp
 8009278:	e016      	b.n	80092a8 <ai_platform_inputs_get+0x58>
 800927a:	9901      	ldr	r1, [sp, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	507a      	str	r2, [r7, r1]
 8009280:	69b1      	ldr	r1, [r6, #24]
 8009282:	684e      	ldr	r6, [r1, #4]
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	f04f 0201 	mov.w	r2, #1
 800928a:	7522      	strb	r2, [r4, #20]
 800928c:	6961      	ldr	r1, [r4, #20]
 800928e:	6020      	str	r0, [r4, #0]
 8009290:	f369 211f 	bfi	r1, r9, #8, #24
 8009294:	2300      	movs	r3, #0
 8009296:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800929a:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800929e:	f8c4 c004 	str.w	ip, [r4, #4]
 80092a2:	3501      	adds	r5, #1
 80092a4:	f10b 0b1c 	add.w	fp, fp, #28
 80092a8:	f8ba 3000 	ldrh.w	r3, [sl]
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	b2aa      	uxth	r2, r5
 80092b0:	d93c      	bls.n	800932c <ai_platform_inputs_get+0xdc>
 80092b2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80092b6:	00e9      	lsls	r1, r5, #3
 80092b8:	9101      	str	r1, [sp, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d036      	beq.n	800932c <ai_platform_inputs_get+0xdc>
 80092be:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80092c2:	2e00      	cmp	r6, #0
 80092c4:	d032      	beq.n	800932c <ai_platform_inputs_get+0xdc>
 80092c6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80092ca:	69b2      	ldr	r2, [r6, #24]
 80092cc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80092d0:	6810      	ldr	r0, [r2, #0]
 80092d2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80092d6:	68b3      	ldr	r3, [r6, #8]
 80092d8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80092dc:	f002 fb60 	bl	800b9a0 <ai_array_to_buffer_fmt>
 80092e0:	69b1      	ldr	r1, [r6, #24]
 80092e2:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80092e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80092ea:	445c      	add	r4, fp
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0c8      	beq.n	8009282 <ai_platform_inputs_get+0x32>
 80092f0:	2100      	movs	r1, #0
 80092f2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80092f6:	6831      	ldr	r1, [r6, #0]
 80092f8:	6059      	str	r1, [r3, #4]
 80092fa:	b111      	cbz	r1, 8009302 <ai_platform_inputs_get+0xb2>
 80092fc:	8849      	ldrh	r1, [r1, #2]
 80092fe:	2900      	cmp	r1, #0
 8009300:	d1bb      	bne.n	800927a <ai_platform_inputs_get+0x2a>
 8009302:	69b1      	ldr	r1, [r6, #24]
 8009304:	2300      	movs	r3, #0
 8009306:	e7bc      	b.n	8009282 <ai_platform_inputs_get+0x32>
 8009308:	9803      	ldr	r0, [sp, #12]
 800930a:	2218      	movs	r2, #24
 800930c:	2111      	movs	r1, #17
 800930e:	300c      	adds	r0, #12
 8009310:	f000 fc10 	bl	8009b34 <core_set_error>
 8009314:	2200      	movs	r2, #0
 8009316:	4610      	mov	r0, r2
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	b103      	cbz	r3, 800931e <ai_platform_inputs_get+0xce>
 800931c:	801a      	strh	r2, [r3, #0]
 800931e:	b005      	add	sp, #20
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	2000      	movs	r0, #0
 8009326:	b005      	add	sp, #20
 8009328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932c:	2a00      	cmp	r2, #0
 800932e:	d0eb      	beq.n	8009308 <ai_platform_inputs_get+0xb8>
 8009330:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009334:	6858      	ldr	r0, [r3, #4]
 8009336:	e7ef      	b.n	8009318 <ai_platform_inputs_get+0xc8>
 8009338:	a1c00100 	.word	0xa1c00100

0800933c <ai_platform_outputs_get>:
 800933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009340:	4b37      	ldr	r3, [pc, #220]	@ (8009420 <ai_platform_outputs_get+0xe4>)
 8009342:	6802      	ldr	r2, [r0, #0]
 8009344:	b085      	sub	sp, #20
 8009346:	4393      	bics	r3, r2
 8009348:	9003      	str	r0, [sp, #12]
 800934a:	9102      	str	r1, [sp, #8]
 800934c:	d15d      	bne.n	800940a <ai_platform_outputs_get+0xce>
 800934e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009350:	2b01      	cmp	r3, #1
 8009352:	d94c      	bls.n	80093ee <ai_platform_outputs_get+0xb2>
 8009354:	f04f 0b00 	mov.w	fp, #0
 8009358:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800935c:	465d      	mov	r5, fp
 800935e:	46d8      	mov	r8, fp
 8009360:	e016      	b.n	8009390 <ai_platform_outputs_get+0x54>
 8009362:	9a01      	ldr	r2, [sp, #4]
 8009364:	2101      	movs	r1, #1
 8009366:	50b9      	str	r1, [r7, r2]
 8009368:	69b2      	ldr	r2, [r6, #24]
 800936a:	6856      	ldr	r6, [r2, #4]
 800936c:	6020      	str	r0, [r4, #0]
 800936e:	f04f 0201 	mov.w	r2, #1
 8009372:	7522      	strb	r2, [r4, #20]
 8009374:	6960      	ldr	r0, [r4, #20]
 8009376:	f8c4 c004 	str.w	ip, [r4, #4]
 800937a:	f369 201f 	bfi	r0, r9, #8, #24
 800937e:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8009382:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8009386:	9b00      	ldr	r3, [sp, #0]
 8009388:	61a3      	str	r3, [r4, #24]
 800938a:	3501      	adds	r5, #1
 800938c:	f10b 0b1c 	add.w	fp, fp, #28
 8009390:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009394:	42ab      	cmp	r3, r5
 8009396:	b2aa      	uxth	r2, r5
 8009398:	d93b      	bls.n	8009412 <ai_platform_outputs_get+0xd6>
 800939a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800939e:	00e9      	lsls	r1, r5, #3
 80093a0:	9101      	str	r1, [sp, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d035      	beq.n	8009412 <ai_platform_outputs_get+0xd6>
 80093a6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	d031      	beq.n	8009412 <ai_platform_outputs_get+0xd6>
 80093ae:	f8da 3014 	ldr.w	r3, [sl, #20]
 80093b2:	69b2      	ldr	r2, [r6, #24]
 80093b4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80093b8:	68b3      	ldr	r3, [r6, #8]
 80093ba:	6810      	ldr	r0, [r2, #0]
 80093bc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80093c0:	68f3      	ldr	r3, [r6, #12]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	f002 faec 	bl	800b9a0 <ai_array_to_buffer_fmt>
 80093c8:	69b2      	ldr	r2, [r6, #24]
 80093ca:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80093ce:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80093d2:	445c      	add	r4, fp
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0c8      	beq.n	800936a <ai_platform_outputs_get+0x2e>
 80093d8:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 80093dc:	6832      	ldr	r2, [r6, #0]
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	b112      	cbz	r2, 80093e8 <ai_platform_outputs_get+0xac>
 80093e2:	8852      	ldrh	r2, [r2, #2]
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	d1bc      	bne.n	8009362 <ai_platform_outputs_get+0x26>
 80093e8:	69b2      	ldr	r2, [r6, #24]
 80093ea:	2300      	movs	r3, #0
 80093ec:	e7bd      	b.n	800936a <ai_platform_outputs_get+0x2e>
 80093ee:	9803      	ldr	r0, [sp, #12]
 80093f0:	2218      	movs	r2, #24
 80093f2:	2111      	movs	r1, #17
 80093f4:	300c      	adds	r0, #12
 80093f6:	f000 fb9d 	bl	8009b34 <core_set_error>
 80093fa:	2200      	movs	r2, #0
 80093fc:	4610      	mov	r0, r2
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	b103      	cbz	r3, 8009404 <ai_platform_outputs_get+0xc8>
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	b005      	add	sp, #20
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	2000      	movs	r0, #0
 800940c:	b005      	add	sp, #20
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	2a00      	cmp	r2, #0
 8009414:	d0eb      	beq.n	80093ee <ai_platform_outputs_get+0xb2>
 8009416:	f8da 3014 	ldr.w	r3, [sl, #20]
 800941a:	6858      	ldr	r0, [r3, #4]
 800941c:	e7ef      	b.n	80093fe <ai_platform_outputs_get+0xc2>
 800941e:	bf00      	nop
 8009420:	a1c00100 	.word	0xa1c00100

08009424 <ai_platform_network_create>:
 8009424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009428:	b083      	sub	sp, #12
 800942a:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800942e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8009432:	b320      	cbz	r0, 800947e <ai_platform_network_create+0x5a>
 8009434:	6002      	str	r2, [r0, #0]
 8009436:	4616      	mov	r6, r2
 8009438:	461f      	mov	r7, r3
 800943a:	4604      	mov	r4, r0
 800943c:	f000 fb72 	bl	8009b24 <core_init>
 8009440:	b970      	cbnz	r0, 8009460 <ai_platform_network_create+0x3c>
 8009442:	2530      	movs	r5, #48	@ 0x30
 8009444:	2300      	movs	r3, #0
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	2410      	movs	r4, #16
 800944a:	4642      	mov	r2, r8
 800944c:	4649      	mov	r1, r9
 800944e:	4638      	mov	r0, r7
 8009450:	f002 fb50 	bl	800baf4 <ai_version_get>
 8009454:	60b0      	str	r0, [r6, #8]
 8009456:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800945a:	b003      	add	sp, #12
 800945c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009460:	2200      	movs	r2, #0
 8009462:	4649      	mov	r1, r9
 8009464:	4638      	mov	r0, r7
 8009466:	f002 fb45 	bl	800baf4 <ai_version_get>
 800946a:	2200      	movs	r2, #0
 800946c:	4605      	mov	r5, r0
 800946e:	2105      	movs	r1, #5
 8009470:	2001      	movs	r0, #1
 8009472:	f002 fb3f 	bl	800baf4 <ai_version_get>
 8009476:	4285      	cmp	r5, r0
 8009478:	d008      	beq.n	800948c <ai_platform_network_create+0x68>
 800947a:	2501      	movs	r5, #1
 800947c:	e7e2      	b.n	8009444 <ai_platform_network_create+0x20>
 800947e:	2510      	movs	r5, #16
 8009480:	462c      	mov	r4, r5
 8009482:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8009486:	b003      	add	sp, #12
 8009488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <ai_platform_network_create+0x80>)
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	a801      	add	r0, sp, #4
 8009492:	f000 fb5b 	bl	8009b4c <ai_check_custom_types>
 8009496:	b110      	cbz	r0, 800949e <ai_platform_network_create+0x7a>
 8009498:	2400      	movs	r4, #0
 800949a:	4625      	mov	r5, r4
 800949c:	e7d5      	b.n	800944a <ai_platform_network_create+0x26>
 800949e:	2502      	movs	r5, #2
 80094a0:	e7d0      	b.n	8009444 <ai_platform_network_create+0x20>
 80094a2:	bf00      	nop
 80094a4:	84048403 	.word	0x84048403

080094a8 <ai_platform_network_init>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	4b63      	ldr	r3, [pc, #396]	@ (800963c <ai_platform_network_init+0x194>)
 80094ae:	6802      	ldr	r2, [r0, #0]
 80094b0:	4393      	bics	r3, r2
 80094b2:	b083      	sub	sp, #12
 80094b4:	d156      	bne.n	8009564 <ai_platform_network_init+0xbc>
 80094b6:	4604      	mov	r4, r0
 80094b8:	460f      	mov	r7, r1
 80094ba:	2900      	cmp	r1, #0
 80094bc:	f000 80a9 	beq.w	8009612 <ai_platform_network_init+0x16a>
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	495f      	ldr	r1, [pc, #380]	@ (8009640 <ai_platform_network_init+0x198>)
 80094c4:	428b      	cmp	r3, r1
 80094c6:	d113      	bne.n	80094f0 <ai_platform_network_init+0x48>
 80094c8:	495c      	ldr	r1, [pc, #368]	@ (800963c <ai_platform_network_init+0x194>)
 80094ca:	89bd      	ldrh	r5, [r7, #12]
 80094cc:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80094d0:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80094d4:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80094d8:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80094dc:	68be      	ldr	r6, [r7, #8]
 80094de:	428a      	cmp	r2, r1
 80094e0:	d02c      	beq.n	800953c <ai_platform_network_init+0x94>
 80094e2:	2303      	movs	r3, #3
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	4627      	mov	r7, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	b003      	add	sp, #12
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	2101      	movs	r1, #1
 80094f2:	4638      	mov	r0, r7
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80094fa:	f7ff fd7f 	bl	8008ffc <ai_buffer_get_size>
 80094fe:	f107 081c 	add.w	r8, r7, #28
 8009502:	4605      	mov	r5, r0
 8009504:	2101      	movs	r1, #1
 8009506:	4640      	mov	r0, r8
 8009508:	463e      	mov	r6, r7
 800950a:	6a3f      	ldr	r7, [r7, #32]
 800950c:	f7ff fd76 	bl	8008ffc <ai_buffer_get_size>
 8009510:	2d00      	cmp	r5, #0
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	bf0a      	itet	eq
 8009516:	46a9      	moveq	r9, r5
 8009518:	f04f 0901 	movne.w	r9, #1
 800951c:	462e      	moveq	r6, r5
 800951e:	b330      	cbz	r0, 800956e <ai_platform_network_init+0xc6>
 8009520:	2f00      	cmp	r7, #0
 8009522:	f000 8084 	beq.w	800962e <ai_platform_network_init+0x186>
 8009526:	f04f 0a01 	mov.w	sl, #1
 800952a:	f1bb 0f00 	cmp.w	fp, #0
 800952e:	d021      	beq.n	8009574 <ai_platform_network_init+0xcc>
 8009530:	2500      	movs	r5, #0
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	4941      	ldr	r1, [pc, #260]	@ (800963c <ai_platform_network_init+0x194>)
 8009536:	428a      	cmp	r2, r1
 8009538:	46ab      	mov	fp, r5
 800953a:	d1d2      	bne.n	80094e2 <ai_platform_network_init+0x3a>
 800953c:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800953e:	454a      	cmp	r2, r9
 8009540:	4a3f      	ldr	r2, [pc, #252]	@ (8009640 <ai_platform_network_init+0x198>)
 8009542:	d221      	bcs.n	8009588 <ai_platform_network_init+0xe0>
 8009544:	4293      	cmp	r3, r2
 8009546:	d15c      	bne.n	8009602 <ai_platform_network_init+0x15a>
 8009548:	6266      	str	r6, [r4, #36]	@ 0x24
 800954a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800954e:	f8a4 b020 	strh.w	fp, [r4, #32]
 8009552:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8009556:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800955a:	8525      	strh	r5, [r4, #40]	@ 0x28
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fb1f 	bl	8009ba0 <ai_layers_init_all>
 8009562:	e7be      	b.n	80094e2 <ai_platform_network_init+0x3a>
 8009564:	2700      	movs	r7, #0
 8009566:	4638      	mov	r0, r7
 8009568:	b003      	add	sp, #12
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	4680      	mov	r8, r0
 8009570:	4682      	mov	sl, r0
 8009572:	e7da      	b.n	800952a <ai_platform_network_init+0x82>
 8009574:	2d00      	cmp	r5, #0
 8009576:	d0dc      	beq.n	8009532 <ai_platform_network_init+0x8a>
 8009578:	2212      	movs	r2, #18
 800957a:	2110      	movs	r1, #16
 800957c:	f104 000c 	add.w	r0, r4, #12
 8009580:	f000 fad8 	bl	8009b34 <core_set_error>
 8009584:	465f      	mov	r7, fp
 8009586:	e7af      	b.n	80094e8 <ai_platform_network_init+0x40>
 8009588:	4293      	cmp	r3, r2
 800958a:	d0dd      	beq.n	8009548 <ai_platform_network_init+0xa0>
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	d018      	beq.n	80095c4 <ai_platform_network_init+0x11c>
 8009592:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	f8cd 9004 	str.w	r9, [sp, #4]
 800959c:	2700      	movs	r7, #0
 800959e:	4699      	mov	r9, r3
 80095a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80095a2:	eb06 0e07 	add.w	lr, r6, r7
 80095a6:	eb03 0c07 	add.w	ip, r3, r7
 80095aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095b2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80095b6:	371c      	adds	r7, #28
 80095b8:	45b9      	cmp	r9, r7
 80095ba:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80095be:	d1ef      	bne.n	80095a0 <ai_platform_network_init+0xf8>
 80095c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80095c6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80095ca:	4553      	cmp	r3, sl
 80095cc:	f8a4 b020 	strh.w	fp, [r4, #32]
 80095d0:	d325      	bcc.n	800961e <ai_platform_network_init+0x176>
 80095d2:	f1ba 0f00 	cmp.w	sl, #0
 80095d6:	d0be      	beq.n	8009556 <ai_platform_network_init+0xae>
 80095d8:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80095dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80095e0:	f04f 0c00 	mov.w	ip, #0
 80095e4:	eb08 070c 	add.w	r7, r8, ip
 80095e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80095ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095ec:	4466      	add	r6, ip
 80095ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80095f0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80095f4:	f10c 0c1c 	add.w	ip, ip, #28
 80095f8:	45f4      	cmp	ip, lr
 80095fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80095fe:	d1f1      	bne.n	80095e4 <ai_platform_network_init+0x13c>
 8009600:	e7a9      	b.n	8009556 <ai_platform_network_init+0xae>
 8009602:	2212      	movs	r2, #18
 8009604:	2116      	movs	r1, #22
 8009606:	f104 000c 	add.w	r0, r4, #12
 800960a:	f000 fa93 	bl	8009b34 <core_set_error>
 800960e:	2700      	movs	r7, #0
 8009610:	e76a      	b.n	80094e8 <ai_platform_network_init+0x40>
 8009612:	2211      	movs	r2, #17
 8009614:	2110      	movs	r1, #16
 8009616:	300c      	adds	r0, #12
 8009618:	f000 fa8c 	bl	8009b34 <core_set_error>
 800961c:	e764      	b.n	80094e8 <ai_platform_network_init+0x40>
 800961e:	2213      	movs	r2, #19
 8009620:	2116      	movs	r1, #22
 8009622:	f104 000c 	add.w	r0, r4, #12
 8009626:	f000 fa85 	bl	8009b34 <core_set_error>
 800962a:	2700      	movs	r7, #0
 800962c:	e75c      	b.n	80094e8 <ai_platform_network_init+0x40>
 800962e:	2213      	movs	r2, #19
 8009630:	2110      	movs	r1, #16
 8009632:	f104 000c 	add.w	r0, r4, #12
 8009636:	f000 fa7d 	bl	8009b34 <core_set_error>
 800963a:	e755      	b.n	80094e8 <ai_platform_network_init+0x40>
 800963c:	a1c00100 	.word	0xa1c00100
 8009640:	a1facade 	.word	0xa1facade

08009644 <ai_platform_network_post_init>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4b16      	ldr	r3, [pc, #88]	@ (80096a0 <ai_platform_network_post_init+0x5c>)
 8009648:	6802      	ldr	r2, [r0, #0]
 800964a:	ea02 0103 	and.w	r1, r2, r3
 800964e:	4393      	bics	r3, r2
 8009650:	d108      	bne.n	8009664 <ai_platform_network_post_init+0x20>
 8009652:	6903      	ldr	r3, [r0, #16]
 8009654:	f013 0502 	ands.w	r5, r3, #2
 8009658:	4604      	mov	r4, r0
 800965a:	d005      	beq.n	8009668 <ai_platform_network_post_init+0x24>
 800965c:	428a      	cmp	r2, r1
 800965e:	d00a      	beq.n	8009676 <ai_platform_network_post_init+0x32>
 8009660:	2001      	movs	r0, #1
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	2000      	movs	r0, #0
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	2210      	movs	r2, #16
 800966a:	2111      	movs	r1, #17
 800966c:	300c      	adds	r0, #12
 800966e:	f000 fa61 	bl	8009b34 <core_set_error>
 8009672:	4628      	mov	r0, r5
 8009674:	bd38      	pop	{r3, r4, r5, pc}
 8009676:	f000 faa1 	bl	8009bbc <ai_layers_post_init_all>
 800967a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0ef      	beq.n	8009660 <ai_platform_network_post_init+0x1c>
 8009680:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8009682:	e008      	b.n	8009696 <ai_platform_network_post_init+0x52>
 8009684:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8009688:	4798      	blx	r3
 800968a:	692b      	ldr	r3, [r5, #16]
 800968c:	42ab      	cmp	r3, r5
 800968e:	d0e7      	beq.n	8009660 <ai_platform_network_post_init+0x1c>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0e5      	beq.n	8009660 <ai_platform_network_post_init+0x1c>
 8009694:	461d      	mov	r5, r3
 8009696:	4629      	mov	r1, r5
 8009698:	2000      	movs	r0, #0
 800969a:	2d00      	cmp	r5, #0
 800969c:	d1f2      	bne.n	8009684 <ai_platform_network_post_init+0x40>
 800969e:	e7df      	b.n	8009660 <ai_platform_network_post_init+0x1c>
 80096a0:	a1c00100 	.word	0xa1c00100

080096a4 <ai_platform_network_process>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	4bb5      	ldr	r3, [pc, #724]	@ (8009980 <ai_platform_network_process+0x2dc>)
 80096aa:	4605      	mov	r5, r0
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	b085      	sub	sp, #20
 80096b0:	4383      	bics	r3, r0
 80096b2:	9202      	str	r2, [sp, #8]
 80096b4:	f040 8140 	bne.w	8009938 <ai_platform_network_process+0x294>
 80096b8:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 8125 	beq.w	800990a <ai_platform_network_process+0x266>
 80096c0:	692b      	ldr	r3, [r5, #16]
 80096c2:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2700      	movs	r7, #0
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	61af      	str	r7, [r5, #24]
 80096d0:	f040 8137 	bne.w	8009942 <ai_platform_network_process+0x29e>
 80096d4:	2900      	cmp	r1, #0
 80096d6:	f000 811e 	beq.w	8009916 <ai_platform_network_process+0x272>
 80096da:	f1ba 0f00 	cmp.w	sl, #0
 80096de:	f000 811a 	beq.w	8009916 <ai_platform_network_process+0x272>
 80096e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8115 	beq.w	8009916 <ai_platform_network_process+0x272>
 80096ec:	698b      	ldr	r3, [r1, #24]
 80096ee:	9503      	str	r5, [sp, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	460e      	mov	r6, r1
 80096f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d072      	beq.n	80097e4 <ai_platform_network_process+0x140>
 80096fe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009702:	2c00      	cmp	r4, #0
 8009704:	d06e      	beq.n	80097e4 <ai_platform_network_process+0x140>
 8009706:	f8da 3008 	ldr.w	r3, [sl, #8]
 800970a:	f8d3 9000 	ldr.w	r9, [r3]
 800970e:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8009712:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009716:	f000 81d3 	beq.w	8009ac0 <ai_platform_network_process+0x41c>
 800971a:	69a3      	ldr	r3, [r4, #24]
 800971c:	2101      	movs	r1, #1
 800971e:	4630      	mov	r0, r6
 8009720:	685d      	ldr	r5, [r3, #4]
 8009722:	f7ff fc6b 	bl	8008ffc <ai_buffer_get_size>
 8009726:	4285      	cmp	r5, r0
 8009728:	f0c0 8116 	bcc.w	8009958 <ai_platform_network_process+0x2b4>
 800972c:	68e0      	ldr	r0, [r4, #12]
 800972e:	69b1      	ldr	r1, [r6, #24]
 8009730:	68c2      	ldr	r2, [r0, #12]
 8009732:	68cb      	ldr	r3, [r1, #12]
 8009734:	429a      	cmp	r2, r3
 8009736:	f040 810f 	bne.w	8009958 <ai_platform_network_process+0x2b4>
 800973a:	6882      	ldr	r2, [r0, #8]
 800973c:	688b      	ldr	r3, [r1, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	f040 810a 	bne.w	8009958 <ai_platform_network_process+0x2b4>
 8009744:	6842      	ldr	r2, [r0, #4]
 8009746:	684b      	ldr	r3, [r1, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	f040 8105 	bne.w	8009958 <ai_platform_network_process+0x2b4>
 800974e:	69a3      	ldr	r3, [r4, #24]
 8009750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009754:	f002 f9bc 	bl	800bad0 <ai_array_get_data_byte_size>
 8009758:	4605      	mov	r5, r0
 800975a:	4620      	mov	r0, r4
 800975c:	f002 f9d0 	bl	800bb00 <get_tensor_byte_size>
 8009760:	4285      	cmp	r5, r0
 8009762:	f0c0 80f9 	bcc.w	8009958 <ai_platform_network_process+0x2b4>
 8009766:	69a3      	ldr	r3, [r4, #24]
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f002 f919 	bl	800b9a0 <ai_array_to_buffer_fmt>
 800976e:	6833      	ldr	r3, [r6, #0]
 8009770:	4058      	eors	r0, r3
 8009772:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8009776:	f040 81a5 	bne.w	8009ac4 <ai_platform_network_process+0x420>
 800977a:	6873      	ldr	r3, [r6, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 819f 	beq.w	8009ac0 <ai_platform_network_process+0x41c>
 8009782:	69b3      	ldr	r3, [r6, #24]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 81a5 	beq.w	8009ad6 <ai_platform_network_process+0x432>
 800978c:	9a01      	ldr	r2, [sp, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	bf38      	it	cc
 8009792:	461a      	movcc	r2, r3
 8009794:	4620      	mov	r0, r4
 8009796:	9201      	str	r2, [sp, #4]
 8009798:	f002 f9b2 	bl	800bb00 <get_tensor_byte_size>
 800979c:	f8c8 0008 	str.w	r0, [r8, #8]
 80097a0:	69b3      	ldr	r3, [r6, #24]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	fb00 f303 	mul.w	r3, r0, r3
 80097a8:	f8c8 300c 	str.w	r3, [r8, #12]
 80097ac:	6871      	ldr	r1, [r6, #4]
 80097ae:	f8c8 1004 	str.w	r1, [r8, #4]
 80097b2:	440b      	add	r3, r1
 80097b4:	f849 300b 	str.w	r3, [r9, fp]
 80097b8:	69a0      	ldr	r0, [r4, #24]
 80097ba:	6803      	ldr	r3, [r0, #0]
 80097bc:	009a      	lsls	r2, r3, #2
 80097be:	f107 0701 	add.w	r7, r7, #1
 80097c2:	f106 061c 	add.w	r6, r6, #28
 80097c6:	f100 80b1 	bmi.w	800992c <ai_platform_network_process+0x288>
 80097ca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	4419      	add	r1, r3
 80097d2:	6081      	str	r1, [r0, #8]
 80097d4:	69a3      	ldr	r3, [r4, #24]
 80097d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80097da:	60da      	str	r2, [r3, #12]
 80097dc:	f8ba 3000 	ldrh.w	r3, [sl]
 80097e0:	42bb      	cmp	r3, r7
 80097e2:	d888      	bhi.n	80096f6 <ai_platform_network_process+0x52>
 80097e4:	9d03      	ldr	r5, [sp, #12]
 80097e6:	9b02      	ldr	r3, [sp, #8]
 80097e8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 817c 	beq.w	8009ae8 <ai_platform_network_process+0x444>
 80097f0:	2a01      	cmp	r2, #1
 80097f2:	f240 80bd 	bls.w	8009970 <ai_platform_network_process+0x2cc>
 80097f6:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80097fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 80b6 	beq.w	8009970 <ai_platform_network_process+0x2cc>
 8009804:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009808:	2700      	movs	r7, #0
 800980a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80bd 	beq.w	800998e <ai_platform_network_process+0x2ea>
 8009814:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8009818:	2e00      	cmp	r6, #0
 800981a:	f000 80b8 	beq.w	800998e <ai_platform_network_process+0x2ea>
 800981e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009822:	681c      	ldr	r4, [r3, #0]
 8009824:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8009828:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800982c:	f000 8160 	beq.w	8009af0 <ai_platform_network_process+0x44c>
 8009830:	69b3      	ldr	r3, [r6, #24]
 8009832:	2101      	movs	r1, #1
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	4658      	mov	r0, fp
 800983a:	f7ff fbdf 	bl	8008ffc <ai_buffer_get_size>
 800983e:	9b02      	ldr	r3, [sp, #8]
 8009840:	4283      	cmp	r3, r0
 8009842:	f0c0 8095 	bcc.w	8009970 <ai_platform_network_process+0x2cc>
 8009846:	68f0      	ldr	r0, [r6, #12]
 8009848:	f8db 1018 	ldr.w	r1, [fp, #24]
 800984c:	68c2      	ldr	r2, [r0, #12]
 800984e:	68cb      	ldr	r3, [r1, #12]
 8009850:	429a      	cmp	r2, r3
 8009852:	f040 808d 	bne.w	8009970 <ai_platform_network_process+0x2cc>
 8009856:	6882      	ldr	r2, [r0, #8]
 8009858:	688b      	ldr	r3, [r1, #8]
 800985a:	429a      	cmp	r2, r3
 800985c:	f040 8088 	bne.w	8009970 <ai_platform_network_process+0x2cc>
 8009860:	6842      	ldr	r2, [r0, #4]
 8009862:	684b      	ldr	r3, [r1, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	f040 8083 	bne.w	8009970 <ai_platform_network_process+0x2cc>
 800986a:	69b3      	ldr	r3, [r6, #24]
 800986c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009870:	f002 f92e 	bl	800bad0 <ai_array_get_data_byte_size>
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	4630      	mov	r0, r6
 8009878:	f002 f942 	bl	800bb00 <get_tensor_byte_size>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	4283      	cmp	r3, r0
 8009880:	d376      	bcc.n	8009970 <ai_platform_network_process+0x2cc>
 8009882:	69b3      	ldr	r3, [r6, #24]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	f002 f88b 	bl	800b9a0 <ai_array_to_buffer_fmt>
 800988a:	f8db 3000 	ldr.w	r3, [fp]
 800988e:	4058      	eors	r0, r3
 8009890:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8009894:	f040 8134 	bne.w	8009b00 <ai_platform_network_process+0x45c>
 8009898:	f8db 3004 	ldr.w	r3, [fp, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8127 	beq.w	8009af0 <ai_platform_network_process+0x44c>
 80098a2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8133 	beq.w	8009b14 <ai_platform_network_process+0x470>
 80098ae:	9a01      	ldr	r2, [sp, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	bf38      	it	cc
 80098b4:	461a      	movcc	r2, r3
 80098b6:	4630      	mov	r0, r6
 80098b8:	9201      	str	r2, [sp, #4]
 80098ba:	f002 f921 	bl	800bb00 <get_tensor_byte_size>
 80098be:	f8c9 0008 	str.w	r0, [r9, #8]
 80098c2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	fb00 f303 	mul.w	r3, r0, r3
 80098cc:	f8c9 300c 	str.w	r3, [r9, #12]
 80098d0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80098d4:	f8c9 1004 	str.w	r1, [r9, #4]
 80098d8:	440b      	add	r3, r1
 80098da:	f844 300a 	str.w	r3, [r4, sl]
 80098de:	69b0      	ldr	r0, [r6, #24]
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	f107 0701 	add.w	r7, r7, #1
 80098e8:	f10b 0b1c 	add.w	fp, fp, #28
 80098ec:	d44a      	bmi.n	8009984 <ai_platform_network_process+0x2e0>
 80098ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	4419      	add	r1, r3
 80098f6:	6081      	str	r1, [r0, #8]
 80098f8:	69b3      	ldr	r3, [r6, #24]
 80098fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80098fe:	60da      	str	r2, [r3, #12]
 8009900:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009904:	42bb      	cmp	r3, r7
 8009906:	d880      	bhi.n	800980a <ai_platform_network_process+0x166>
 8009908:	e041      	b.n	800998e <ai_platform_network_process+0x2ea>
 800990a:	692a      	ldr	r2, [r5, #16]
 800990c:	61ab      	str	r3, [r5, #24]
 800990e:	f002 0203 	and.w	r2, r2, #3
 8009912:	2a03      	cmp	r2, #3
 8009914:	d115      	bne.n	8009942 <ai_platform_network_process+0x29e>
 8009916:	2217      	movs	r2, #23
 8009918:	2112      	movs	r1, #18
 800991a:	f105 000c 	add.w	r0, r5, #12
 800991e:	f000 f909 	bl	8009b34 <core_set_error>
 8009922:	2400      	movs	r4, #0
 8009924:	4620      	mov	r0, r4
 8009926:	b005      	add	sp, #20
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	f8ba 3000 	ldrh.w	r3, [sl]
 8009930:	429f      	cmp	r7, r3
 8009932:	f4ff aee0 	bcc.w	80096f6 <ai_platform_network_process+0x52>
 8009936:	e755      	b.n	80097e4 <ai_platform_network_process+0x140>
 8009938:	2400      	movs	r4, #0
 800993a:	4620      	mov	r0, r4
 800993c:	b005      	add	sp, #20
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009942:	2230      	movs	r2, #48	@ 0x30
 8009944:	2111      	movs	r1, #17
 8009946:	f105 000c 	add.w	r0, r5, #12
 800994a:	f000 f8f3 	bl	8009b34 <core_set_error>
 800994e:	2400      	movs	r4, #0
 8009950:	4620      	mov	r0, r4
 8009952:	b005      	add	sp, #20
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	9d03      	ldr	r5, [sp, #12]
 800995a:	2218      	movs	r2, #24
 800995c:	2112      	movs	r1, #18
 800995e:	f105 000c 	add.w	r0, r5, #12
 8009962:	f000 f8e7 	bl	8009b34 <core_set_error>
 8009966:	2400      	movs	r4, #0
 8009968:	4620      	mov	r0, r4
 800996a:	b005      	add	sp, #20
 800996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	2218      	movs	r2, #24
 8009972:	2113      	movs	r1, #19
 8009974:	f105 000c 	add.w	r0, r5, #12
 8009978:	f000 f8dc 	bl	8009b34 <core_set_error>
 800997c:	2400      	movs	r4, #0
 800997e:	e7d1      	b.n	8009924 <ai_platform_network_process+0x280>
 8009980:	a1c00100 	.word	0xa1c00100
 8009984:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009988:	429f      	cmp	r7, r3
 800998a:	f4ff af3e 	bcc.w	800980a <ai_platform_network_process+0x166>
 800998e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009992:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8009994:	832b      	strh	r3, [r5, #24]
 8009996:	2a00      	cmp	r2, #0
 8009998:	f040 808c 	bne.w	8009ab4 <ai_platform_network_process+0x410>
 800999c:	4616      	mov	r6, r2
 800999e:	4617      	mov	r7, r2
 80099a0:	8b6c      	ldrh	r4, [r5, #26]
 80099a2:	429c      	cmp	r4, r3
 80099a4:	bf38      	it	cc
 80099a6:	46ab      	movcc	fp, r5
 80099a8:	d2bc      	bcs.n	8009924 <ai_platform_network_process+0x280>
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d030      	beq.n	8009a10 <ai_platform_network_process+0x36c>
 80099ae:	f04f 0800 	mov.w	r8, #0
 80099b2:	e014      	b.n	80099de <ai_platform_network_process+0x33a>
 80099b4:	6882      	ldr	r2, [r0, #8]
 80099b6:	68c5      	ldr	r5, [r0, #12]
 80099b8:	6863      	ldr	r3, [r4, #4]
 80099ba:	1b52      	subs	r2, r2, r5
 80099bc:	4413      	add	r3, r2
 80099be:	6083      	str	r3, [r0, #8]
 80099c0:	698b      	ldr	r3, [r1, #24]
 80099c2:	6862      	ldr	r2, [r4, #4]
 80099c4:	60da      	str	r2, [r3, #12]
 80099c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80099ca:	f859 200a 	ldr.w	r2, [r9, sl]
 80099ce:	440b      	add	r3, r1
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bf24      	itt	cs
 80099d4:	68e3      	ldrcs	r3, [r4, #12]
 80099d6:	1ad3      	subcs	r3, r2, r3
 80099d8:	6063      	str	r3, [r4, #4]
 80099da:	f108 0801 	add.w	r8, r8, #1
 80099de:	8833      	ldrh	r3, [r6, #0]
 80099e0:	4543      	cmp	r3, r8
 80099e2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80099e6:	d913      	bls.n	8009a10 <ai_platform_network_process+0x36c>
 80099e8:	6873      	ldr	r3, [r6, #4]
 80099ea:	b18b      	cbz	r3, 8009a10 <ai_platform_network_process+0x36c>
 80099ec:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80099f0:	b171      	cbz	r1, 8009a10 <ai_platform_network_process+0x36c>
 80099f2:	6988      	ldr	r0, [r1, #24]
 80099f4:	68b2      	ldr	r2, [r6, #8]
 80099f6:	6803      	ldr	r3, [r0, #0]
 80099f8:	f8d2 9000 	ldr.w	r9, [r2]
 80099fc:	009d      	lsls	r5, r3, #2
 80099fe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009a02:	d5d7      	bpl.n	80099b4 <ai_platform_network_process+0x310>
 8009a04:	6881      	ldr	r1, [r0, #8]
 8009a06:	68a2      	ldr	r2, [r4, #8]
 8009a08:	6860      	ldr	r0, [r4, #4]
 8009a0a:	f001 ff27 	bl	800b85c <st_int8_copy>
 8009a0e:	e7da      	b.n	80099c6 <ai_platform_network_process+0x322>
 8009a10:	4658      	mov	r0, fp
 8009a12:	f000 f8e7 	bl	8009be4 <ai_layers_forward_all>
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	d03d      	beq.n	8009a96 <ai_platform_network_process+0x3f2>
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	e016      	b.n	8009a4c <ai_platform_network_process+0x3a8>
 8009a1e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009a22:	f859 100a 	ldr.w	r1, [r9, sl]
 8009a26:	4413      	add	r3, r2
 8009a28:	428b      	cmp	r3, r1
 8009a2a:	bf24      	itt	cs
 8009a2c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009a30:	1acb      	subcs	r3, r1, r3
 8009a32:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a36:	6981      	ldr	r1, [r0, #24]
 8009a38:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009a3c:	1b52      	subs	r2, r2, r5
 8009a3e:	4413      	add	r3, r2
 8009a40:	608b      	str	r3, [r1, #8]
 8009a42:	6983      	ldr	r3, [r0, #24]
 8009a44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	3401      	adds	r4, #1
 8009a4c:	883b      	ldrh	r3, [r7, #0]
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	d921      	bls.n	8009a96 <ai_platform_network_process+0x3f2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	b1fb      	cbz	r3, 8009a96 <ai_platform_network_process+0x3f2>
 8009a56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009a5a:	b1e0      	cbz	r0, 8009a96 <ai_platform_network_process+0x3f2>
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	6983      	ldr	r3, [r0, #24]
 8009a60:	f8d2 9000 	ldr.w	r9, [r2]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	0092      	lsls	r2, r2, #2
 8009a68:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009a6c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009a70:	d5d5      	bpl.n	8009a1e <ai_platform_network_process+0x37a>
 8009a72:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8009a76:	6898      	ldr	r0, [r3, #8]
 8009a78:	f001 fef0 	bl	800b85c <st_int8_copy>
 8009a7c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009a80:	f859 200a 	ldr.w	r2, [r9, sl]
 8009a84:	440b      	add	r3, r1
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf24      	itt	cs
 8009a8a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009a8e:	1ad3      	subcs	r3, r2, r3
 8009a90:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a94:	e7d9      	b.n	8009a4a <ai_platform_network_process+0x3a6>
 8009a96:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8009a9a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8009a9e:	3401      	adds	r4, #1
 8009aa0:	b2a4      	uxth	r4, r4
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	f8ab 401a 	strh.w	r4, [fp, #26]
 8009aa8:	f63f af7f 	bhi.w	80099aa <ai_platform_network_process+0x306>
 8009aac:	4620      	mov	r0, r4
 8009aae:	b005      	add	sp, #20
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	2a01      	cmp	r2, #1
 8009ab6:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8009ab8:	d02a      	beq.n	8009b10 <ai_platform_network_process+0x46c>
 8009aba:	f106 070c 	add.w	r7, r6, #12
 8009abe:	e76f      	b.n	80099a0 <ai_platform_network_process+0x2fc>
 8009ac0:	9d03      	ldr	r5, [sp, #12]
 8009ac2:	e728      	b.n	8009916 <ai_platform_network_process+0x272>
 8009ac4:	9d03      	ldr	r5, [sp, #12]
 8009ac6:	2219      	movs	r2, #25
 8009ac8:	2112      	movs	r1, #18
 8009aca:	f105 000c 	add.w	r0, r5, #12
 8009ace:	f000 f831 	bl	8009b34 <core_set_error>
 8009ad2:	2400      	movs	r4, #0
 8009ad4:	e726      	b.n	8009924 <ai_platform_network_process+0x280>
 8009ad6:	9d03      	ldr	r5, [sp, #12]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	2221      	movs	r2, #33	@ 0x21
 8009adc:	2112      	movs	r1, #18
 8009ade:	f105 000c 	add.w	r0, r5, #12
 8009ae2:	f000 f827 	bl	8009b34 <core_set_error>
 8009ae6:	e71d      	b.n	8009924 <ai_platform_network_process+0x280>
 8009ae8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009aec:	832b      	strh	r3, [r5, #24]
 8009aee:	e752      	b.n	8009996 <ai_platform_network_process+0x2f2>
 8009af0:	2217      	movs	r2, #23
 8009af2:	2113      	movs	r1, #19
 8009af4:	f105 000c 	add.w	r0, r5, #12
 8009af8:	f000 f81c 	bl	8009b34 <core_set_error>
 8009afc:	2400      	movs	r4, #0
 8009afe:	e711      	b.n	8009924 <ai_platform_network_process+0x280>
 8009b00:	2219      	movs	r2, #25
 8009b02:	2113      	movs	r1, #19
 8009b04:	f105 000c 	add.w	r0, r5, #12
 8009b08:	f000 f814 	bl	8009b34 <core_set_error>
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	e709      	b.n	8009924 <ai_platform_network_process+0x280>
 8009b10:	2700      	movs	r7, #0
 8009b12:	e745      	b.n	80099a0 <ai_platform_network_process+0x2fc>
 8009b14:	4604      	mov	r4, r0
 8009b16:	2221      	movs	r2, #33	@ 0x21
 8009b18:	2113      	movs	r1, #19
 8009b1a:	f105 000c 	add.w	r0, r5, #12
 8009b1e:	f000 f809 	bl	8009b34 <core_set_error>
 8009b22:	e6ff      	b.n	8009924 <ai_platform_network_process+0x280>

08009b24 <core_init>:
 8009b24:	2001      	movs	r0, #1
 8009b26:	4770      	bx	lr

08009b28 <core_get_error>:
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop

08009b34 <core_set_error>:
 8009b34:	4603      	mov	r3, r0
 8009b36:	7800      	ldrb	r0, [r0, #0]
 8009b38:	b108      	cbz	r0, 8009b3e <core_set_error+0xa>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	4770      	bx	lr
 8009b3e:	7019      	strb	r1, [r3, #0]
 8009b40:	6819      	ldr	r1, [r3, #0]
 8009b42:	f362 211f 	bfi	r1, r2, #8, #24
 8009b46:	2001      	movs	r0, #1
 8009b48:	6019      	str	r1, [r3, #0]
 8009b4a:	4770      	bx	lr

08009b4c <ai_check_custom_types>:
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	4b13      	ldr	r3, [pc, #76]	@ (8009b9c <ai_check_custom_types+0x50>)
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	b118      	cbz	r0, 8009b5c <ai_check_custom_types+0x10>
 8009b54:	7803      	ldrb	r3, [r0, #0]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d002      	beq.n	8009b60 <ai_check_custom_types+0x14>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	b002      	add	sp, #8
 8009b5e:	4770      	bx	lr
 8009b60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <ai_check_custom_types+0x26>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	f080 0001 	eor.w	r0, r0, #1
 8009b6e:	b002      	add	sp, #8
 8009b70:	4770      	bx	lr
 8009b72:	7842      	ldrb	r2, [r0, #1]
 8009b74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	f100 0001 	add.w	r0, r0, #1
 8009b7e:	d1f3      	bne.n	8009b68 <ai_check_custom_types+0x1c>
 8009b80:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009b84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d1ed      	bne.n	8009b68 <ai_check_custom_types+0x1c>
 8009b8c:	7842      	ldrb	r2, [r0, #1]
 8009b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d1e8      	bne.n	8009b68 <ai_check_custom_types+0x1c>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e7e7      	b.n	8009b6a <ai_check_custom_types+0x1e>
 8009b9a:	bf00      	nop
 8009b9c:	84048403 	.word	0x84048403

08009ba0 <ai_layers_init_all>:
 8009ba0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	b143      	cbz	r3, 8009bb8 <ai_layers_init_all+0x18>
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	60d8      	str	r0, [r3, #12]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	f101 0101 	add.w	r1, r1, #1
 8009bb0:	d002      	beq.n	8009bb8 <ai_layers_init_all+0x18>
 8009bb2:	b10a      	cbz	r2, 8009bb8 <ai_layers_init_all+0x18>
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	e7f5      	b.n	8009ba4 <ai_layers_init_all+0x4>
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4770      	bx	lr

08009bbc <ai_layers_post_init_all>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	b16c      	cbz	r4, 8009be0 <ai_layers_post_init_all+0x24>
 8009bc4:	6863      	ldr	r3, [r4, #4]
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d504      	bpl.n	8009bd4 <ai_layers_post_init_all+0x18>
 8009bca:	6a23      	ldr	r3, [r4, #32]
 8009bcc:	4620      	mov	r0, r4
 8009bce:	b10b      	cbz	r3, 8009bd4 <ai_layers_post_init_all+0x18>
 8009bd0:	4798      	blx	r3
 8009bd2:	3501      	adds	r5, #1
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	d002      	beq.n	8009be0 <ai_layers_post_init_all+0x24>
 8009bda:	b10b      	cbz	r3, 8009be0 <ai_layers_post_init_all+0x24>
 8009bdc:	461c      	mov	r4, r3
 8009bde:	e7f0      	b.n	8009bc2 <ai_layers_post_init_all+0x6>
 8009be0:	4628      	mov	r0, r5
 8009be2:	bd38      	pop	{r3, r4, r5, pc}

08009be4 <ai_layers_forward_all>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8009bec:	4604      	mov	r4, r0
 8009bee:	f1b8 0f00 	cmp.w	r8, #0
 8009bf2:	d02b      	beq.n	8009c4c <ai_layers_forward_all+0x68>
 8009bf4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8009bf6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8009bf8:	b321      	cbz	r1, 8009c44 <ai_layers_forward_all+0x60>
 8009bfa:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	47c0      	blx	r8
 8009c00:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8009c02:	b1fe      	cbz	r6, 8009c44 <ai_layers_forward_all+0x60>
 8009c04:	2700      	movs	r7, #0
 8009c06:	4631      	mov	r1, r6
 8009c08:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009c0a:	2002      	movs	r0, #2
 8009c0c:	47c0      	blx	r8
 8009c0e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8009c10:	4628      	mov	r0, r5
 8009c12:	696b      	ldr	r3, [r5, #20]
 8009c14:	4798      	blx	r3
 8009c16:	692e      	ldr	r6, [r5, #16]
 8009c18:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009c1a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8009c1c:	42b5      	cmp	r5, r6
 8009c1e:	f04f 0003 	mov.w	r0, #3
 8009c22:	d007      	beq.n	8009c34 <ai_layers_forward_all+0x50>
 8009c24:	47c0      	blx	r8
 8009c26:	3701      	adds	r7, #1
 8009c28:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d1eb      	bne.n	8009c06 <ai_layers_forward_all+0x22>
 8009c2e:	4638      	mov	r0, r7
 8009c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c34:	2003      	movs	r0, #3
 8009c36:	47c0      	blx	r8
 8009c38:	2300      	movs	r3, #0
 8009c3a:	3701      	adds	r7, #1
 8009c3c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009c3e:	4638      	mov	r0, r7
 8009c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c44:	2700      	movs	r7, #0
 8009c46:	4638      	mov	r0, r7
 8009c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8009c4e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d0f7      	beq.n	8009c44 <ai_layers_forward_all+0x60>
 8009c54:	4647      	mov	r7, r8
 8009c56:	696b      	ldr	r3, [r5, #20]
 8009c58:	4628      	mov	r0, r5
 8009c5a:	4798      	blx	r3
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	692d      	ldr	r5, [r5, #16]
 8009c60:	429d      	cmp	r5, r3
 8009c62:	d004      	beq.n	8009c6e <ai_layers_forward_all+0x8a>
 8009c64:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8009c66:	3701      	adds	r7, #1
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	d1f4      	bne.n	8009c56 <ai_layers_forward_all+0x72>
 8009c6c:	e7df      	b.n	8009c2e <ai_layers_forward_all+0x4a>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009c72:	3701      	adds	r7, #1
 8009c74:	e7db      	b.n	8009c2e <ai_layers_forward_all+0x4a>
 8009c76:	bf00      	nop

08009c78 <forward_conv2d_if32of32wf32_nl_pool>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8009c80:	b0c3      	sub	sp, #268	@ 0x10c
 8009c82:	f8bc 3000 	ldrh.w	r3, [ip]
 8009c86:	9321      	str	r3, [sp, #132]	@ 0x84
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 8139 	beq.w	8009f00 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8009c8e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009c92:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009c96:	4604      	mov	r4, r0
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d001      	beq.n	8009ca2 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8009c9e:	f8da a000 	ldr.w	sl, [sl]
 8009ca2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ca4:	2a01      	cmp	r2, #1
 8009ca6:	f000 812a 	beq.w	8009efe <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8009caa:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8009cae:	f1b9 0f00 	cmp.w	r9, #0
 8009cb2:	d001      	beq.n	8009cb8 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8009cb4:	f8d9 9000 	ldr.w	r9, [r9]
 8009cb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009cba:	2a02      	cmp	r2, #2
 8009cbc:	f000 811f 	beq.w	8009efe <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8009cc0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8009cc4:	8b1b      	ldrh	r3, [r3, #24]
 8009cc6:	f1b8 0f00 	cmp.w	r8, #0
 8009cca:	f000 812d 	beq.w	8009f28 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	f8d8 b000 	ldr.w	fp, [r8]
 8009cd4:	f240 812e 	bls.w	8009f34 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 8009cd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cdc:	9341      	str	r3, [sp, #260]	@ 0x104
 8009cde:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009ce2:	f8da 200c 	ldr.w	r2, [sl, #12]
 8009ce6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009cea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cec:	f8db e00c 	ldr.w	lr, [fp, #12]
 8009cf0:	9022      	str	r0, [sp, #136]	@ 0x88
 8009cf2:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8009cf6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009cf8:	9031      	str	r0, [sp, #196]	@ 0xc4
 8009cfa:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8009cfe:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8009d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d02:	f8de 7004 	ldr.w	r7, [lr, #4]
 8009d06:	9032      	str	r0, [sp, #200]	@ 0xc8
 8009d08:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8009d0c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8009d10:	9527      	str	r5, [sp, #156]	@ 0x9c
 8009d12:	9628      	str	r6, [sp, #160]	@ 0xa0
 8009d14:	681d      	ldr	r5, [r3, #0]
 8009d16:	685e      	ldr	r6, [r3, #4]
 8009d18:	972b      	str	r7, [sp, #172]	@ 0xac
 8009d1a:	9134      	str	r1, [sp, #208]	@ 0xd0
 8009d1c:	f8de 7008 	ldr.w	r7, [lr, #8]
 8009d20:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8009d24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8009d28:	9529      	str	r5, [sp, #164]	@ 0xa4
 8009d2a:	962a      	str	r6, [sp, #168]	@ 0xa8
 8009d2c:	9730      	str	r7, [sp, #192]	@ 0xc0
 8009d2e:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8009d32:	9033      	str	r0, [sp, #204]	@ 0xcc
 8009d34:	9123      	str	r1, [sp, #140]	@ 0x8c
 8009d36:	9224      	str	r2, [sp, #144]	@ 0x90
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	932f      	str	r3, [sp, #188]	@ 0xbc
 8009d3e:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8009d42:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009d44:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8009d48:	922e      	str	r2, [sp, #184]	@ 0xb8
 8009d4a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8009d4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009d4e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8009d52:	933d      	str	r3, [sp, #244]	@ 0xf4
 8009d54:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8009d58:	933e      	str	r3, [sp, #248]	@ 0xf8
 8009d5a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009d5e:	933f      	str	r3, [sp, #252]	@ 0xfc
 8009d60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009d64:	9340      	str	r3, [sp, #256]	@ 0x100
 8009d66:	6a23      	ldr	r3, [r4, #32]
 8009d68:	9322      	str	r3, [sp, #136]	@ 0x88
 8009d6a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8009d6e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009d70:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8009d74:	9336      	str	r3, [sp, #216]	@ 0xd8
 8009d76:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 8009d7a:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009d7c:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8009d80:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009d82:	b2ab      	uxth	r3, r5
 8009d84:	933a      	str	r3, [sp, #232]	@ 0xe8
 8009d86:	b2b3      	uxth	r3, r6
 8009d88:	933b      	str	r3, [sp, #236]	@ 0xec
 8009d8a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 8009d8e:	9325      	str	r3, [sp, #148]	@ 0x94
 8009d90:	b23b      	sxth	r3, r7
 8009d92:	9326      	str	r3, [sp, #152]	@ 0x98
 8009d94:	f1b8 0f00 	cmp.w	r8, #0
 8009d98:	f000 80b4 	beq.w	8009f04 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8009d9c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 80b8 	beq.w	8009f16 <forward_conv2d_if32of32wf32_nl_pool+0x29e>
 8009da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	9322      	str	r3, [sp, #136]	@ 0x88
 8009dae:	f001 fe67 	bl	800ba80 <ai_array_get_byte_size>
 8009db2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009db6:	902d      	str	r0, [sp, #180]	@ 0xb4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80be 	beq.w	8009f3a <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 8009dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009dc2:	f001 fe5d 	bl	800ba80 <ai_array_get_byte_size>
 8009dc6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8009dca:	902c      	str	r0, [sp, #176]	@ 0xb0
 8009dcc:	f8bc 3000 	ldrh.w	r3, [ip]
 8009dd0:	9321      	str	r3, [sp, #132]	@ 0x84
 8009dd2:	f8da 1018 	ldr.w	r1, [sl, #24]
 8009dd6:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8009dda:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009ddc:	6888      	ldr	r0, [r1, #8]
 8009dde:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009de2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009de4:	f8bd 909c 	ldrh.w	r9, [sp, #156]	@ 0x9c
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	f8db 2018 	ldr.w	r2, [fp, #24]
 8009dee:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009df2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009df4:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	@ 0xa0
 8009df8:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8009dfc:	6892      	ldr	r2, [r2, #8]
 8009dfe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009e02:	b2ad      	uxth	r5, r5
 8009e04:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 8009e06:	3d01      	subs	r5, #1
 8009e08:	fb15 7508 	smlabb	r5, r5, r8, r7
 8009e0c:	fa0f f885 	sxth.w	r8, r5
 8009e10:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8009e12:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 8009e14:	b2b6      	uxth	r6, r6
 8009e16:	3d01      	subs	r5, #1
 8009e18:	3e01      	subs	r6, #1
 8009e1a:	fb16 7605 	smlabb	r6, r6, r5, r7
 8009e1e:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8009e20:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8009e22:	eba5 0508 	sub.w	r5, r5, r8
 8009e26:	fa15 f587 	uxtah	r5, r5, r7
 8009e2a:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 8009e2c:	fa15 f587 	uxtah	r5, r5, r7
 8009e30:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8009e32:	fb95 f5f9 	sdiv	r5, r5, r9
 8009e36:	b236      	sxth	r6, r6
 8009e38:	eba7 0906 	sub.w	r9, r7, r6
 8009e3c:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8009e3e:	fa19 f987 	uxtah	r9, r9, r7
 8009e42:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8009e44:	3501      	adds	r5, #1
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	fa19 f987 	uxtah	r9, r9, r7
 8009e4c:	b22d      	sxth	r5, r5
 8009e4e:	fb99 f9fe 	sdiv	r9, r9, lr
 8009e52:	f109 0e01 	add.w	lr, r9, #1
 8009e56:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8009e5a:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8009e5e:	d94e      	bls.n	8009efe <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8009e60:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009e64:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8009e68:	f1bc 0f00 	cmp.w	ip, #0
 8009e6c:	d070      	beq.n	8009f50 <forward_conv2d_if32of32wf32_nl_pool+0x2d8>
 8009e6e:	f8dc 7000 	ldr.w	r7, [ip]
 8009e72:	b10f      	cbz	r7, 8009e78 <forward_conv2d_if32of32wf32_nl_pool+0x200>
 8009e74:	69bf      	ldr	r7, [r7, #24]
 8009e76:	68bf      	ldr	r7, [r7, #8]
 8009e78:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8009e7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009e7c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8009e7e:	931e      	str	r3, [sp, #120]	@ 0x78
 8009e80:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8009e82:	931d      	str	r3, [sp, #116]	@ 0x74
 8009e84:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8009e86:	9513      	str	r5, [sp, #76]	@ 0x4c
 8009e88:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8009e8c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8009e8e:	960e      	str	r6, [sp, #56]	@ 0x38
 8009e90:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8009e94:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8009e96:	9318      	str	r3, [sp, #96]	@ 0x60
 8009e98:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8009e9a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009e9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e9e:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8009ea2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8009ea4:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ea6:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8009ea8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009eaa:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8009eac:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8009eb0:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8009eb2:	930d      	str	r3, [sp, #52]	@ 0x34
 8009eb4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8009eb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eb8:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8009eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ebc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8009ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009ec6:	9308      	str	r3, [sp, #32]
 8009ec8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8009eca:	9307      	str	r3, [sp, #28]
 8009ecc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8009ece:	9306      	str	r3, [sp, #24]
 8009ed0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009eda:	9303      	str	r3, [sp, #12]
 8009edc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009ede:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8009ee2:	fa0f f48e 	sxth.w	r4, lr
 8009ee6:	9414      	str	r4, [sp, #80]	@ 0x50
 8009ee8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009eec:	69a4      	ldr	r4, [r4, #24]
 8009eee:	68a4      	ldr	r4, [r4, #8]
 8009ef0:	9400      	str	r4, [sp, #0]
 8009ef2:	465b      	mov	r3, fp
 8009ef4:	f000 f98c 	bl	800a210 <forward_lite_conv2d_if32of32wf32_pool>
 8009ef8:	b043      	add	sp, #268	@ 0x10c
 8009efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efe:	2300      	movs	r3, #0
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	deff      	udf	#255	@ 0xff
 8009f04:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f06:	b10b      	cbz	r3, 8009f0c <forward_conv2d_if32of32wf32_nl_pool+0x294>
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	9322      	str	r3, [sp, #136]	@ 0x88
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
 8009f12:	932c      	str	r3, [sp, #176]	@ 0xb0
 8009f14:	e75d      	b.n	8009dd2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8009f16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f18:	b10b      	cbz	r3, 8009f1e <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	9322      	str	r3, [sp, #136]	@ 0x88
 8009f1e:	2301      	movs	r3, #1
 8009f20:	2200      	movs	r2, #0
 8009f22:	e9cd 322c 	strd	r3, r2, [sp, #176]	@ 0xb0
 8009f26:	e754      	b.n	8009dd2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d90e      	bls.n	8009f4a <forward_conv2d_if32of32wf32_nl_pool+0x2d2>
 8009f2c:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
 8009f30:	46c3      	mov	fp, r8
 8009f32:	e6d6      	b.n	8009ce2 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f38:	e6d1      	b.n	8009cde <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8009f40:	932c      	str	r3, [sp, #176]	@ 0xb0
 8009f42:	f8bc 3000 	ldrh.w	r3, [ip]
 8009f46:	9321      	str	r3, [sp, #132]	@ 0x84
 8009f48:	e743      	b.n	8009dd2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8009f4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f4e:	deff      	udf	#255	@ 0xff
 8009f50:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8009f54:	deff      	udf	#255	@ 0xff
 8009f56:	bf00      	nop

08009f58 <forward_dense>:
 8009f58:	6982      	ldr	r2, [r0, #24]
 8009f5a:	8813      	ldrh	r3, [r2, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d043      	beq.n	8009fe8 <forward_dense+0x90>
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	6855      	ldr	r5, [r2, #4]
 8009f66:	6869      	ldr	r1, [r5, #4]
 8009f68:	b08e      	sub	sp, #56	@ 0x38
 8009f6a:	b101      	cbz	r1, 8009f6e <forward_dense+0x16>
 8009f6c:	6809      	ldr	r1, [r1, #0]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d069      	beq.n	800a046 <forward_dense+0xee>
 8009f72:	692a      	ldr	r2, [r5, #16]
 8009f74:	b102      	cbz	r2, 8009f78 <forward_dense+0x20>
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d061      	beq.n	800a040 <forward_dense+0xe8>
 8009f7c:	69ec      	ldr	r4, [r5, #28]
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	d057      	beq.n	800a032 <forward_dense+0xda>
 8009f82:	8b2e      	ldrh	r6, [r5, #24]
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	2e01      	cmp	r6, #1
 8009f88:	d955      	bls.n	800a036 <forward_dense+0xde>
 8009f8a:	6864      	ldr	r4, [r4, #4]
 8009f8c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8009f90:	68cf      	ldr	r7, [r1, #12]
 8009f92:	68d0      	ldr	r0, [r2, #12]
 8009f94:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8009f98:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8009f9c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8009fa0:	f8d9 0000 	ldr.w	r0, [r9]
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	fb06 f807 	mul.w	r8, r6, r7
 8009faa:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8009fae:	d044      	beq.n	800a03a <forward_dense+0xe2>
 8009fb0:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8009fb2:	b11d      	cbz	r5, 8009fbc <forward_dense+0x64>
 8009fb4:	682d      	ldr	r5, [r5, #0]
 8009fb6:	b10d      	cbz	r5, 8009fbc <forward_dense+0x64>
 8009fb8:	69ab      	ldr	r3, [r5, #24]
 8009fba:	689d      	ldr	r5, [r3, #8]
 8009fbc:	6992      	ldr	r2, [r2, #24]
 8009fbe:	698b      	ldr	r3, [r1, #24]
 8009fc0:	6890      	ldr	r0, [r2, #8]
 8009fc2:	6899      	ldr	r1, [r3, #8]
 8009fc4:	b10c      	cbz	r4, 8009fca <forward_dense+0x72>
 8009fc6:	69a3      	ldr	r3, [r4, #24]
 8009fc8:	689c      	ldr	r4, [r3, #8]
 8009fca:	4b20      	ldr	r3, [pc, #128]	@ (800a04c <forward_dense+0xf4>)
 8009fcc:	459c      	cmp	ip, r3
 8009fce:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8009fd2:	d023      	beq.n	800a01c <forward_dense+0xc4>
 8009fd4:	4e1e      	ldr	r6, [pc, #120]	@ (800a050 <forward_dense+0xf8>)
 8009fd6:	45b4      	cmp	ip, r6
 8009fd8:	d015      	beq.n	800a006 <forward_dense+0xae>
 8009fda:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8009fde:	459c      	cmp	ip, r3
 8009fe0:	d004      	beq.n	8009fec <forward_dense+0x94>
 8009fe2:	b00e      	add	sp, #56	@ 0x38
 8009fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	deff      	udf	#255	@ 0xff
 8009fec:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8009ff0:	a807      	add	r0, sp, #28
 8009ff2:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8009ff6:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8009ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ffc:	f001 f826 	bl	800b04c <forward_lite_dense_if32of32wf32>
 800a000:	b00e      	add	sp, #56	@ 0x38
 800a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a006:	e9cd e803 	strd	lr, r8, [sp, #12]
 800a00a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800a00e:	9500      	str	r5, [sp, #0]
 800a010:	464b      	mov	r3, r9
 800a012:	f001 f975 	bl	800b300 <forward_lite_dense_if32of32wf32_lut4>
 800a016:	b00e      	add	sp, #56	@ 0x38
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	e9cd e803 	strd	lr, r8, [sp, #12]
 800a020:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800a024:	9500      	str	r5, [sp, #0]
 800a026:	464b      	mov	r3, r9
 800a028:	f001 fa92 	bl	800b550 <forward_lite_dense_if32of32wf32_lut8>
 800a02c:	b00e      	add	sp, #56	@ 0x38
 800a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a032:	4620      	mov	r0, r4
 800a034:	e7aa      	b.n	8009f8c <forward_dense+0x34>
 800a036:	2400      	movs	r4, #0
 800a038:	e7a8      	b.n	8009f8c <forward_dense+0x34>
 800a03a:	2300      	movs	r3, #0
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	deff      	udf	#255	@ 0xff
 800a040:	2300      	movs	r3, #0
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	deff      	udf	#255	@ 0xff
 800a046:	2300      	movs	r3, #0
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	deff      	udf	#255	@ 0xff
 800a04c:	00d01040 	.word	0x00d01040
 800a050:	00f01040 	.word	0x00f01040

0800a054 <forward_relu>:
 800a054:	6982      	ldr	r2, [r0, #24]
 800a056:	8813      	ldrh	r3, [r2, #0]
 800a058:	b323      	cbz	r3, 800a0a4 <forward_relu+0x50>
 800a05a:	6851      	ldr	r1, [r2, #4]
 800a05c:	684a      	ldr	r2, [r1, #4]
 800a05e:	b102      	cbz	r2, 800a062 <forward_relu+0xe>
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	2b01      	cmp	r3, #1
 800a064:	f000 808d 	beq.w	800a182 <forward_relu+0x12e>
 800a068:	b470      	push	{r4, r5, r6}
 800a06a:	6909      	ldr	r1, [r1, #16]
 800a06c:	b101      	cbz	r1, 800a070 <forward_relu+0x1c>
 800a06e:	6809      	ldr	r1, [r1, #0]
 800a070:	69c6      	ldr	r6, [r0, #28]
 800a072:	b1ce      	cbz	r6, 800a0a8 <forward_relu+0x54>
 800a074:	6873      	ldr	r3, [r6, #4]
 800a076:	6988      	ldr	r0, [r1, #24]
 800a078:	6991      	ldr	r1, [r2, #24]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d044      	beq.n	800a108 <forward_relu+0xb4>
 800a07e:	6893      	ldr	r3, [r2, #8]
 800a080:	6880      	ldr	r0, [r0, #8]
 800a082:	6889      	ldr	r1, [r1, #8]
 800a084:	0a1b      	lsrs	r3, r3, #8
 800a086:	d073      	beq.n	800a170 <forward_relu+0x11c>
 800a088:	68d5      	ldr	r5, [r2, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a090:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a094:	429d      	cmp	r5, r3
 800a096:	fb04 f202 	mul.w	r2, r4, r2
 800a09a:	d1f9      	bne.n	800a090 <forward_relu+0x3c>
 800a09c:	68b3      	ldr	r3, [r6, #8]
 800a09e:	bc70      	pop	{r4, r5, r6}
 800a0a0:	f000 bd2e 	b.w	800ab00 <forward_lite_nl_relu_generic_if32of32_kernel>
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	deff      	udf	#255	@ 0xff
 800a0a8:	6893      	ldr	r3, [r2, #8]
 800a0aa:	6989      	ldr	r1, [r1, #24]
 800a0ac:	6990      	ldr	r0, [r2, #24]
 800a0ae:	6889      	ldr	r1, [r1, #8]
 800a0b0:	6884      	ldr	r4, [r0, #8]
 800a0b2:	0a1b      	lsrs	r3, r3, #8
 800a0b4:	d05e      	beq.n	800a174 <forward_relu+0x120>
 800a0b6:	68d5      	ldr	r5, [r2, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a0be:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800a0c2:	429d      	cmp	r5, r3
 800a0c4:	fb00 f202 	mul.w	r2, r0, r2
 800a0c8:	d1f9      	bne.n	800a0be <forward_relu+0x6a>
 800a0ca:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a0d4:	4294      	cmp	r4, r2
 800a0d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a0da:	d813      	bhi.n	800a104 <forward_relu+0xb0>
 800a0dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a188 <forward_relu+0x134>
 800a0e0:	3204      	adds	r2, #4
 800a0e2:	3104      	adds	r1, #4
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	ed72 7a01 	vldmdb	r2!, {s15}
 800a0ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f2:	f1a3 0308 	sub.w	r3, r3, #8
 800a0f6:	bfb8      	it	lt
 800a0f8:	eef0 7a47 	vmovlt.f32	s15, s14
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	ed61 7a01 	vstmdb	r1!, {s15}
 800a102:	d9ef      	bls.n	800a0e4 <forward_relu+0x90>
 800a104:	bc70      	pop	{r4, r5, r6}
 800a106:	4770      	bx	lr
 800a108:	688c      	ldr	r4, [r1, #8]
 800a10a:	6891      	ldr	r1, [r2, #8]
 800a10c:	6880      	ldr	r0, [r0, #8]
 800a10e:	0a09      	lsrs	r1, r1, #8
 800a110:	d032      	beq.n	800a178 <forward_relu+0x124>
 800a112:	68d5      	ldr	r5, [r2, #12]
 800a114:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800a118:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a11c:	4295      	cmp	r5, r2
 800a11e:	fb01 f303 	mul.w	r3, r1, r3
 800a122:	d1f9      	bne.n	800a118 <forward_relu+0xc4>
 800a124:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800a128:	3a01      	subs	r2, #1
 800a12a:	68b1      	ldr	r1, [r6, #8]
 800a12c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a130:	429c      	cmp	r4, r3
 800a132:	ed91 7a00 	vldr	s14, [r1]
 800a136:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a13a:	d8e3      	bhi.n	800a104 <forward_relu+0xb0>
 800a13c:	2500      	movs	r5, #0
 800a13e:	3304      	adds	r3, #4
 800a140:	1d02      	adds	r2, r0, #4
 800a142:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14e:	f1a3 0104 	sub.w	r1, r3, #4
 800a152:	f1a3 0308 	sub.w	r3, r3, #8
 800a156:	d405      	bmi.n	800a164 <forward_relu+0x110>
 800a158:	429c      	cmp	r4, r3
 800a15a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a15e:	d8d1      	bhi.n	800a104 <forward_relu+0xb0>
 800a160:	460b      	mov	r3, r1
 800a162:	e7ee      	b.n	800a142 <forward_relu+0xee>
 800a164:	429c      	cmp	r4, r3
 800a166:	ed62 7a01 	vstmdb	r2!, {s15}
 800a16a:	d8cb      	bhi.n	800a104 <forward_relu+0xb0>
 800a16c:	460b      	mov	r3, r1
 800a16e:	e7e8      	b.n	800a142 <forward_relu+0xee>
 800a170:	2201      	movs	r2, #1
 800a172:	e793      	b.n	800a09c <forward_relu+0x48>
 800a174:	4622      	mov	r2, r4
 800a176:	e7b1      	b.n	800a0dc <forward_relu+0x88>
 800a178:	68b2      	ldr	r2, [r6, #8]
 800a17a:	4623      	mov	r3, r4
 800a17c:	ed92 7a00 	vldr	s14, [r2]
 800a180:	e7dc      	b.n	800a13c <forward_relu+0xe8>
 800a182:	2300      	movs	r3, #0
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	deff      	udf	#255	@ 0xff
 800a188:	00000000 	.word	0x00000000

0800a18c <forward_sm>:
 800a18c:	6982      	ldr	r2, [r0, #24]
 800a18e:	8813      	ldrh	r3, [r2, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d036      	beq.n	800a202 <forward_sm+0x76>
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	6852      	ldr	r2, [r2, #4]
 800a198:	6855      	ldr	r5, [r2, #4]
 800a19a:	b082      	sub	sp, #8
 800a19c:	b105      	cbz	r5, 800a1a0 <forward_sm+0x14>
 800a19e:	682d      	ldr	r5, [r5, #0]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d032      	beq.n	800a20a <forward_sm+0x7e>
 800a1a4:	6916      	ldr	r6, [r2, #16]
 800a1a6:	b106      	cbz	r6, 800a1aa <forward_sm+0x1e>
 800a1a8:	6836      	ldr	r6, [r6, #0]
 800a1aa:	68ab      	ldr	r3, [r5, #8]
 800a1ac:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 800a1b0:	d029      	beq.n	800a206 <forward_sm+0x7a>
 800a1b2:	68ec      	ldr	r4, [r5, #12]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800a1ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	fb01 f202 	mul.w	r2, r1, r2
 800a1c4:	d1f9      	bne.n	800a1ba <forward_sm+0x2e>
 800a1c6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800a1ca:	69b0      	ldr	r0, [r6, #24]
 800a1cc:	4563      	cmp	r3, ip
 800a1ce:	bfb8      	it	lt
 800a1d0:	68e9      	ldrlt	r1, [r5, #12]
 800a1d2:	6880      	ldr	r0, [r0, #8]
 800a1d4:	bfb8      	it	lt
 800a1d6:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 800a1da:	6929      	ldr	r1, [r5, #16]
 800a1dc:	bfa8      	it	ge
 800a1de:	2401      	movge	r4, #1
 800a1e0:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800a1e4:	bfbc      	itt	lt
 800a1e6:	6969      	ldrlt	r1, [r5, #20]
 800a1e8:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 800a1ec:	69a9      	ldr	r1, [r5, #24]
 800a1ee:	bfb8      	it	lt
 800a1f0:	089b      	lsrlt	r3, r3, #2
 800a1f2:	6889      	ldr	r1, [r1, #8]
 800a1f4:	9400      	str	r4, [sp, #0]
 800a1f6:	bfa8      	it	ge
 800a1f8:	2300      	movge	r3, #0
 800a1fa:	f001 faf9 	bl	800b7f0 <forward_lite_nl_softmax_if32of32>
 800a1fe:	b002      	add	sp, #8
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	deff      	udf	#255	@ 0xff
 800a206:	2201      	movs	r2, #1
 800a208:	e7dd      	b.n	800a1c6 <forward_sm+0x3a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	deff      	udf	#255	@ 0xff

0800a210 <forward_lite_conv2d_if32of32wf32_pool>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	ed2d 8b02 	vpush	{d8}
 800a218:	b0c9      	sub	sp, #292	@ 0x124
 800a21a:	4696      	mov	lr, r2
 800a21c:	f9bd 519c 	ldrsh.w	r5, [sp, #412]	@ 0x19c
 800a220:	9323      	str	r3, [sp, #140]	@ 0x8c
 800a222:	f9bd 31bc 	ldrsh.w	r3, [sp, #444]	@ 0x1bc
 800a226:	9137      	str	r1, [sp, #220]	@ 0xdc
 800a228:	f9bd 115c 	ldrsh.w	r1, [sp, #348]	@ 0x15c
 800a22c:	9238      	str	r2, [sp, #224]	@ 0xe0
 800a22e:	fb05 f203 	mul.w	r2, r5, r3
 800a232:	9129      	str	r1, [sp, #164]	@ 0xa4
 800a234:	460e      	mov	r6, r1
 800a236:	fb01 f202 	mul.w	r2, r1, r2
 800a23a:	f9bd 1164 	ldrsh.w	r1, [sp, #356]	@ 0x164
 800a23e:	f9bd 416c 	ldrsh.w	r4, [sp, #364]	@ 0x16c
 800a242:	f8bd c180 	ldrh.w	ip, [sp, #384]	@ 0x180
 800a246:	9142      	str	r1, [sp, #264]	@ 0x108
 800a248:	f9bd 1170 	ldrsh.w	r1, [sp, #368]	@ 0x170
 800a24c:	f9bd 7160 	ldrsh.w	r7, [sp, #352]	@ 0x160
 800a250:	932d      	str	r3, [sp, #180]	@ 0xb4
 800a252:	942a      	str	r4, [sp, #168]	@ 0xa8
 800a254:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	@ 0x168
 800a258:	f9bd 4158 	ldrsh.w	r4, [sp, #344]	@ 0x158
 800a25c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a25e:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800a262:	f8bd 1178 	ldrh.w	r1, [sp, #376]	@ 0x178
 800a266:	f8bd c184 	ldrh.w	ip, [sp, #388]	@ 0x184
 800a26a:	9041      	str	r0, [sp, #260]	@ 0x104
 800a26c:	9339      	str	r3, [sp, #228]	@ 0xe4
 800a26e:	912b      	str	r1, [sp, #172]	@ 0xac
 800a270:	f9bd 9174 	ldrsh.w	r9, [sp, #372]	@ 0x174
 800a274:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a276:	4680      	mov	r8, r0
 800a278:	9418      	str	r4, [sp, #96]	@ 0x60
 800a27a:	f8bd 017c 	ldrh.w	r0, [sp, #380]	@ 0x17c
 800a27e:	9714      	str	r7, [sp, #80]	@ 0x50
 800a280:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 800a284:	f9bd c188 	ldrsh.w	ip, [sp, #392]	@ 0x188
 800a288:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 800a28c:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 800a290:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 800a294:	4243      	negs	r3, r0
 800a296:	f9bd c1c0 	ldrsh.w	ip, [sp, #448]	@ 0x1c0
 800a29a:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 800a29e:	931e      	str	r3, [sp, #120]	@ 0x78
 800a2a0:	f9bd c1c4 	ldrsh.w	ip, [sp, #452]	@ 0x1c4
 800a2a4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800a2a6:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 800a2aa:	f9bd c1c8 	ldrsh.w	ip, [sp, #456]	@ 0x1c8
 800a2ae:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f9bd c1cc 	ldrsh.w	ip, [sp, #460]	@ 0x1cc
 800a2b8:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 800a2bc:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 800a2c0:	f340 80a7 	ble.w	800a412 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 800a2c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2c6:	ed9f 8a55 	vldr	s16, [pc, #340]	@ 800a41c <forward_lite_conv2d_if32of32wf32_pool+0x20c>
 800a2ca:	fb03 f309 	mul.w	r3, r3, r9
 800a2ce:	fb04 f303 	mul.w	r3, r4, r3
 800a2d2:	3901      	subs	r1, #1
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	fa1f fc81 	uxth.w	ip, r1
 800a2da:	4631      	mov	r1, r6
 800a2dc:	b2b6      	uxth	r6, r6
 800a2de:	9324      	str	r3, [sp, #144]	@ 0x90
 800a2e0:	1e73      	subs	r3, r6, #1
 800a2e2:	e9cd 0c20 	strd	r0, ip, [sp, #128]	@ 0x80
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800a2ea:	963f      	str	r6, [sp, #252]	@ 0xfc
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	009e      	lsls	r6, r3, #2
 800a2f0:	fb00 f301 	mul.w	r3, r0, r1
 800a2f4:	fb05 f303 	mul.w	r3, r5, r3
 800a2f8:	0098      	lsls	r0, r3, #2
 800a2fa:	903d      	str	r0, [sp, #244]	@ 0xf4
 800a2fc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800a2fe:	9635      	str	r6, [sp, #212]	@ 0xd4
 800a300:	fb00 f307 	mul.w	r3, r0, r7
 800a304:	fb04 f303 	mul.w	r3, r4, r3
 800a308:	0098      	lsls	r0, r3, #2
 800a30a:	9034      	str	r0, [sp, #208]	@ 0xd0
 800a30c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800a30e:	0090      	lsls	r0, r2, #2
 800a310:	9033      	str	r0, [sp, #204]	@ 0xcc
 800a312:	9854      	ldr	r0, [sp, #336]	@ 0x150
 800a314:	fb01 f303 	mul.w	r3, r1, r3
 800a318:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a31c:	0098      	lsls	r0, r3, #2
 800a31e:	00a6      	lsls	r6, r4, #2
 800a320:	903b      	str	r0, [sp, #236]	@ 0xec
 800a322:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800a324:	9616      	str	r6, [sp, #88]	@ 0x58
 800a326:	fb07 f306 	mul.w	r3, r7, r6
 800a32a:	fb00 8703 	mla	r7, r0, r3, r8
 800a32e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800a330:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800a332:	9722      	str	r7, [sp, #136]	@ 0x88
 800a334:	425f      	negs	r7, r3
 800a336:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a338:	921f      	str	r2, [sp, #124]	@ 0x7c
 800a33a:	fb05 f501 	mul.w	r5, r5, r1
 800a33e:	0089      	lsls	r1, r1, #2
 800a340:	fb03 f304 	mul.w	r3, r3, r4
 800a344:	9112      	str	r1, [sp, #72]	@ 0x48
 800a346:	4241      	negs	r1, r0
 800a348:	009c      	lsls	r4, r3, #2
 800a34a:	9125      	str	r1, [sp, #148]	@ 0x94
 800a34c:	fb06 f107 	mul.w	r1, r6, r7
 800a350:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a352:	9417      	str	r4, [sp, #92]	@ 0x5c
 800a354:	953c      	str	r5, [sp, #240]	@ 0xf0
 800a356:	2400      	movs	r4, #0
 800a358:	9136      	str	r1, [sp, #216]	@ 0xd8
 800a35a:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 800a35e:	9954      	ldr	r1, [sp, #336]	@ 0x150
 800a360:	9731      	str	r7, [sp, #196]	@ 0xc4
 800a362:	9428      	str	r4, [sp, #160]	@ 0xa0
 800a364:	953a      	str	r5, [sp, #232]	@ 0xe8
 800a366:	911b      	str	r1, [sp, #108]	@ 0x6c
 800a368:	9332      	str	r3, [sp, #200]	@ 0xc8
 800a36a:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 800a36c:	932f      	str	r3, [sp, #188]	@ 0xbc
 800a36e:	1e53      	subs	r3, r2, #1
 800a370:	9427      	str	r4, [sp, #156]	@ 0x9c
 800a372:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a374:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a376:	3301      	adds	r3, #1
 800a378:	b21b      	sxth	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dc68      	bgt.n	800a450 <forward_lite_conv2d_if32of32wf32_pool+0x240>
 800a37e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	f100 81d4 	bmi.w	800a72e <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 800a386:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800a388:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800a38a:	4282      	cmp	r2, r0
 800a38c:	dc48      	bgt.n	800a420 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 800a38e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a390:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800a392:	9108      	str	r1, [sp, #32]
 800a394:	3301      	adds	r3, #1
 800a396:	b21c      	sxth	r4, r3
 800a398:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800a39a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800a39c:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 800a39e:	9427      	str	r4, [sp, #156]	@ 0x9c
 800a3a0:	18cb      	adds	r3, r1, r3
 800a3a2:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a3a4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800a3a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a3a8:	440b      	add	r3, r1
 800a3aa:	931e      	str	r3, [sp, #120]	@ 0x78
 800a3ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3ae:	1a5b      	subs	r3, r3, r1
 800a3b0:	9320      	str	r3, [sp, #128]	@ 0x80
 800a3b2:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800a3b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a3b6:	440b      	add	r3, r1
 800a3b8:	9322      	str	r3, [sp, #136]	@ 0x88
 800a3ba:	b293      	uxth	r3, r2
 800a3bc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	b2bb      	uxth	r3, r7
 800a3c6:	1ac1      	subs	r1, r0, r3
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	b20b      	sxth	r3, r1
 800a3cc:	931d      	str	r3, [sp, #116]	@ 0x74
 800a3ce:	b2b3      	uxth	r3, r6
 800a3d0:	9303      	str	r3, [sp, #12]
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	9307      	str	r3, [sp, #28]
 800a3d6:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 800a3ec:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800a3f4:	9854      	ldr	r0, [sp, #336]	@ 0x150
 800a3f6:	9d6d      	ldr	r5, [sp, #436]	@ 0x1b4
 800a3f8:	47a8      	blx	r5
 800a3fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a3fc:	1bf3      	subs	r3, r6, r7
 800a3fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a402:	b21b      	sxth	r3, r3
 800a404:	3a01      	subs	r2, #1
 800a406:	9332      	str	r3, [sp, #200]	@ 0xc8
 800a408:	b293      	uxth	r3, r2
 800a40a:	9321      	str	r3, [sp, #132]	@ 0x84
 800a40c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800a40e:	42a3      	cmp	r3, r4
 800a410:	dcb0      	bgt.n	800a374 <forward_lite_conv2d_if32of32wf32_pool+0x164>
 800a412:	b049      	add	sp, #292	@ 0x124
 800a414:	ecbd 8b02 	vpop	{d8}
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	00000000 	.word	0x00000000
 800a420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a422:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a424:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800a426:	3b01      	subs	r3, #1
 800a428:	b29b      	uxth	r3, r3
 800a42a:	9321      	str	r3, [sp, #132]	@ 0x84
 800a42c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a42e:	440a      	add	r2, r1
 800a430:	1a5b      	subs	r3, r3, r1
 800a432:	921e      	str	r2, [sp, #120]	@ 0x78
 800a434:	9320      	str	r3, [sp, #128]	@ 0x80
 800a436:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800a438:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a43a:	4413      	add	r3, r2
 800a43c:	9322      	str	r3, [sp, #136]	@ 0x88
 800a43e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a440:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800a442:	4293      	cmp	r3, r2
 800a444:	dde5      	ble.n	800a412 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 800a446:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a448:	3301      	adds	r3, #1
 800a44a:	b21b      	sxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dd96      	ble.n	800a37e <forward_lite_conv2d_if32of32wf32_pool+0x16e>
 800a450:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a452:	2b00      	cmp	r3, #0
 800a454:	f2c0 82cc 	blt.w	800a9f0 <forward_lite_conv2d_if32of32wf32_pool+0x7e0>
 800a458:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a45a:	931c      	str	r3, [sp, #112]	@ 0x70
 800a45c:	2300      	movs	r3, #0
 800a45e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a460:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800a462:	440a      	add	r2, r1
 800a464:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800a466:	428a      	cmp	r2, r1
 800a468:	bfd4      	ite	le
 800a46a:	ebc3 0b02 	rsble	fp, r3, r2
 800a46e:	ebc3 0b01 	rsbgt	fp, r3, r1
 800a472:	9a55      	ldr	r2, [sp, #340]	@ 0x154
 800a474:	2a00      	cmp	r2, #0
 800a476:	f000 819c 	beq.w	800a7b2 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 800a47a:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800a47c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800a480:	f0c0 8197 	bcc.w	800a7b2 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 800a484:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800a486:	2a00      	cmp	r2, #0
 800a488:	f340 8117 	ble.w	800a6ba <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800a48c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a48e:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	9319      	str	r3, [sp, #100]	@ 0x64
 800a496:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800a498:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a49a:	9326      	str	r3, [sp, #152]	@ 0x98
 800a49c:	189a      	adds	r2, r3, r2
 800a49e:	923e      	str	r2, [sp, #248]	@ 0xf8
 800a4a0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a4a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4a4:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a4a6:	440a      	add	r2, r1
 800a4a8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800a4aa:	9240      	str	r2, [sp, #256]	@ 0x100
 800a4ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a4b0:	9955      	ldr	r1, [sp, #340]	@ 0x154
 800a4b2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800a4b4:	f001 f9d2 	bl	800b85c <st_int8_copy>
 800a4b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8134 	beq.w	800a728 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 800a4c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a4c2:	ecf3 1a01 	vldmia	r3!, {s3}
 800a4c6:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80ea 	beq.w	800a6a4 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 800a4d0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800a4d2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a4d4:	189a      	adds	r2, r3, r2
 800a4d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4d8:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800a4da:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800a4de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a4e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4e2:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a4e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f2c0 8115 	blt.w	800a71c <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 800a4f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a4f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a4fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4fc:	9c55      	ldr	r4, [sp, #340]	@ 0x154
 800a4fe:	4298      	cmp	r0, r3
 800a500:	bf94      	ite	ls
 800a502:	ebc6 0600 	rsbls	r6, r6, r0
 800a506:	ebc6 0603 	rsbhi	r6, r6, r3
 800a50a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a50c:	eba0 0906 	sub.w	r9, r0, r6
 800a510:	fb02 4203 	mla	r2, r2, r3, r4
 800a514:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800a516:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800a518:	f1bb 0f00 	cmp.w	fp, #0
 800a51c:	eba4 0a06 	sub.w	sl, r4, r6
 800a520:	eeb0 7a61 	vmov.f32	s14, s3
 800a524:	fb00 f606 	mul.w	r6, r0, r6
 800a528:	f340 80a1 	ble.w	800a66e <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 800a52c:	f026 070f 	bic.w	r7, r6, #15
 800a530:	f107 38ff 	add.w	r8, r7, #4294967295
 800a534:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800a538:	f108 0801 	add.w	r8, r8, #1
 800a53c:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800a540:	fb0a fa03 	mul.w	sl, sl, r3
 800a544:	fb09 f903 	mul.w	r9, r9, r3
 800a548:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800a54c:	f04f 0c00 	mov.w	ip, #0
 800a550:	2f00      	cmp	r7, #0
 800a552:	bfd8      	it	le
 800a554:	2500      	movle	r5, #0
 800a556:	dd70      	ble.n	800a63a <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 800a558:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800a55c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800a560:	2400      	movs	r4, #0
 800a562:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800a566:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800a56a:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800a56e:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800a572:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800a576:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 800a57a:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800a57e:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800a582:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800a586:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800a58a:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 800a58e:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800a592:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800a596:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a59a:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800a59e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5a2:	3410      	adds	r4, #16
 800a5a4:	42bc      	cmp	r4, r7
 800a5a6:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800a5aa:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800a5ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a5b2:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800a5b6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a5ba:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800a5be:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800a5c2:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a5c6:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800a5ca:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800a5ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5d2:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800a5d6:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800a5da:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5de:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800a5e2:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800a5e6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5ea:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800a5ee:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800a5f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a5f6:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800a5fa:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800a5fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a602:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800a606:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800a60a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a60e:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800a612:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800a616:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a61a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a61e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a622:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a626:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a62a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a62e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a632:	db96      	blt.n	800a562 <forward_lite_conv2d_if32of32wf32_pool+0x352>
 800a634:	4471      	add	r1, lr
 800a636:	4472      	add	r2, lr
 800a638:	4645      	mov	r5, r8
 800a63a:	42ae      	cmp	r6, r5
 800a63c:	dd10      	ble.n	800a660 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 800a63e:	462b      	mov	r3, r5
 800a640:	460c      	mov	r4, r1
 800a642:	4610      	mov	r0, r2
 800a644:	ecf0 6a01 	vldmia	r0!, {s13}
 800a648:	ecf4 7a01 	vldmia	r4!, {s15}
 800a64c:	3301      	adds	r3, #1
 800a64e:	429e      	cmp	r6, r3
 800a650:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a654:	d1f6      	bne.n	800a644 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 800a656:	1b75      	subs	r5, r6, r5
 800a658:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a65c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a660:	f10c 0c01 	add.w	ip, ip, #1
 800a664:	45e3      	cmp	fp, ip
 800a666:	4451      	add	r1, sl
 800a668:	444a      	add	r2, r9
 800a66a:	f47f af71 	bne.w	800a550 <forward_lite_conv2d_if32of32wf32_pool+0x340>
 800a66e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a670:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a672:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a674:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a676:	ed81 7a00 	vstr	s14, [r1]
 800a67a:	4410      	add	r0, r2
 800a67c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a67e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a680:	4401      	add	r1, r0
 800a682:	9110      	str	r1, [sp, #64]	@ 0x40
 800a684:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a686:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a688:	1a89      	subs	r1, r1, r2
 800a68a:	910e      	str	r1, [sp, #56]	@ 0x38
 800a68c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a68e:	4401      	add	r1, r0
 800a690:	910d      	str	r1, [sp, #52]	@ 0x34
 800a692:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a694:	1a8a      	subs	r2, r1, r2
 800a696:	920c      	str	r2, [sp, #48]	@ 0x30
 800a698:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a69a:	3301      	adds	r3, #1
 800a69c:	429a      	cmp	r2, r3
 800a69e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6a0:	f47f af23 	bne.w	800a4ea <forward_lite_conv2d_if32of32wf32_pool+0x2da>
 800a6a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6a6:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800a6a8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a6aa:	440a      	add	r2, r1
 800a6ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800a6ae:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	9326      	str	r3, [sp, #152]	@ 0x98
 800a6b6:	f47f aefa 	bne.w	800a4ae <forward_lite_conv2d_if32of32wf32_pool+0x29e>
 800a6ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd28      	ble.n	800a712 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 800a6c0:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8198 	beq.w	800a9f8 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 800a6c8:	e9dd 6a6a 	ldrd	r6, sl, [sp, #424]	@ 0x1a8
 800a6cc:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 800a6ce:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 800a6d2:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800a6d4:	f8dd b1b0 	ldr.w	fp, [sp, #432]	@ 0x1b0
 800a6d8:	4699      	mov	r9, r3
 800a6da:	2400      	movs	r4, #0
 800a6dc:	462b      	mov	r3, r5
 800a6de:	463a      	mov	r2, r7
 800a6e0:	4455      	add	r5, sl
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	47c8      	blx	r9
 800a6e8:	1bab      	subs	r3, r5, r6
 800a6ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6ec:	455b      	cmp	r3, fp
 800a6ee:	bfa8      	it	ge
 800a6f0:	4635      	movge	r5, r6
 800a6f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a6f4:	4490      	add	r8, r2
 800a6f6:	4543      	cmp	r3, r8
 800a6f8:	bf98      	it	ls
 800a6fa:	9b25      	ldrls	r3, [sp, #148]	@ 0x94
 800a6fc:	f104 0401 	add.w	r4, r4, #1
 800a700:	bf98      	it	ls
 800a702:	4498      	addls	r8, r3
 800a704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a706:	b224      	sxth	r4, r4
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d1e7      	bne.n	800a6dc <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 800a70c:	952f      	str	r5, [sp, #188]	@ 0xbc
 800a70e:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 800a712:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a714:	3301      	adds	r3, #1
 800a716:	b21b      	sxth	r3, r3
 800a718:	931d      	str	r3, [sp, #116]	@ 0x74
 800a71a:	e634      	b.n	800a386 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 800a71c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a71e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a720:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800a722:	4616      	mov	r6, r2
 800a724:	189a      	adds	r2, r3, r2
 800a726:	e6e7      	b.n	800a4f8 <forward_lite_conv2d_if32of32wf32_pool+0x2e8>
 800a728:	eef0 1a48 	vmov.f32	s3, s16
 800a72c:	e6cc      	b.n	800a4c8 <forward_lite_conv2d_if32of32wf32_pool+0x2b8>
 800a72e:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800a730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a732:	fb02 f303 	mul.w	r3, r2, r3
 800a736:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a738:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800a73c:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 800a73e:	429a      	cmp	r2, r3
 800a740:	bf84      	itt	hi
 800a742:	9a33      	ldrhi	r2, [sp, #204]	@ 0xcc
 800a744:	189b      	addhi	r3, r3, r2
 800a746:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 800a748:	429a      	cmp	r2, r3
 800a74a:	d217      	bcs.n	800a77c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 800a74c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800a74e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800a750:	428a      	cmp	r2, r1
 800a752:	d013      	beq.n	800a77c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 800a754:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a756:	429a      	cmp	r2, r3
 800a758:	d910      	bls.n	800a77c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 800a75a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a75c:	461a      	mov	r2, r3
 800a75e:	f852 0b04 	ldr.w	r0, [r2], #4
 800a762:	f841 0b04 	str.w	r0, [r1], #4
 800a766:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800a768:	4290      	cmp	r0, r2
 800a76a:	d8f8      	bhi.n	800a75e <forward_lite_conv2d_if32of32wf32_pool+0x54e>
 800a76c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	f023 0303 	bic.w	r3, r3, #3
 800a774:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a776:	3304      	adds	r3, #4
 800a778:	441a      	add	r2, r3
 800a77a:	921b      	str	r2, [sp, #108]	@ 0x6c
 800a77c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800a77e:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800a780:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 800a784:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 800a786:	440a      	add	r2, r1
 800a788:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800a78a:	1ad2      	subs	r2, r2, r3
 800a78c:	b212      	sxth	r2, r2
 800a78e:	440b      	add	r3, r1
 800a790:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a792:	9228      	str	r2, [sp, #160]	@ 0xa0
 800a794:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a796:	4401      	add	r1, r0
 800a798:	b21b      	sxth	r3, r3
 800a79a:	428a      	cmp	r2, r1
 800a79c:	931d      	str	r3, [sp, #116]	@ 0x74
 800a79e:	911b      	str	r1, [sp, #108]	@ 0x6c
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	f63f adf0 	bhi.w	800a386 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 800a7a6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a7a8:	440b      	add	r3, r1
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d9fc      	bls.n	800a7a8 <forward_lite_conv2d_if32of32wf32_pool+0x598>
 800a7ae:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a7b0:	e5e9      	b.n	800a386 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 800a7b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800a7b4:	2a00      	cmp	r2, #0
 800a7b6:	dd80      	ble.n	800a6ba <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800a7b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7ba:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 800a7bc:	fb02 f303 	mul.w	r3, r2, r3
 800a7c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7c2:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800a7c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a7c6:	9326      	str	r3, [sp, #152]	@ 0x98
 800a7c8:	189a      	adds	r2, r3, r2
 800a7ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7cc:	923e      	str	r2, [sp, #248]	@ 0xf8
 800a7ce:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a7d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7d2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800a7d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7d8:	440a      	add	r2, r1
 800a7da:	9240      	str	r2, [sp, #256]	@ 0x100
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 80fe 	beq.w	800a9de <forward_lite_conv2d_if32of32wf32_pool+0x7ce>
 800a7e2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a7e4:	ecf3 1a01 	vldmia	r3!, {s3}
 800a7e8:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a7ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 80e7 	beq.w	800a9c0 <forward_lite_conv2d_if32of32wf32_pool+0x7b0>
 800a7f2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800a7f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a7f6:	189a      	adds	r2, r3, r2
 800a7f8:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7fa:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800a7fc:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800a800:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a802:	9310      	str	r3, [sp, #64]	@ 0x40
 800a804:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a806:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a808:	2300      	movs	r3, #0
 800a80a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a80c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f2c0 80e8 	blt.w	800a9e4 <forward_lite_conv2d_if32of32wf32_pool+0x7d4>
 800a814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a816:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a818:	2000      	movs	r0, #0
 800a81a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a81c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a81e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a820:	428c      	cmp	r4, r1
 800a822:	bf94      	ite	ls
 800a824:	ebc0 0004 	rsbls	r0, r0, r4
 800a828:	ebc0 0001 	rsbhi	r0, r0, r1
 800a82c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800a82e:	eba4 0900 	sub.w	r9, r4, r0
 800a832:	fb03 5301 	mla	r3, r3, r1, r5
 800a836:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800a838:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a83a:	f1bb 0f00 	cmp.w	fp, #0
 800a83e:	eba5 0a00 	sub.w	sl, r5, r0
 800a842:	eeb0 7a61 	vmov.f32	s14, s3
 800a846:	fb04 f000 	mul.w	r0, r4, r0
 800a84a:	f340 809e 	ble.w	800a98a <forward_lite_conv2d_if32of32wf32_pool+0x77a>
 800a84e:	f020 080f 	bic.w	r8, r0, #15
 800a852:	f108 37ff 	add.w	r7, r8, #4294967295
 800a856:	093f      	lsrs	r7, r7, #4
 800a858:	3701      	adds	r7, #1
 800a85a:	01be      	lsls	r6, r7, #6
 800a85c:	fb0a fa01 	mul.w	sl, sl, r1
 800a860:	fb09 f901 	mul.w	r9, r9, r1
 800a864:	013f      	lsls	r7, r7, #4
 800a866:	2400      	movs	r4, #0
 800a868:	f1b8 0f00 	cmp.w	r8, #0
 800a86c:	bfd8      	it	le
 800a86e:	2100      	movle	r1, #0
 800a870:	dd72      	ble.n	800a958 <forward_lite_conv2d_if32of32wf32_pool+0x748>
 800a872:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 800a876:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a87a:	f04f 0c00 	mov.w	ip, #0
 800a87e:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 800a882:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 800a886:	ed15 6a10 	vldr	s12, [r5, #-64]	@ 0xffffffc0
 800a88a:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 800a88e:	ed55 4a0d 	vldr	s9, [r5, #-52]	@ 0xffffffcc
 800a892:	ed15 5a0c 	vldr	s10, [r5, #-48]	@ 0xffffffd0
 800a896:	ed15 3a0a 	vldr	s6, [r5, #-40]	@ 0xffffffd8
 800a89a:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 800a89e:	ed15 4a09 	vldr	s8, [r5, #-36]	@ 0xffffffdc
 800a8a2:	ed55 0a06 	vldr	s1, [r5, #-24]	@ 0xffffffe8
 800a8a6:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800a8aa:	ed15 2a05 	vldr	s4, [r5, #-20]	@ 0xffffffec
 800a8ae:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 800a8b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8b6:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800a8ba:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a8be:	f10c 0c10 	add.w	ip, ip, #16
 800a8c2:	45e0      	cmp	r8, ip
 800a8c4:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 800a8c8:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 800a8cc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a8d0:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 800a8d4:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800a8d8:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 800a8dc:	ed15 6a1b 	vldr	s12, [r5, #-108]	@ 0xffffff94
 800a8e0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a8e4:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800a8e8:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 800a8ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a8f0:	ed15 5a18 	vldr	s10, [r5, #-96]	@ 0xffffffa0
 800a8f4:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 800a8f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a8fc:	ed15 6a17 	vldr	s12, [r5, #-92]	@ 0xffffffa4
 800a900:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 800a904:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a908:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 800a90c:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800a910:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a914:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 800a918:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800a91c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a920:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 800a924:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800a928:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a92c:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 800a930:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800a934:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a938:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a93c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a940:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a944:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a948:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a94c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a950:	dc95      	bgt.n	800a87e <forward_lite_conv2d_if32of32wf32_pool+0x66e>
 800a952:	4432      	add	r2, r6
 800a954:	4433      	add	r3, r6
 800a956:	4639      	mov	r1, r7
 800a958:	4288      	cmp	r0, r1
 800a95a:	dd10      	ble.n	800a97e <forward_lite_conv2d_if32of32wf32_pool+0x76e>
 800a95c:	460d      	mov	r5, r1
 800a95e:	4696      	mov	lr, r2
 800a960:	469c      	mov	ip, r3
 800a962:	ecfc 6a01 	vldmia	ip!, {s13}
 800a966:	ecfe 7a01 	vldmia	lr!, {s15}
 800a96a:	3501      	adds	r5, #1
 800a96c:	42a8      	cmp	r0, r5
 800a96e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a972:	d1f6      	bne.n	800a962 <forward_lite_conv2d_if32of32wf32_pool+0x752>
 800a974:	1a41      	subs	r1, r0, r1
 800a976:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a97a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a97e:	3401      	adds	r4, #1
 800a980:	45a3      	cmp	fp, r4
 800a982:	4452      	add	r2, sl
 800a984:	444b      	add	r3, r9
 800a986:	f47f af6f 	bne.w	800a868 <forward_lite_conv2d_if32of32wf32_pool+0x658>
 800a98a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a98c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a98e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a992:	ed81 7a00 	vstr	s14, [r1]
 800a996:	4410      	add	r0, r2
 800a998:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a99a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a99c:	4401      	add	r1, r0
 800a99e:	9110      	str	r1, [sp, #64]	@ 0x40
 800a9a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9a2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a9a4:	1a89      	subs	r1, r1, r2
 800a9a6:	910e      	str	r1, [sp, #56]	@ 0x38
 800a9a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a9aa:	4401      	add	r1, r0
 800a9ac:	910d      	str	r1, [sp, #52]	@ 0x34
 800a9ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9b0:	1a8a      	subs	r2, r1, r2
 800a9b2:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9bc:	f47f af26 	bne.w	800a80c <forward_lite_conv2d_if32of32wf32_pool+0x5fc>
 800a9c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a9c2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800a9c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a9c6:	440a      	add	r2, r1
 800a9c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9ca:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	9326      	str	r3, [sp, #152]	@ 0x98
 800a9d2:	f43f ae72 	beq.w	800a6ba <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800a9d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f47f af02 	bne.w	800a7e2 <forward_lite_conv2d_if32of32wf32_pool+0x5d2>
 800a9de:	eef0 1a48 	vmov.f32	s3, s16
 800a9e2:	e702      	b.n	800a7ea <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 800a9e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9ee:	e714      	b.n	800a81a <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 800a9f0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a9f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9f4:	921c      	str	r2, [sp, #112]	@ 0x70
 800a9f6:	e532      	b.n	800a45e <forward_lite_conv2d_if32of32wf32_pool+0x24e>
 800a9f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a9fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a9fc:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800a9fe:	440a      	add	r2, r1
 800aa00:	4290      	cmp	r0, r2
 800aa02:	bf98      	it	ls
 800aa04:	9825      	ldrls	r0, [sp, #148]	@ 0x94
 800aa06:	f103 0301 	add.w	r3, r3, #1
 800aa0a:	bf98      	it	ls
 800aa0c:	1812      	addls	r2, r2, r0
 800aa0e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aa10:	b219      	sxth	r1, r3
 800aa12:	4281      	cmp	r1, r0
 800aa14:	dbf1      	blt.n	800a9fa <forward_lite_conv2d_if32of32wf32_pool+0x7ea>
 800aa16:	921b      	str	r2, [sp, #108]	@ 0x6c
 800aa18:	e67b      	b.n	800a712 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 800aa1a:	bf00      	nop

0800aa1c <forward_lite_nl_softmax_if32of32_kernel>:
 800aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa20:	2a01      	cmp	r2, #1
 800aa22:	ed2d 8b02 	vpush	{d8}
 800aa26:	4691      	mov	r9, r2
 800aa28:	ed91 8a00 	vldr	s16, [r1]
 800aa2c:	4698      	mov	r8, r3
 800aa2e:	d960      	bls.n	800aaf2 <forward_lite_nl_softmax_if32of32_kernel+0xd6>
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d14a      	bne.n	800aaca <forward_lite_nl_softmax_if32of32_kernel+0xae>
 800aa34:	1d0c      	adds	r4, r1, #4
 800aa36:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800aa3a:	ecf4 7a01 	vldmia	r4!, {s15}
 800aa3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa46:	bfb8      	it	lt
 800aa48:	eeb0 8a67 	vmovlt.f32	s16, s15
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	d1f4      	bne.n	800aa3a <forward_lite_nl_softmax_if32of32_kernel+0x1e>
 800aa50:	f04f 0a04 	mov.w	sl, #4
 800aa54:	eddf 8a29 	vldr	s17, [pc, #164]	@ 800aafc <forward_lite_nl_softmax_if32of32_kernel+0xe0>
 800aa58:	4607      	mov	r7, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	2500      	movs	r5, #0
 800aa60:	ed94 0a00 	vldr	s0, [r4]
 800aa64:	ee30 0a48 	vsub.f32	s0, s0, s16
 800aa68:	f001 fff0 	bl	800ca4c <expf>
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	45a9      	cmp	r9, r5
 800aa70:	ed86 0a00 	vstr	s0, [r6]
 800aa74:	ee78 8a80 	vadd.f32	s17, s17, s0
 800aa78:	4454      	add	r4, sl
 800aa7a:	4456      	add	r6, sl
 800aa7c:	d8f0      	bhi.n	800aa60 <forward_lite_nl_softmax_if32of32_kernel+0x44>
 800aa7e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	d011      	beq.n	800aaac <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800aa88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aa8c:	f1b8 0f01 	cmp.w	r8, #1
 800aa90:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800aa94:	f04f 0300 	mov.w	r3, #0
 800aa98:	d10c      	bne.n	800aab4 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	4599      	cmp	r9, r3
 800aa9e:	edd7 7a00 	vldr	s15, [r7]
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	ece7 7a01 	vstmia	r7!, {s15}
 800aaaa:	d8f6      	bhi.n	800aa9a <forward_lite_nl_softmax_if32of32_kernel+0x7e>
 800aaac:	ecbd 8b02 	vpop	{d8}
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab4:	edd7 7a00 	vldr	s15, [r7]
 800aab8:	3301      	adds	r3, #1
 800aaba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aabe:	4599      	cmp	r9, r3
 800aac0:	edc7 7a00 	vstr	s15, [r7]
 800aac4:	4457      	add	r7, sl
 800aac6:	d8f5      	bhi.n	800aab4 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800aac8:	e7f0      	b.n	800aaac <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800aaca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800aace:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800aad2:	2301      	movs	r3, #1
 800aad4:	edd2 7a00 	vldr	s15, [r2]
 800aad8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae0:	f103 0301 	add.w	r3, r3, #1
 800aae4:	bfb8      	it	lt
 800aae6:	eeb0 8a67 	vmovlt.f32	s16, s15
 800aaea:	4599      	cmp	r9, r3
 800aaec:	4452      	add	r2, sl
 800aaee:	d1f1      	bne.n	800aad4 <forward_lite_nl_softmax_if32of32_kernel+0xb8>
 800aaf0:	e7b0      	b.n	800aa54 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d0da      	beq.n	800aaac <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800aaf6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800aafa:	e7ab      	b.n	800aa54 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 800aafc:	00000000 	.word	0x00000000

0800ab00 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800ab00:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab04:	ed93 7a00 	vldr	s14, [r3]
 800ab08:	ed93 6a01 	vldr	s12, [r3, #4]
 800ab0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	d42a      	bmi.n	800ab6c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ab16:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ab1a:	3a01      	subs	r2, #1
 800ab1c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ab20:	4561      	cmp	r1, ip
 800ab22:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ab26:	d85d      	bhi.n	800abe4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800ab28:	1d11      	adds	r1, r2, #4
 800ab2a:	f10c 0304 	add.w	r3, ip, #4
 800ab2e:	4408      	add	r0, r1
 800ab30:	ebac 0202 	sub.w	r2, ip, r2
 800ab34:	e00c      	b.n	800ab50 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800ab36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ab42:	db01      	blt.n	800ab48 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800ab44:	ee65 7a86 	vmul.f32	s15, s11, s12
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	ed60 7a01 	vstmdb	r0!, {s15}
 800ab4e:	d00c      	beq.n	800ab6a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800ab50:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab54:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	daeb      	bge.n	800ab36 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800ab5e:	eef0 7a66 	vmov.f32	s15, s13
 800ab62:	4293      	cmp	r3, r2
 800ab64:	ed60 7a01 	vstmdb	r0!, {s15}
 800ab68:	d1f2      	bne.n	800ab50 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800ab6a:	4770      	bx	lr
 800ab6c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ab70:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ab74:	3a01      	subs	r2, #1
 800ab76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ab7e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ab82:	d017      	beq.n	800abb4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800ab84:	4561      	cmp	r1, ip
 800ab86:	d82d      	bhi.n	800abe4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800ab88:	1d11      	adds	r1, r2, #4
 800ab8a:	f10c 0304 	add.w	r3, ip, #4
 800ab8e:	4401      	add	r1, r0
 800ab90:	ebac 0202 	sub.w	r2, ip, r2
 800ab94:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab98:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ab9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800aba8:	d81d      	bhi.n	800abe6 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800abaa:	4293      	cmp	r3, r2
 800abac:	ed61 6a01 	vstmdb	r1!, {s13}
 800abb0:	d1f0      	bne.n	800ab94 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800abb2:	4770      	bx	lr
 800abb4:	4561      	cmp	r1, ip
 800abb6:	d815      	bhi.n	800abe4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800abb8:	1d11      	adds	r1, r2, #4
 800abba:	b500      	push	{lr}
 800abbc:	f10c 0304 	add.w	r3, ip, #4
 800abc0:	f04f 0e00 	mov.w	lr, #0
 800abc4:	4401      	add	r1, r0
 800abc6:	ebac 0202 	sub.w	r2, ip, r2
 800abca:	ed73 7a01 	vldmdb	r3!, {s15}
 800abce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd6:	d40b      	bmi.n	800abf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800abd8:	4293      	cmp	r3, r2
 800abda:	f841 ed04 	str.w	lr, [r1, #-4]!
 800abde:	d1f4      	bne.n	800abca <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800abe0:	f85d fb04 	ldr.w	pc, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	4293      	cmp	r3, r2
 800abe8:	ed61 7a01 	vstmdb	r1!, {s15}
 800abec:	d1d2      	bne.n	800ab94 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800abee:	4770      	bx	lr
 800abf0:	4293      	cmp	r3, r2
 800abf2:	ed61 7a01 	vstmdb	r1!, {s15}
 800abf6:	d1e8      	bne.n	800abca <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800abf8:	e7f2      	b.n	800abe0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800abfa:	bf00      	nop

0800abfc <pool_func_mp_array_f32>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	b093      	sub	sp, #76	@ 0x4c
 800ac02:	468b      	mov	fp, r1
 800ac04:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 800ac08:	9101      	str	r1, [sp, #4]
 800ac0a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800ac0e:	9105      	str	r1, [sp, #20]
 800ac10:	4691      	mov	r9, r2
 800ac12:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800ac16:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 800ac1a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800ac1e:	9106      	str	r1, [sp, #24]
 800ac20:	4698      	mov	r8, r3
 800ac22:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 800ac26:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800ac2a:	9404      	str	r4, [sp, #16]
 800ac2c:	9102      	str	r1, [sp, #8]
 800ac2e:	ea52 0403 	orrs.w	r4, r2, r3
 800ac32:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800ac36:	9103      	str	r1, [sp, #12]
 800ac38:	4682      	mov	sl, r0
 800ac3a:	d10b      	bne.n	800ac54 <pool_func_mp_array_f32+0x58>
 800ac3c:	9904      	ldr	r1, [sp, #16]
 800ac3e:	9d02      	ldr	r5, [sp, #8]
 800ac40:	9e05      	ldr	r6, [sp, #20]
 800ac42:	eba1 000b 	sub.w	r0, r1, fp
 800ac46:	3801      	subs	r0, #1
 800ac48:	1e69      	subs	r1, r5, #1
 800ac4a:	fb11 0106 	smlabb	r1, r1, r6, r0
 800ac4e:	0408      	lsls	r0, r1, #16
 800ac50:	f100 8083 	bmi.w	800ad5a <pool_func_mp_array_f32+0x15e>
 800ac54:	9903      	ldr	r1, [sp, #12]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d07c      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ac5a:	9902      	ldr	r1, [sp, #8]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	d079      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	d076      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ac66:	f1b8 0f01 	cmp.w	r8, #1
 800ac6a:	9901      	ldr	r1, [sp, #4]
 800ac6c:	f040 80e3 	bne.w	800ae36 <pool_func_mp_array_f32+0x23a>
 800ac70:	1a8a      	subs	r2, r1, r2
 800ac72:	9904      	ldr	r1, [sp, #16]
 800ac74:	1ac9      	subs	r1, r1, r3
 800ac76:	425b      	negs	r3, r3
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	9207      	str	r2, [sp, #28]
 800ac7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac80:	b28a      	uxth	r2, r1
 800ac82:	2300      	movs	r3, #0
 800ac84:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac86:	9308      	str	r3, [sp, #32]
 800ac88:	9a02      	ldr	r2, [sp, #8]
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
 800ac8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac90:	9a07      	ldr	r2, [sp, #28]
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	b21b      	sxth	r3, r3
 800ac98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac9a:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	@ 0x2c
 800ac9e:	f04f 0c00 	mov.w	ip, #0
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	b217      	sxth	r7, r2
 800aca6:	46e6      	mov	lr, ip
 800aca8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acac:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800acb0:	eddf 7aac 	vldr	s15, [pc, #688]	@ 800af64 <pool_func_mp_array_f32+0x368>
 800acb4:	428f      	cmp	r7, r1
 800acb6:	449e      	add	lr, r3
 800acb8:	fa0f f088 	sxth.w	r0, r8
 800acbc:	dd28      	ble.n	800ad10 <pool_func_mp_array_f32+0x114>
 800acbe:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 800acc2:	4286      	cmp	r6, r0
 800acc4:	da20      	bge.n	800ad08 <pool_func_mp_array_f32+0x10c>
 800acc6:	2900      	cmp	r1, #0
 800acc8:	fb0b f401 	mul.w	r4, fp, r1
 800accc:	db1c      	blt.n	800ad08 <pool_func_mp_array_f32+0x10c>
 800acce:	4549      	cmp	r1, r9
 800acd0:	da1a      	bge.n	800ad08 <pool_func_mp_array_f32+0x10c>
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	4633      	mov	r3, r6
 800acd6:	da05      	bge.n	800ace4 <pool_func_mp_array_f32+0xe8>
 800acd8:	3301      	adds	r3, #1
 800acda:	b21b      	sxth	r3, r3
 800acdc:	429d      	cmp	r5, r3
 800acde:	dcfb      	bgt.n	800acd8 <pool_func_mp_array_f32+0xdc>
 800ace0:	4283      	cmp	r3, r0
 800ace2:	da11      	bge.n	800ad08 <pool_func_mp_array_f32+0x10c>
 800ace4:	18e2      	adds	r2, r4, r3
 800ace6:	459b      	cmp	fp, r3
 800ace8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800acec:	dd08      	ble.n	800ad00 <pool_func_mp_array_f32+0x104>
 800acee:	ed92 7a00 	vldr	s14, [r2]
 800acf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfa:	bfb8      	it	lt
 800acfc:	eef0 7a47 	vmovlt.f32	s15, s14
 800ad00:	3301      	adds	r3, #1
 800ad02:	b21b      	sxth	r3, r3
 800ad04:	4283      	cmp	r3, r0
 800ad06:	dbed      	blt.n	800ace4 <pool_func_mp_array_f32+0xe8>
 800ad08:	3101      	adds	r1, #1
 800ad0a:	b209      	sxth	r1, r1
 800ad0c:	42b9      	cmp	r1, r7
 800ad0e:	dbd8      	blt.n	800acc2 <pool_func_mp_array_f32+0xc6>
 800ad10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad12:	9a05      	ldr	r2, [sp, #20]
 800ad14:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800ad18:	9b04      	ldr	r3, [sp, #16]
 800ad1a:	edce 7a00 	vstr	s15, [lr]
 800ad1e:	4413      	add	r3, r2
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	f10c 0c01 	add.w	ip, ip, #1
 800ad26:	9304      	str	r3, [sp, #16]
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	fa0f fc8c 	sxth.w	ip, ip
 800ad2e:	4490      	add	r8, r2
 800ad30:	4563      	cmp	r3, ip
 800ad32:	fa1f f888 	uxth.w	r8, r8
 800ad36:	46e6      	mov	lr, ip
 800ad38:	dcb6      	bgt.n	800aca8 <pool_func_mp_array_f32+0xac>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	b21a      	sxth	r2, r3
 800ad40:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 800ad44:	440b      	add	r3, r1
 800ad46:	9903      	ldr	r1, [sp, #12]
 800ad48:	9208      	str	r2, [sp, #32]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	4291      	cmp	r1, r2
 800ad4e:	9307      	str	r3, [sp, #28]
 800ad50:	4613      	mov	r3, r2
 800ad52:	dc99      	bgt.n	800ac88 <pool_func_mp_array_f32+0x8c>
 800ad54:	b013      	add	sp, #76	@ 0x4c
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	9901      	ldr	r1, [sp, #4]
 800ad5c:	9e03      	ldr	r6, [sp, #12]
 800ad5e:	9f06      	ldr	r7, [sp, #24]
 800ad60:	eba1 0009 	sub.w	r0, r1, r9
 800ad64:	3801      	subs	r0, #1
 800ad66:	1e71      	subs	r1, r6, #1
 800ad68:	fb11 0107 	smlabb	r1, r1, r7, r0
 800ad6c:	0409      	lsls	r1, r1, #16
 800ad6e:	f57f af71 	bpl.w	800ac54 <pool_func_mp_array_f32+0x58>
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d0ee      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	d0ec      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ad7a:	f1b8 0f00 	cmp.w	r8, #0
 800ad7e:	d0e9      	beq.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ad80:	f1b8 0f01 	cmp.w	r8, #1
 800ad84:	f040 80f0 	bne.w	800af68 <pool_func_mp_array_f32+0x36c>
 800ad88:	46a1      	mov	r9, r4
 800ad8a:	9407      	str	r4, [sp, #28]
 800ad8c:	46a0      	mov	r8, r4
 800ad8e:	9b02      	ldr	r3, [sp, #8]
 800ad90:	f8dd e010 	ldr.w	lr, [sp, #16]
 800ad94:	fb03 f308 	mul.w	r3, r3, r8
 800ad98:	2600      	movs	r6, #0
 800ad9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9c:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 800ada0:	fa0f f389 	sxth.w	r3, r9
 800ada4:	9308      	str	r3, [sp, #32]
 800ada6:	46b4      	mov	ip, r6
 800ada8:	4637      	mov	r7, r6
 800adaa:	9c08      	ldr	r4, [sp, #32]
 800adac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adae:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 800af64 <pool_func_mp_array_f32+0x368>
 800adb2:	4544      	cmp	r4, r8
 800adb4:	441f      	add	r7, r3
 800adb6:	b235      	sxth	r5, r6
 800adb8:	fa0f f08e 	sxth.w	r0, lr
 800adbc:	da17      	bge.n	800adee <pool_func_mp_array_f32+0x1f2>
 800adbe:	4285      	cmp	r5, r0
 800adc0:	da11      	bge.n	800ade6 <pool_func_mp_array_f32+0x1ea>
 800adc2:	fb04 520b 	mla	r2, r4, fp, r5
 800adc6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800adca:	462b      	mov	r3, r5
 800adcc:	ecb2 7a01 	vldmia	r2!, {s14}
 800add0:	3301      	adds	r3, #1
 800add2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	b219      	sxth	r1, r3
 800addc:	bfb8      	it	lt
 800adde:	eef0 7a47 	vmovlt.f32	s15, s14
 800ade2:	4281      	cmp	r1, r0
 800ade4:	dbf2      	blt.n	800adcc <pool_func_mp_array_f32+0x1d0>
 800ade6:	3401      	adds	r4, #1
 800ade8:	b224      	sxth	r4, r4
 800adea:	4544      	cmp	r4, r8
 800adec:	dbe7      	blt.n	800adbe <pool_func_mp_array_f32+0x1c2>
 800adee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800adf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adf4:	9b05      	ldr	r3, [sp, #20]
 800adf6:	edc7 7a00 	vstr	s15, [r7]
 800adfa:	449e      	add	lr, r3
 800adfc:	441e      	add	r6, r3
 800adfe:	f10c 0c01 	add.w	ip, ip, #1
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	fa0f fc8c 	sxth.w	ip, ip
 800ae08:	4563      	cmp	r3, ip
 800ae0a:	fa1f fe8e 	uxth.w	lr, lr
 800ae0e:	b2b6      	uxth	r6, r6
 800ae10:	4667      	mov	r7, ip
 800ae12:	dcca      	bgt.n	800adaa <pool_func_mp_array_f32+0x1ae>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	9906      	ldr	r1, [sp, #24]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	b21a      	sxth	r2, r3
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	9207      	str	r2, [sp, #28]
 800ae20:	440b      	add	r3, r1
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	4489      	add	r9, r1
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	fa1f f989 	uxth.w	r9, r9
 800ae30:	4690      	mov	r8, r2
 800ae32:	dcac      	bgt.n	800ad8e <pool_func_mp_array_f32+0x192>
 800ae34:	e78e      	b.n	800ad54 <pool_func_mp_array_f32+0x158>
 800ae36:	1a88      	subs	r0, r1, r2
 800ae38:	9904      	ldr	r1, [sp, #16]
 800ae3a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 800ae3e:	1ac9      	subs	r1, r1, r3
 800ae40:	4252      	negs	r2, r2
 800ae42:	425b      	negs	r3, r3
 800ae44:	b292      	uxth	r2, r2
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	b280      	uxth	r0, r0
 800ae4a:	9208      	str	r2, [sp, #32]
 800ae4c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae4e:	b28a      	uxth	r2, r1
 800ae50:	2300      	movs	r3, #0
 800ae52:	9007      	str	r0, [sp, #28]
 800ae54:	9210      	str	r2, [sp, #64]	@ 0x40
 800ae56:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae58:	9a02      	ldr	r2, [sp, #8]
 800ae5a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 800ae5e:	fb03 f302 	mul.w	r3, r3, r2
 800ae62:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ae66:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae68:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ae6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae6c:	9201      	str	r2, [sp, #4]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae72:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae74:	9204      	str	r2, [sp, #16]
 800ae76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae78:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 800ae7c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800ae80:	4413      	add	r3, r2
 800ae82:	fb08 f303 	mul.w	r3, r8, r3
 800ae86:	f04f 0e00 	mov.w	lr, #0
 800ae8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae8c:	4676      	mov	r6, lr
 800ae8e:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800ae92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae94:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800af64 <pool_func_mp_array_f32+0x368>
 800ae98:	4549      	cmp	r1, r9
 800ae9a:	da2f      	bge.n	800aefc <pool_func_mp_array_f32+0x300>
 800ae9c:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 800aea0:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 800aea4:	45a4      	cmp	ip, r4
 800aea6:	da23      	bge.n	800aef0 <pool_func_mp_array_f32+0x2f4>
 800aea8:	2900      	cmp	r1, #0
 800aeaa:	fb0b f501 	mul.w	r5, fp, r1
 800aeae:	db1f      	blt.n	800aef0 <pool_func_mp_array_f32+0x2f4>
 800aeb0:	4571      	cmp	r1, lr
 800aeb2:	da1d      	bge.n	800aef0 <pool_func_mp_array_f32+0x2f4>
 800aeb4:	f1bc 0f00 	cmp.w	ip, #0
 800aeb8:	4663      	mov	r3, ip
 800aeba:	da05      	bge.n	800aec8 <pool_func_mp_array_f32+0x2cc>
 800aebc:	3301      	adds	r3, #1
 800aebe:	b21b      	sxth	r3, r3
 800aec0:	429f      	cmp	r7, r3
 800aec2:	dcfb      	bgt.n	800aebc <pool_func_mp_array_f32+0x2c0>
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	da13      	bge.n	800aef0 <pool_func_mp_array_f32+0x2f4>
 800aec8:	18ea      	adds	r2, r5, r3
 800aeca:	fb08 6202 	mla	r2, r8, r2, r6
 800aece:	1c58      	adds	r0, r3, #1
 800aed0:	459b      	cmp	fp, r3
 800aed2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800aed6:	b203      	sxth	r3, r0
 800aed8:	dd08      	ble.n	800aeec <pool_func_mp_array_f32+0x2f0>
 800aeda:	ed92 7a00 	vldr	s14, [r2]
 800aede:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee6:	bfb8      	it	lt
 800aee8:	eef0 7a47 	vmovlt.f32	s15, s14
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	dbeb      	blt.n	800aec8 <pool_func_mp_array_f32+0x2cc>
 800aef0:	3101      	adds	r1, #1
 800aef2:	b209      	sxth	r1, r1
 800aef4:	4549      	cmp	r1, r9
 800aef6:	dbd5      	blt.n	800aea4 <pool_func_mp_array_f32+0x2a8>
 800aef8:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 800aefc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aefe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800af00:	f10e 0e01 	add.w	lr, lr, #1
 800af04:	4433      	add	r3, r6
 800af06:	fa0f fe8e 	sxth.w	lr, lr
 800af0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af0e:	45c6      	cmp	lr, r8
 800af10:	edc3 7a00 	vstr	s15, [r3]
 800af14:	4676      	mov	r6, lr
 800af16:	dbbc      	blt.n	800ae92 <pool_func_mp_array_f32+0x296>
 800af18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	9805      	ldr	r0, [sp, #20]
 800af1e:	3301      	adds	r3, #1
 800af20:	4402      	add	r2, r0
 800af22:	b219      	sxth	r1, r3
 800af24:	b292      	uxth	r2, r2
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	9201      	str	r2, [sp, #4]
 800af2a:	9a02      	ldr	r2, [sp, #8]
 800af2c:	910d      	str	r1, [sp, #52]	@ 0x34
 800af2e:	4403      	add	r3, r0
 800af30:	b29b      	uxth	r3, r3
 800af32:	428a      	cmp	r2, r1
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	460b      	mov	r3, r1
 800af38:	dc9d      	bgt.n	800ae76 <pool_func_mp_array_f32+0x27a>
 800af3a:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 800af3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af40:	4402      	add	r2, r0
 800af42:	3301      	adds	r3, #1
 800af44:	b219      	sxth	r1, r3
 800af46:	b292      	uxth	r2, r2
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	9207      	str	r2, [sp, #28]
 800af4c:	9a03      	ldr	r2, [sp, #12]
 800af4e:	910c      	str	r1, [sp, #48]	@ 0x30
 800af50:	4403      	add	r3, r0
 800af52:	b29b      	uxth	r3, r3
 800af54:	428a      	cmp	r2, r1
 800af56:	9308      	str	r3, [sp, #32]
 800af58:	460b      	mov	r3, r1
 800af5a:	f73f af7d 	bgt.w	800ae58 <pool_func_mp_array_f32+0x25c>
 800af5e:	b013      	add	sp, #76	@ 0x4c
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	cf000000 	.word	0xcf000000
 800af68:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800af6c:	46a4      	mov	ip, r4
 800af6e:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800af72:	9407      	str	r4, [sp, #28]
 800af74:	4623      	mov	r3, r4
 800af76:	9a02      	ldr	r2, [sp, #8]
 800af78:	f8dd e010 	ldr.w	lr, [sp, #16]
 800af7c:	fb03 f302 	mul.w	r3, r3, r2
 800af80:	930a      	str	r3, [sp, #40]	@ 0x28
 800af82:	fa0f f38c 	sxth.w	r3, ip
 800af86:	2400      	movs	r4, #0
 800af88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af8a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800af8e:	9308      	str	r3, [sp, #32]
 800af90:	4627      	mov	r7, r4
 800af92:	4623      	mov	r3, r4
 800af94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af96:	4413      	add	r3, r2
 800af98:	fb08 f303 	mul.w	r3, r8, r3
 800af9c:	2600      	movs	r6, #0
 800af9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800afa0:	fa0f fb84 	sxth.w	fp, r4
 800afa4:	fa0f f08e 	sxth.w	r0, lr
 800afa8:	4635      	mov	r5, r6
 800afaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afac:	9a08      	ldr	r2, [sp, #32]
 800afae:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800af64 <pool_func_mp_array_f32+0x368>
 800afb2:	4293      	cmp	r3, r2
 800afb4:	da20      	bge.n	800aff8 <pool_func_mp_array_f32+0x3fc>
 800afb6:	469a      	mov	sl, r3
 800afb8:	4583      	cmp	fp, r0
 800afba:	da16      	bge.n	800afea <pool_func_mp_array_f32+0x3ee>
 800afbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afc0:	fb03 b30a 	mla	r3, r3, sl, fp
 800afc4:	fb08 5303 	mla	r3, r8, r3, r5
 800afc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afcc:	465a      	mov	r2, fp
 800afce:	ed93 7a00 	vldr	s14, [r3]
 800afd2:	3201      	adds	r2, #1
 800afd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afdc:	b211      	sxth	r1, r2
 800afde:	bfb8      	it	lt
 800afe0:	eef0 7a47 	vmovlt.f32	s15, s14
 800afe4:	4281      	cmp	r1, r0
 800afe6:	444b      	add	r3, r9
 800afe8:	dbf1      	blt.n	800afce <pool_func_mp_array_f32+0x3d2>
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	f10a 0a01 	add.w	sl, sl, #1
 800aff0:	fa0f fa8a 	sxth.w	sl, sl
 800aff4:	459a      	cmp	sl, r3
 800aff6:	dbdf      	blt.n	800afb8 <pool_func_mp_array_f32+0x3bc>
 800aff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800affc:	3601      	adds	r6, #1
 800affe:	442b      	add	r3, r5
 800b000:	b236      	sxth	r6, r6
 800b002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b006:	4546      	cmp	r6, r8
 800b008:	edc3 7a00 	vstr	s15, [r3]
 800b00c:	4635      	mov	r5, r6
 800b00e:	dbcc      	blt.n	800afaa <pool_func_mp_array_f32+0x3ae>
 800b010:	9b05      	ldr	r3, [sp, #20]
 800b012:	9a02      	ldr	r2, [sp, #8]
 800b014:	3701      	adds	r7, #1
 800b016:	b23f      	sxth	r7, r7
 800b018:	449e      	add	lr, r3
 800b01a:	441c      	add	r4, r3
 800b01c:	42ba      	cmp	r2, r7
 800b01e:	fa1f fe8e 	uxth.w	lr, lr
 800b022:	b2a4      	uxth	r4, r4
 800b024:	463b      	mov	r3, r7
 800b026:	dcb5      	bgt.n	800af94 <pool_func_mp_array_f32+0x398>
 800b028:	9b07      	ldr	r3, [sp, #28]
 800b02a:	9906      	ldr	r1, [sp, #24]
 800b02c:	3301      	adds	r3, #1
 800b02e:	b21a      	sxth	r2, r3
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	9207      	str	r2, [sp, #28]
 800b034:	440b      	add	r3, r1
 800b036:	448c      	add	ip, r1
 800b038:	9903      	ldr	r1, [sp, #12]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	4291      	cmp	r1, r2
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	fa1f fc8c 	uxth.w	ip, ip
 800b044:	4613      	mov	r3, r2
 800b046:	dc96      	bgt.n	800af76 <pool_func_mp_array_f32+0x37a>
 800b048:	e684      	b.n	800ad54 <pool_func_mp_array_f32+0x158>
 800b04a:	bf00      	nop

0800b04c <forward_lite_dense_if32of32wf32>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800b054:	6801      	ldr	r1, [r0, #0]
 800b056:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
 800b05e:	b083      	sub	sp, #12
 800b060:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b064:	4299      	cmp	r1, r3
 800b066:	9100      	str	r1, [sp, #0]
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	f080 811e 	bcs.w	800b2aa <forward_lite_dense_if32of32wf32+0x25e>
 800b06e:	6904      	ldr	r4, [r0, #16]
 800b070:	4607      	mov	r7, r0
 800b072:	0096      	lsls	r6, r2, #2
 800b074:	9b00      	ldr	r3, [sp, #0]
 800b076:	68bd      	ldr	r5, [r7, #8]
 800b078:	eb03 0e06 	add.w	lr, r3, r6
 800b07c:	459e      	cmp	lr, r3
 800b07e:	461e      	mov	r6, r3
 800b080:	f240 8104 	bls.w	800b28c <forward_lite_dense_if32of32wf32+0x240>
 800b084:	f1a4 0c10 	sub.w	ip, r4, #16
 800b088:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800b08c:	f10c 0c01 	add.w	ip, ip, #1
 800b090:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800b094:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800b098:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800b09c:	2c0f      	cmp	r4, #15
 800b09e:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800b2fc <forward_lite_dense_if32of32wf32+0x2b0>
 800b0a2:	f240 8105 	bls.w	800b2b0 <forward_lite_dense_if32of32wf32+0x264>
 800b0a6:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800b0aa:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800b0b4:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800b0b8:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800b0bc:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800b0c0:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800b0c4:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800b0c8:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800b0cc:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800b0d0:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800b0d4:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800b0d8:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800b0dc:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800b0e0:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800b0e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b0e8:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800b0ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b0f0:	3910      	subs	r1, #16
 800b0f2:	290f      	cmp	r1, #15
 800b0f4:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800b0f8:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800b0fc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b100:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800b104:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b108:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800b10c:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800b110:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800b114:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800b118:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800b11c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b120:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800b124:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800b128:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b12c:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800b130:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800b134:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b138:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800b13c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800b140:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b144:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800b148:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800b14c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b150:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800b154:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800b158:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b15c:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800b160:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800b164:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b168:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b16c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b170:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b174:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b178:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b17c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b180:	d896      	bhi.n	800b0b0 <forward_lite_dense_if32of32wf32+0x64>
 800b182:	eb05 020b 	add.w	r2, r5, fp
 800b186:	f004 010f 	and.w	r1, r4, #15
 800b18a:	4663      	mov	r3, ip
 800b18c:	2903      	cmp	r1, #3
 800b18e:	d95f      	bls.n	800b250 <forward_lite_dense_if32of32wf32+0x204>
 800b190:	edd2 6a01 	vldr	s13, [r2, #4]
 800b194:	edd3 7a01 	vldr	s15, [r3, #4]
 800b198:	ed93 6a00 	vldr	s12, [r3]
 800b19c:	ed93 5a02 	vldr	s10, [r3, #8]
 800b1a0:	edd2 5a02 	vldr	s11, [r2, #8]
 800b1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b1a8:	edd2 6a00 	vldr	s13, [r2]
 800b1ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b1b0:	1f08      	subs	r0, r1, #4
 800b1b2:	2803      	cmp	r0, #3
 800b1b4:	ed93 6a03 	vldr	s12, [r3, #12]
 800b1b8:	edd2 6a03 	vldr	s13, [r2, #12]
 800b1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b1c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b1c8:	eeb0 7a67 	vmov.f32	s14, s15
 800b1cc:	d938      	bls.n	800b240 <forward_lite_dense_if32of32wf32+0x1f4>
 800b1ce:	edd2 6a05 	vldr	s13, [r2, #20]
 800b1d2:	edd3 7a05 	vldr	s15, [r3, #20]
 800b1d6:	ed93 6a04 	vldr	s12, [r3, #16]
 800b1da:	ed93 5a06 	vldr	s10, [r3, #24]
 800b1de:	edd2 5a06 	vldr	s11, [r2, #24]
 800b1e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b1e6:	edd2 6a04 	vldr	s13, [r2, #16]
 800b1ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b1ee:	f1a1 0a08 	sub.w	sl, r1, #8
 800b1f2:	f1ba 0f03 	cmp.w	sl, #3
 800b1f6:	ed93 6a07 	vldr	s12, [r3, #28]
 800b1fa:	edd2 6a07 	vldr	s13, [r2, #28]
 800b1fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b202:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b20a:	d919      	bls.n	800b240 <forward_lite_dense_if32of32wf32+0x1f4>
 800b20c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800b210:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800b214:	ed92 6a08 	vldr	s12, [r2, #32]
 800b218:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800b21c:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800b220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b224:	edd3 6a08 	vldr	s13, [r3, #32]
 800b228:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b22c:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800b230:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800b234:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b238:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b23c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b240:	0880      	lsrs	r0, r0, #2
 800b242:	3001      	adds	r0, #1
 800b244:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800b248:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b24c:	f001 0103 	and.w	r1, r1, #3
 800b250:	b1a9      	cbz	r1, 800b27e <forward_lite_dense_if32of32wf32+0x232>
 800b252:	edd3 6a00 	vldr	s13, [r3]
 800b256:	edd2 7a00 	vldr	s15, [r2]
 800b25a:	3901      	subs	r1, #1
 800b25c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b260:	d00d      	beq.n	800b27e <forward_lite_dense_if32of32wf32+0x232>
 800b262:	edd3 6a01 	vldr	s13, [r3, #4]
 800b266:	edd2 7a01 	vldr	s15, [r2, #4]
 800b26a:	2901      	cmp	r1, #1
 800b26c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b270:	d005      	beq.n	800b27e <forward_lite_dense_if32of32wf32+0x232>
 800b272:	edd2 6a02 	vldr	s13, [r2, #8]
 800b276:	edd3 7a02 	vldr	s15, [r3, #8]
 800b27a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b27e:	444d      	add	r5, r9
 800b280:	eca6 7a01 	vstmia	r6!, {s14}
 800b284:	45b6      	cmp	lr, r6
 800b286:	f63f af09 	bhi.w	800b09c <forward_lite_dense_if32of32wf32+0x50>
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	b99b      	cbnz	r3, 800b2b8 <forward_lite_dense_if32of32wf32+0x26c>
 800b290:	9b00      	ldr	r3, [sp, #0]
 800b292:	9901      	ldr	r1, [sp, #4]
 800b294:	693c      	ldr	r4, [r7, #16]
 800b296:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b29a:	4299      	cmp	r1, r3
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800b2a2:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800b2a6:	f63f aee5 	bhi.w	800b074 <forward_lite_dense_if32of32wf32+0x28>
 800b2aa:	b003      	add	sp, #12
 800b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4643      	mov	r3, r8
 800b2b6:	e769      	b.n	800b18c <forward_lite_dense_if32of32wf32+0x140>
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d0e9      	beq.n	800b290 <forward_lite_dense_if32of32wf32+0x244>
 800b2bc:	9a00      	ldr	r2, [sp, #0]
 800b2be:	ed93 7a00 	vldr	s14, [r3]
 800b2c2:	edd2 7a00 	vldr	s15, [r2]
 800b2c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	edc2 7a00 	vstr	s15, [r2]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	2a01      	cmp	r2, #1
 800b2d4:	d9dc      	bls.n	800b290 <forward_lite_dense_if32of32wf32+0x244>
 800b2d6:	1d19      	adds	r1, r3, #4
 800b2d8:	2301      	movs	r3, #1
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	ed91 7a00 	vldr	s14, [r1]
 800b2e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b2e4:	edd2 7a00 	vldr	s15, [r2]
 800b2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	ece1 7a01 	vstmia	r1!, {s15}
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d8f0      	bhi.n	800b2da <forward_lite_dense_if32of32wf32+0x28e>
 800b2f8:	e7ca      	b.n	800b290 <forward_lite_dense_if32of32wf32+0x244>
 800b2fa:	bf00      	nop
 800b2fc:	00000000 	.word	0x00000000

0800b300 <forward_lite_dense_if32of32wf32_lut4>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	b08d      	sub	sp, #52	@ 0x34
 800b306:	4605      	mov	r5, r0
 800b308:	9005      	str	r0, [sp, #20]
 800b30a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b30c:	4618      	mov	r0, r3
 800b30e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800b312:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800b314:	fb02 f303 	mul.w	r3, r2, r3
 800b318:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b31c:	460c      	mov	r4, r1
 800b31e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800b320:	9308      	str	r3, [sp, #32]
 800b322:	b126      	cbz	r6, 800b32e <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800b324:	2240      	movs	r2, #64	@ 0x40
 800b326:	4631      	mov	r1, r6
 800b328:	f000 fa98 	bl	800b85c <st_int8_copy>
 800b32c:	4630      	mov	r0, r6
 800b32e:	9b05      	ldr	r3, [sp, #20]
 800b330:	9a08      	ldr	r2, [sp, #32]
 800b332:	4293      	cmp	r3, r2
 800b334:	f080 80f5 	bcs.w	800b522 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800b338:	08eb      	lsrs	r3, r5, #3
 800b33a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	f005 0101 	and.w	r1, r5, #1
 800b342:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	f025 0801 	bic.w	r8, r5, #1
 800b34e:	9102      	str	r1, [sp, #8]
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	00a9      	lsls	r1, r5, #2
 800b354:	9b05      	ldr	r3, [sp, #20]
 800b356:	9207      	str	r2, [sp, #28]
 800b358:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800b35c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b35e:	f104 0b20 	add.w	fp, r4, #32
 800b362:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b364:	9a07      	ldr	r2, [sp, #28]
 800b366:	eb03 0902 	add.w	r9, r3, r2
 800b36a:	4599      	cmp	r9, r3
 800b36c:	f1ab 0220 	sub.w	r2, fp, #32
 800b370:	9206      	str	r2, [sp, #24]
 800b372:	f240 80d9 	bls.w	800b528 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800b376:	469e      	mov	lr, r3
 800b378:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b37a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b37e:	9303      	str	r3, [sp, #12]
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800b54c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 80b2 	beq.w	800b4f0 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	18d5      	adds	r5, r2, r3
 800b390:	465b      	mov	r3, fp
 800b392:	7814      	ldrb	r4, [r2, #0]
 800b394:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800b398:	7851      	ldrb	r1, [r2, #1]
 800b39a:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800b39e:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800b3a2:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800b3a6:	ed13 5a04 	vldr	s10, [r3, #-16]
 800b3aa:	ed53 5a03 	vldr	s11, [r3, #-12]
 800b3ae:	ed13 6a02 	vldr	s12, [r3, #-8]
 800b3b2:	ed53 6a01 	vldr	s13, [r3, #-4]
 800b3b6:	f004 060f 	and.w	r6, r4, #15
 800b3ba:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b3be:	edd6 7a00 	vldr	s15, [r6]
 800b3c2:	0924      	lsrs	r4, r4, #4
 800b3c4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b3c8:	ed94 3a00 	vldr	s6, [r4]
 800b3cc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800b3d0:	090c      	lsrs	r4, r1, #4
 800b3d2:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b3d6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b3da:	f001 010f 	and.w	r1, r1, #15
 800b3de:	edd4 3a00 	vldr	s7, [r4]
 800b3e2:	7894      	ldrb	r4, [r2, #2]
 800b3e4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b3e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3ec:	0926      	lsrs	r6, r4, #4
 800b3ee:	ed91 4a00 	vldr	s8, [r1]
 800b3f2:	78d1      	ldrb	r1, [r2, #3]
 800b3f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b3f8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b3fc:	f004 040f 	and.w	r4, r4, #15
 800b400:	edd6 4a00 	vldr	s9, [r6]
 800b404:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b408:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b40c:	3204      	adds	r2, #4
 800b40e:	ed94 5a00 	vldr	s10, [r4]
 800b412:	090c      	lsrs	r4, r1, #4
 800b414:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b418:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b41c:	f001 010f 	and.w	r1, r1, #15
 800b420:	edd4 5a00 	vldr	s11, [r4]
 800b424:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b42c:	42aa      	cmp	r2, r5
 800b42e:	ed91 6a00 	vldr	s12, [r1]
 800b432:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b436:	f103 0320 	add.w	r3, r3, #32
 800b43a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b43e:	d1a8      	bne.n	800b392 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800b440:	4656      	mov	r6, sl
 800b442:	4546      	cmp	r6, r8
 800b444:	d258      	bcs.n	800b4f8 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	1b9c      	subs	r4, r3, r6
 800b44a:	08e7      	lsrs	r7, r4, #3
 800b44c:	f106 0208 	add.w	r2, r6, #8
 800b450:	1e69      	subs	r1, r5, #1
 800b452:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800b456:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b45a:	ed52 5a01 	vldr	s11, [r2, #-4]
 800b45e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800b462:	f003 0c0f 	and.w	ip, r3, #15
 800b466:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b46a:	eddc 7a00 	vldr	s15, [ip]
 800b46e:	091b      	lsrs	r3, r3, #4
 800b470:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b474:	ed93 6a00 	vldr	s12, [r3]
 800b478:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b47c:	42a1      	cmp	r1, r4
 800b47e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b482:	f102 0208 	add.w	r2, r2, #8
 800b486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b48a:	d1e4      	bne.n	800b456 <forward_lite_dense_if32of32wf32_lut4+0x156>
 800b48c:	3701      	adds	r7, #1
 800b48e:	19ea      	adds	r2, r5, r7
 800b490:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	b30b      	cbz	r3, 800b4dc <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800b498:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b49c:	edd6 7a00 	vldr	s15, [r6]
 800b4a0:	091b      	lsrs	r3, r3, #4
 800b4a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b4a6:	edd3 6a00 	vldr	s13, [r3]
 800b4aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4ae:	ecae 7a01 	vstmia	lr!, {s14}
 800b4b2:	45f1      	cmp	r9, lr
 800b4b4:	f63f af64 	bhi.w	800b380 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800b4b8:	9b05      	ldr	r3, [sp, #20]
 800b4ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4bc:	1899      	adds	r1, r3, r2
 800b4be:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4c0:	b9e3      	cbnz	r3, 800b4fc <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800b4c2:	9b08      	ldr	r3, [sp, #32]
 800b4c4:	428b      	cmp	r3, r1
 800b4c6:	d92c      	bls.n	800b522 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800b4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ca:	4498      	add	r8, r3
 800b4cc:	449a      	add	sl, r3
 800b4ce:	449b      	add	fp, r3
 800b4d0:	9b05      	ldr	r3, [sp, #20]
 800b4d2:	4599      	cmp	r9, r3
 800b4d4:	d92a      	bls.n	800b52c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800b4d6:	9105      	str	r1, [sp, #20]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	e743      	b.n	800b364 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800b4dc:	ecae 7a01 	vstmia	lr!, {s14}
 800b4e0:	45f1      	cmp	r9, lr
 800b4e2:	d9e9      	bls.n	800b4b8 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800b4e4:	9b01      	ldr	r3, [sp, #4]
 800b4e6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b54c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f47f af4e 	bne.w	800b38c <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800b4f0:	9e06      	ldr	r6, [sp, #24]
 800b4f2:	4546      	cmp	r6, r8
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	d3a6      	bcc.n	800b446 <forward_lite_dense_if32of32wf32_lut4+0x146>
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	e7cb      	b.n	800b494 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800b4fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0df      	beq.n	800b4c2 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800b502:	9b07      	ldr	r3, [sp, #28]
 800b504:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b506:	1acb      	subs	r3, r1, r3
 800b508:	edd3 7a00 	vldr	s15, [r3]
 800b50c:	ecb2 7a01 	vldmia	r2!, {s14}
 800b510:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b514:	ece3 7a01 	vstmia	r3!, {s15}
 800b518:	428b      	cmp	r3, r1
 800b51a:	d1f5      	bne.n	800b508 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	428b      	cmp	r3, r1
 800b520:	d8d2      	bhi.n	800b4c8 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800b522:	b00d      	add	sp, #52	@ 0x34
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	4619      	mov	r1, r3
 800b52a:	e7c8      	b.n	800b4be <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800b52c:	9b07      	ldr	r3, [sp, #28]
 800b52e:	1acb      	subs	r3, r1, r3
 800b530:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b532:	461a      	mov	r2, r3
 800b534:	ed92 7a00 	vldr	s14, [r2]
 800b538:	ecf0 7a01 	vldmia	r0!, {s15}
 800b53c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b540:	ece2 7a01 	vstmia	r2!, {s15}
 800b544:	428a      	cmp	r2, r1
 800b546:	d1f5      	bne.n	800b534 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800b548:	e7f2      	b.n	800b530 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800b54a:	bf00      	nop
 800b54c:	00000000 	.word	0x00000000

0800b550 <forward_lite_dense_if32of32wf32_lut8>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	b087      	sub	sp, #28
 800b556:	460f      	mov	r7, r1
 800b558:	9204      	str	r2, [sp, #16]
 800b55a:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800b55e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b560:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800b562:	fb01 f202 	mul.w	r2, r1, r2
 800b566:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b56a:	4605      	mov	r5, r0
 800b56c:	9202      	str	r2, [sp, #8]
 800b56e:	b136      	cbz	r6, 800b57e <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800b570:	4618      	mov	r0, r3
 800b572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b576:	4631      	mov	r1, r6
 800b578:	f000 f970 	bl	800b85c <st_int8_copy>
 800b57c:	4633      	mov	r3, r6
 800b57e:	9a02      	ldr	r2, [sp, #8]
 800b580:	4295      	cmp	r5, r2
 800b582:	f080 80f9 	bcs.w	800b778 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800b586:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b588:	0092      	lsls	r2, r2, #2
 800b58a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800b58e:	9201      	str	r2, [sp, #4]
 800b590:	9205      	str	r2, [sp, #20]
 800b592:	462a      	mov	r2, r5
 800b594:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800b598:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800b59c:	464d      	mov	r5, r9
 800b59e:	4691      	mov	r9, r2
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	eb09 0e02 	add.w	lr, r9, r2
 800b5a6:	00a1      	lsls	r1, r4, #2
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	45ce      	cmp	lr, r9
 800b5ac:	f004 0007 	and.w	r0, r4, #7
 800b5b0:	9103      	str	r1, [sp, #12]
 800b5b2:	f1a7 0b20 	sub.w	fp, r7, #32
 800b5b6:	f240 80c8 	bls.w	800b74a <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800b5ba:	9a04      	ldr	r2, [sp, #16]
 800b5bc:	46cc      	mov	ip, r9
 800b5be:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800b7a8 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800b5c2:	2d00      	cmp	r5, #0
 800b5c4:	f000 80dd 	beq.w	800b782 <forward_lite_dense_if32of32wf32_lut8+0x232>
 800b5c8:	eb02 060a 	add.w	r6, r2, sl
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	7854      	ldrb	r4, [r2, #1]
 800b5d0:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800b5d4:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800b5d8:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 800b5dc:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 800b5e0:	ed11 5a04 	vldr	s10, [r1, #-16]
 800b5e4:	ed51 5a03 	vldr	s11, [r1, #-12]
 800b5e8:	ed11 6a02 	vldr	s12, [r1, #-8]
 800b5ec:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b5f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5f4:	edd4 7a00 	vldr	s15, [r4]
 800b5f8:	7814      	ldrb	r4, [r2, #0]
 800b5fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5fe:	ee67 7a83 	vmul.f32	s15, s15, s6
 800b602:	ed94 3a00 	vldr	s6, [r4]
 800b606:	7894      	ldrb	r4, [r2, #2]
 800b608:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b60c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b610:	3208      	adds	r2, #8
 800b612:	edd4 3a00 	vldr	s7, [r4]
 800b616:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800b61a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b61e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b622:	3120      	adds	r1, #32
 800b624:	ed94 4a00 	vldr	s8, [r4]
 800b628:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800b62c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b630:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b634:	edd4 4a00 	vldr	s9, [r4]
 800b638:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800b63c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b640:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b644:	ed94 5a00 	vldr	s10, [r4]
 800b648:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800b64c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b650:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b654:	edd4 5a00 	vldr	s11, [r4]
 800b658:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800b65c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b660:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b664:	42b2      	cmp	r2, r6
 800b666:	ed94 6a00 	vldr	s12, [r4]
 800b66a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b66e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b672:	d1ac      	bne.n	800b5ce <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800b674:	4642      	mov	r2, r8
 800b676:	2800      	cmp	r0, #0
 800b678:	f000 8081 	beq.w	800b77e <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800b67c:	7831      	ldrb	r1, [r6, #0]
 800b67e:	edd2 7a00 	vldr	s15, [r2]
 800b682:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b686:	edd1 6a00 	vldr	s13, [r1]
 800b68a:	2801      	cmp	r0, #1
 800b68c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b690:	d03f      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b692:	7871      	ldrb	r1, [r6, #1]
 800b694:	edd2 7a01 	vldr	s15, [r2, #4]
 800b698:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b69c:	edd1 6a00 	vldr	s13, [r1]
 800b6a0:	2802      	cmp	r0, #2
 800b6a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6a6:	d034      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b6a8:	78b1      	ldrb	r1, [r6, #2]
 800b6aa:	edd2 7a02 	vldr	s15, [r2, #8]
 800b6ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b6b2:	edd1 6a00 	vldr	s13, [r1]
 800b6b6:	2803      	cmp	r0, #3
 800b6b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6bc:	d029      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b6be:	78f1      	ldrb	r1, [r6, #3]
 800b6c0:	edd2 6a03 	vldr	s13, [r2, #12]
 800b6c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b6c8:	edd1 7a00 	vldr	s15, [r1]
 800b6cc:	2804      	cmp	r0, #4
 800b6ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6d2:	d01e      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b6d4:	7931      	ldrb	r1, [r6, #4]
 800b6d6:	edd2 6a04 	vldr	s13, [r2, #16]
 800b6da:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b6de:	edd1 7a00 	vldr	s15, [r1]
 800b6e2:	2805      	cmp	r0, #5
 800b6e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6e8:	d013      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b6ea:	7971      	ldrb	r1, [r6, #5]
 800b6ec:	edd2 6a05 	vldr	s13, [r2, #20]
 800b6f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b6f4:	edd1 7a00 	vldr	s15, [r1]
 800b6f8:	2806      	cmp	r0, #6
 800b6fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6fe:	d008      	beq.n	800b712 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800b700:	edd2 7a06 	vldr	s15, [r2, #24]
 800b704:	79b2      	ldrb	r2, [r6, #6]
 800b706:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b70a:	edd2 6a00 	vldr	s13, [r2]
 800b70e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b712:	1832      	adds	r2, r6, r0
 800b714:	ecac 7a01 	vstmia	ip!, {s14}
 800b718:	45e6      	cmp	lr, ip
 800b71a:	f63f af50 	bhi.w	800b5be <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	eb09 0402 	add.w	r4, r9, r2
 800b724:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b726:	b9a2      	cbnz	r2, 800b752 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800b728:	9a02      	ldr	r2, [sp, #8]
 800b72a:	42a2      	cmp	r2, r4
 800b72c:	d924      	bls.n	800b778 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800b72e:	9a03      	ldr	r2, [sp, #12]
 800b730:	45ce      	cmp	lr, r9
 800b732:	4490      	add	r8, r2
 800b734:	4417      	add	r7, r2
 800b736:	d927      	bls.n	800b788 <forward_lite_dense_if32of32wf32_lut8+0x238>
 800b738:	9a01      	ldr	r2, [sp, #4]
 800b73a:	46a1      	mov	r9, r4
 800b73c:	eb09 0e02 	add.w	lr, r9, r2
 800b740:	45ce      	cmp	lr, r9
 800b742:	f1a7 0b20 	sub.w	fp, r7, #32
 800b746:	f63f af38 	bhi.w	800b5ba <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800b74a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b74c:	464c      	mov	r4, r9
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d0ea      	beq.n	800b728 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800b752:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b754:	2a00      	cmp	r2, #0
 800b756:	d0e7      	beq.n	800b728 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b75c:	1aa2      	subs	r2, r4, r2
 800b75e:	edd2 7a00 	vldr	s15, [r2]
 800b762:	ecb1 7a01 	vldmia	r1!, {s14}
 800b766:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b76a:	ece2 7a01 	vstmia	r2!, {s15}
 800b76e:	4294      	cmp	r4, r2
 800b770:	d1f5      	bne.n	800b75e <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800b772:	9a02      	ldr	r2, [sp, #8]
 800b774:	42a2      	cmp	r2, r4
 800b776:	d8da      	bhi.n	800b72e <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800b778:	b007      	add	sp, #28
 800b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77e:	4632      	mov	r2, r6
 800b780:	e7c8      	b.n	800b714 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800b782:	4616      	mov	r6, r2
 800b784:	465a      	mov	r2, fp
 800b786:	e776      	b.n	800b676 <forward_lite_dense_if32of32wf32_lut8+0x126>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	1ae3      	subs	r3, r4, r3
 800b78c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b78e:	461a      	mov	r2, r3
 800b790:	ed92 7a00 	vldr	s14, [r2]
 800b794:	ecf1 7a01 	vldmia	r1!, {s15}
 800b798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b79c:	ece2 7a01 	vstmia	r2!, {s15}
 800b7a0:	42a2      	cmp	r2, r4
 800b7a2:	d1f5      	bne.n	800b790 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800b7a4:	e7f2      	b.n	800b78c <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800b7a6:	bf00      	nop
 800b7a8:	00000000 	.word	0x00000000

0800b7ac <forward_lite_nl_relu_if32of32>:
 800b7ac:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800b7b6:	4561      	cmp	r1, ip
 800b7b8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b7bc:	d814      	bhi.n	800b7e8 <forward_lite_nl_relu_if32of32+0x3c>
 800b7be:	1d11      	adds	r1, r2, #4
 800b7c0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b7ec <forward_lite_nl_relu_if32of32+0x40>
 800b7c4:	f10c 0304 	add.w	r3, ip, #4
 800b7c8:	4408      	add	r0, r1
 800b7ca:	ebac 0202 	sub.w	r2, ip, r2
 800b7ce:	ed73 7a01 	vldmdb	r3!, {s15}
 800b7d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7da:	bfb8      	it	lt
 800b7dc:	eef0 7a47 	vmovlt.f32	s15, s14
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	ed60 7a01 	vstmdb	r0!, {s15}
 800b7e6:	d1f2      	bne.n	800b7ce <forward_lite_nl_relu_if32of32+0x22>
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <forward_lite_nl_softmax_if32of32>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	469b      	mov	fp, r3
 800b7fc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800b7fe:	fbb2 f3f7 	udiv	r3, r2, r7
 800b802:	42ba      	cmp	r2, r7
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	d326      	bcc.n	800b856 <forward_lite_nl_softmax_if32of32+0x66>
 800b808:	fb07 f30b 	mul.w	r3, r7, fp
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	f1bb 0f00 	cmp.w	fp, #0
 800b814:	d01f      	beq.n	800b856 <forward_lite_nl_softmax_if32of32+0x66>
 800b816:	970c      	str	r7, [sp, #48]	@ 0x30
 800b818:	465f      	mov	r7, fp
 800b81a:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 800b81e:	4680      	mov	r8, r0
 800b820:	4689      	mov	r9, r1
 800b822:	f04f 0a00 	mov.w	sl, #0
 800b826:	464e      	mov	r6, r9
 800b828:	4645      	mov	r5, r8
 800b82a:	2400      	movs	r4, #0
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	463b      	mov	r3, r7
 800b832:	3401      	adds	r4, #1
 800b834:	465a      	mov	r2, fp
 800b836:	f7ff f8f1 	bl	800aa1c <forward_lite_nl_softmax_if32of32_kernel>
 800b83a:	42a7      	cmp	r7, r4
 800b83c:	f106 0604 	add.w	r6, r6, #4
 800b840:	f105 0504 	add.w	r5, r5, #4
 800b844:	d1f2      	bne.n	800b82c <forward_lite_nl_softmax_if32of32+0x3c>
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	4499      	add	r9, r3
 800b84a:	4498      	add	r8, r3
 800b84c:	9b00      	ldr	r3, [sp, #0]
 800b84e:	f10a 0a01 	add.w	sl, sl, #1
 800b852:	4553      	cmp	r3, sl
 800b854:	d8e7      	bhi.n	800b826 <forward_lite_nl_softmax_if32of32+0x36>
 800b856:	b003      	add	sp, #12
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b85c <st_int8_copy>:
 800b85c:	4288      	cmp	r0, r1
 800b85e:	d022      	beq.n	800b8a6 <st_int8_copy+0x4a>
 800b860:	b30a      	cbz	r2, 800b8a6 <st_int8_copy+0x4a>
 800b862:	4288      	cmp	r0, r1
 800b864:	d312      	bcc.n	800b88c <st_int8_copy+0x30>
 800b866:	2a03      	cmp	r2, #3
 800b868:	d81e      	bhi.n	800b8a8 <st_int8_copy+0x4c>
 800b86a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b86e:	f801 3b01 	strb.w	r3, [r1], #1
 800b872:	2a01      	cmp	r2, #1
 800b874:	d017      	beq.n	800b8a6 <st_int8_copy+0x4a>
 800b876:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b87a:	f801 3b01 	strb.w	r3, [r1], #1
 800b87e:	2a02      	cmp	r2, #2
 800b880:	d011      	beq.n	800b8a6 <st_int8_copy+0x4a>
 800b882:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b886:	f801 3b01 	strb.w	r3, [r1], #1
 800b88a:	4770      	bx	lr
 800b88c:	1883      	adds	r3, r0, r2
 800b88e:	4299      	cmp	r1, r3
 800b890:	d2e9      	bcs.n	800b866 <st_int8_copy+0xa>
 800b892:	4298      	cmp	r0, r3
 800b894:	440a      	add	r2, r1
 800b896:	d206      	bcs.n	800b8a6 <st_int8_copy+0x4a>
 800b898:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800b89c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b8a0:	4298      	cmp	r0, r3
 800b8a2:	d1f9      	bne.n	800b898 <st_int8_copy+0x3c>
 800b8a4:	4770      	bx	lr
 800b8a6:	4770      	bx	lr
 800b8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	f001 0403 	and.w	r4, r1, #3
 800b8b0:	f1c4 0304 	rsb	r3, r4, #4
 800b8b4:	f000 0e03 	and.w	lr, r0, #3
 800b8b8:	eba2 0c03 	sub.w	ip, r2, r3
 800b8bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b8c0:	f801 3b01 	strb.w	r3, [r1], #1
 800b8c4:	2c03      	cmp	r4, #3
 800b8c6:	f1c4 0202 	rsb	r2, r4, #2
 800b8ca:	d00e      	beq.n	800b8ea <st_int8_copy+0x8e>
 800b8cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b8d0:	f801 3b01 	strb.w	r3, [r1], #1
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	dd08      	ble.n	800b8ea <st_int8_copy+0x8e>
 800b8d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b8dc:	f801 3b01 	strb.w	r3, [r1], #1
 800b8e0:	b91c      	cbnz	r4, 800b8ea <st_int8_copy+0x8e>
 800b8e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b8e6:	f801 3b01 	strb.w	r3, [r1], #1
 800b8ea:	4574      	cmp	r4, lr
 800b8ec:	d02b      	beq.n	800b946 <st_int8_copy+0xea>
 800b8ee:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800b8f2:	1e5a      	subs	r2, r3, #1
 800b8f4:	b153      	cbz	r3, 800b90c <st_int8_copy+0xb0>
 800b8f6:	f850 3b04 	ldr.w	r3, [r0], #4
 800b8fa:	f850 4b04 	ldr.w	r4, [r0], #4
 800b8fe:	f850 5b04 	ldr.w	r5, [r0], #4
 800b902:	f850 6b04 	ldr.w	r6, [r0], #4
 800b906:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b908:	3a01      	subs	r2, #1
 800b90a:	d2f4      	bcs.n	800b8f6 <st_int8_copy+0x9a>
 800b90c:	f01c 0f08 	tst.w	ip, #8
 800b910:	d004      	beq.n	800b91c <st_int8_copy+0xc0>
 800b912:	f850 3b04 	ldr.w	r3, [r0], #4
 800b916:	f850 4b04 	ldr.w	r4, [r0], #4
 800b91a:	c118      	stmia	r1!, {r3, r4}
 800b91c:	f01c 0f04 	tst.w	ip, #4
 800b920:	d003      	beq.n	800b92a <st_int8_copy+0xce>
 800b922:	f850 3b04 	ldr.w	r3, [r0], #4
 800b926:	f841 3b04 	str.w	r3, [r1], #4
 800b92a:	f01c 0f02 	tst.w	ip, #2
 800b92e:	d003      	beq.n	800b938 <st_int8_copy+0xdc>
 800b930:	f830 3b02 	ldrh.w	r3, [r0], #2
 800b934:	f821 3b02 	strh.w	r3, [r1], #2
 800b938:	f01c 0f01 	tst.w	ip, #1
 800b93c:	d001      	beq.n	800b942 <st_int8_copy+0xe6>
 800b93e:	7803      	ldrb	r3, [r0, #0]
 800b940:	700b      	strb	r3, [r1, #0]
 800b942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b946:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800b94a:	f103 39ff 	add.w	r9, r3, #4294967295
 800b94e:	b183      	cbz	r3, 800b972 <st_int8_copy+0x116>
 800b950:	4688      	mov	r8, r1
 800b952:	4686      	mov	lr, r0
 800b954:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b958:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b95c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b960:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b964:	f109 39ff 	add.w	r9, r9, #4294967295
 800b968:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b96c:	4641      	mov	r1, r8
 800b96e:	4670      	mov	r0, lr
 800b970:	d1ee      	bne.n	800b950 <st_int8_copy+0xf4>
 800b972:	f01c 0f20 	tst.w	ip, #32
 800b976:	d007      	beq.n	800b988 <st_int8_copy+0x12c>
 800b978:	4688      	mov	r8, r1
 800b97a:	4686      	mov	lr, r0
 800b97c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b980:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b984:	4641      	mov	r1, r8
 800b986:	4670      	mov	r0, lr
 800b988:	f01c 0f10 	tst.w	ip, #16
 800b98c:	d001      	beq.n	800b992 <st_int8_copy+0x136>
 800b98e:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800b990:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b992:	f01c 0f08 	tst.w	ip, #8
 800b996:	d0c1      	beq.n	800b91c <st_int8_copy+0xc0>
 800b998:	c818      	ldmia	r0!, {r3, r4}
 800b99a:	c118      	stmia	r1!, {r3, r4}
 800b99c:	e7be      	b.n	800b91c <st_int8_copy+0xc0>
 800b99e:	bf00      	nop

0800b9a0 <ai_array_to_buffer_fmt>:
 800b9a0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d055      	beq.n	800ba54 <ai_array_to_buffer_fmt+0xb4>
 800b9a8:	4a2d      	ldr	r2, [pc, #180]	@ (800ba60 <ai_array_to_buffer_fmt+0xc0>)
 800b9aa:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d010      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9b2:	dc21      	bgt.n	800b9f8 <ai_array_to_buffer_fmt+0x58>
 800b9b4:	4a2b      	ldr	r2, [pc, #172]	@ (800ba64 <ai_array_to_buffer_fmt+0xc4>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00c      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9ba:	dd0f      	ble.n	800b9dc <ai_array_to_buffer_fmt+0x3c>
 800b9bc:	4a2a      	ldr	r2, [pc, #168]	@ (800ba68 <ai_array_to_buffer_fmt+0xc8>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d008      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9c2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d004      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9ca:	4a28      	ldr	r2, [pc, #160]	@ (800ba6c <ai_array_to_buffer_fmt+0xcc>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	bf0c      	ite	eq
 800b9d0:	4613      	moveq	r3, r2
 800b9d2:	2340      	movne	r3, #64	@ 0x40
 800b9d4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b9d8:	4318      	orrs	r0, r3
 800b9da:	4770      	bx	lr
 800b9dc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d0f7      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9e4:	dd2c      	ble.n	800ba40 <ai_array_to_buffer_fmt+0xa0>
 800b9e6:	4a22      	ldr	r2, [pc, #136]	@ (800ba70 <ai_array_to_buffer_fmt+0xd0>)
 800b9e8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	bf0c      	ite	eq
 800b9f0:	4613      	moveq	r3, r2
 800b9f2:	2340      	movne	r3, #64	@ 0x40
 800b9f4:	4318      	orrs	r0, r3
 800b9f6:	4770      	bx	lr
 800b9f8:	4a1e      	ldr	r2, [pc, #120]	@ (800ba74 <ai_array_to_buffer_fmt+0xd4>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d0ea      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800b9fe:	dd10      	ble.n	800ba22 <ai_array_to_buffer_fmt+0x82>
 800ba00:	4a1d      	ldr	r2, [pc, #116]	@ (800ba78 <ai_array_to_buffer_fmt+0xd8>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d0e6      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba06:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d0e2      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba0e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800ba12:	4293      	cmp	r3, r2
 800ba14:	bf0c      	ite	eq
 800ba16:	4613      	moveq	r3, r2
 800ba18:	2340      	movne	r3, #64	@ 0x40
 800ba1a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800ba1e:	4318      	orrs	r0, r3
 800ba20:	4770      	bx	lr
 800ba22:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d0d4      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba2a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d0d0      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba32:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800ba36:	4293      	cmp	r3, r2
 800ba38:	bf0c      	ite	eq
 800ba3a:	4613      	moveq	r3, r2
 800ba3c:	2340      	movne	r3, #64	@ 0x40
 800ba3e:	e7c9      	b.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba40:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d0c5      	beq.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba48:	3280      	adds	r2, #128	@ 0x80
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bf0c      	ite	eq
 800ba4e:	4613      	moveq	r3, r2
 800ba50:	2340      	movne	r3, #64	@ 0x40
 800ba52:	e7bf      	b.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba54:	4b09      	ldr	r3, [pc, #36]	@ (800ba7c <ai_array_to_buffer_fmt+0xdc>)
 800ba56:	4003      	ands	r3, r0
 800ba58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba5c:	e7ba      	b.n	800b9d4 <ai_array_to_buffer_fmt+0x34>
 800ba5e:	bf00      	nop
 800ba60:	00821040 	.word	0x00821040
 800ba64:	00040840 	.word	0x00040840
 800ba68:	00041040 	.word	0x00041040
 800ba6c:	0004084f 	.word	0x0004084f
 800ba70:	00040447 	.word	0x00040447
 800ba74:	00840447 	.word	0x00840447
 800ba78:	0084084f 	.word	0x0084084f
 800ba7c:	00803fff 	.word	0x00803fff

0800ba80 <ai_array_get_byte_size>:
 800ba80:	b319      	cbz	r1, 800baca <ai_array_get_byte_size+0x4a>
 800ba82:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ba86:	b500      	push	{lr}
 800ba88:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800ba8c:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 800ba90:	fb03 f101 	mul.w	r1, r3, r1
 800ba94:	fa42 f20e 	asr.w	r2, r2, lr
 800ba98:	07d2      	lsls	r2, r2, #31
 800ba9a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800ba9e:	f101 0107 	add.w	r1, r1, #7
 800baa2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800baa6:	bf58      	it	pl
 800baa8:	f000 007f 	andpl.w	r0, r0, #127	@ 0x7f
 800baac:	f021 0107 	bic.w	r1, r1, #7
 800bab0:	bf58      	it	pl
 800bab2:	fa40 f00c 	asrpl.w	r0, r0, ip
 800bab6:	fa21 f10c 	lsr.w	r1, r1, ip
 800baba:	bf54      	ite	pl
 800babc:	4083      	lslpl	r3, r0
 800babe:	2300      	movmi	r3, #0
 800bac0:	3107      	adds	r1, #7
 800bac2:	4419      	add	r1, r3
 800bac4:	08c8      	lsrs	r0, r1, #3
 800bac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800baca:	4608      	mov	r0, r1
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop

0800bad0 <ai_array_get_data_byte_size>:
 800bad0:	b169      	cbz	r1, 800baee <ai_array_get_data_byte_size+0x1e>
 800bad2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bad6:	fb03 f101 	mul.w	r1, r3, r1
 800bada:	1dcb      	adds	r3, r1, #7
 800badc:	f023 0307 	bic.w	r3, r3, #7
 800bae0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800bae4:	fa23 f000 	lsr.w	r0, r3, r0
 800bae8:	3007      	adds	r0, #7
 800baea:	08c0      	lsrs	r0, r0, #3
 800baec:	4770      	bx	lr
 800baee:	4608      	mov	r0, r1
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop

0800baf4 <ai_version_get>:
 800baf4:	0212      	lsls	r2, r2, #8
 800baf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bafa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800bafe:	4770      	bx	lr

0800bb00 <get_tensor_byte_size>:
 800bb00:	b410      	push	{r4}
 800bb02:	6983      	ldr	r3, [r0, #24]
 800bb04:	68c4      	ldr	r4, [r0, #12]
 800bb06:	6941      	ldr	r1, [r0, #20]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68e0      	ldr	r0, [r4, #12]
 800bb0c:	4a07      	ldr	r2, [pc, #28]	@ (800bb2c <get_tensor_byte_size+0x2c>)
 800bb0e:	68c9      	ldr	r1, [r1, #12]
 800bb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb14:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800bb18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bb1c:	fb01 f000 	mul.w	r0, r1, r0
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bf04      	itt	eq
 800bb24:	3007      	addeq	r0, #7
 800bb26:	08c0      	lsreq	r0, r0, #3
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	000400c0 	.word	0x000400c0

0800bb30 <sbrk_aligned>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4e0f      	ldr	r6, [pc, #60]	@ (800bb70 <sbrk_aligned+0x40>)
 800bb34:	460c      	mov	r4, r1
 800bb36:	6831      	ldr	r1, [r6, #0]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	b911      	cbnz	r1, 800bb42 <sbrk_aligned+0x12>
 800bb3c:	f000 faec 	bl	800c118 <_sbrk_r>
 800bb40:	6030      	str	r0, [r6, #0]
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 fae7 	bl	800c118 <_sbrk_r>
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	d103      	bne.n	800bb56 <sbrk_aligned+0x26>
 800bb4e:	f04f 34ff 	mov.w	r4, #4294967295
 800bb52:	4620      	mov	r0, r4
 800bb54:	bd70      	pop	{r4, r5, r6, pc}
 800bb56:	1cc4      	adds	r4, r0, #3
 800bb58:	f024 0403 	bic.w	r4, r4, #3
 800bb5c:	42a0      	cmp	r0, r4
 800bb5e:	d0f8      	beq.n	800bb52 <sbrk_aligned+0x22>
 800bb60:	1a21      	subs	r1, r4, r0
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 fad8 	bl	800c118 <_sbrk_r>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d1f2      	bne.n	800bb52 <sbrk_aligned+0x22>
 800bb6c:	e7ef      	b.n	800bb4e <sbrk_aligned+0x1e>
 800bb6e:	bf00      	nop
 800bb70:	20002060 	.word	0x20002060

0800bb74 <_malloc_r>:
 800bb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb78:	1ccd      	adds	r5, r1, #3
 800bb7a:	f025 0503 	bic.w	r5, r5, #3
 800bb7e:	3508      	adds	r5, #8
 800bb80:	2d0c      	cmp	r5, #12
 800bb82:	bf38      	it	cc
 800bb84:	250c      	movcc	r5, #12
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	4606      	mov	r6, r0
 800bb8a:	db01      	blt.n	800bb90 <_malloc_r+0x1c>
 800bb8c:	42a9      	cmp	r1, r5
 800bb8e:	d904      	bls.n	800bb9a <_malloc_r+0x26>
 800bb90:	230c      	movs	r3, #12
 800bb92:	6033      	str	r3, [r6, #0]
 800bb94:	2000      	movs	r0, #0
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc70 <_malloc_r+0xfc>
 800bb9e:	f000 f869 	bl	800bc74 <__malloc_lock>
 800bba2:	f8d8 3000 	ldr.w	r3, [r8]
 800bba6:	461c      	mov	r4, r3
 800bba8:	bb44      	cbnz	r4, 800bbfc <_malloc_r+0x88>
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff ffbf 	bl	800bb30 <sbrk_aligned>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	d158      	bne.n	800bc6a <_malloc_r+0xf6>
 800bbb8:	f8d8 4000 	ldr.w	r4, [r8]
 800bbbc:	4627      	mov	r7, r4
 800bbbe:	2f00      	cmp	r7, #0
 800bbc0:	d143      	bne.n	800bc4a <_malloc_r+0xd6>
 800bbc2:	2c00      	cmp	r4, #0
 800bbc4:	d04b      	beq.n	800bc5e <_malloc_r+0xea>
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	4639      	mov	r1, r7
 800bbca:	4630      	mov	r0, r6
 800bbcc:	eb04 0903 	add.w	r9, r4, r3
 800bbd0:	f000 faa2 	bl	800c118 <_sbrk_r>
 800bbd4:	4581      	cmp	r9, r0
 800bbd6:	d142      	bne.n	800bc5e <_malloc_r+0xea>
 800bbd8:	6821      	ldr	r1, [r4, #0]
 800bbda:	1a6d      	subs	r5, r5, r1
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ffa6 	bl	800bb30 <sbrk_aligned>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d03a      	beq.n	800bc5e <_malloc_r+0xea>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	442b      	add	r3, r5
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	bb62      	cbnz	r2, 800bc50 <_malloc_r+0xdc>
 800bbf6:	f8c8 7000 	str.w	r7, [r8]
 800bbfa:	e00f      	b.n	800bc1c <_malloc_r+0xa8>
 800bbfc:	6822      	ldr	r2, [r4, #0]
 800bbfe:	1b52      	subs	r2, r2, r5
 800bc00:	d420      	bmi.n	800bc44 <_malloc_r+0xd0>
 800bc02:	2a0b      	cmp	r2, #11
 800bc04:	d917      	bls.n	800bc36 <_malloc_r+0xc2>
 800bc06:	1961      	adds	r1, r4, r5
 800bc08:	42a3      	cmp	r3, r4
 800bc0a:	6025      	str	r5, [r4, #0]
 800bc0c:	bf18      	it	ne
 800bc0e:	6059      	strne	r1, [r3, #4]
 800bc10:	6863      	ldr	r3, [r4, #4]
 800bc12:	bf08      	it	eq
 800bc14:	f8c8 1000 	streq.w	r1, [r8]
 800bc18:	5162      	str	r2, [r4, r5]
 800bc1a:	604b      	str	r3, [r1, #4]
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f82f 	bl	800bc80 <__malloc_unlock>
 800bc22:	f104 000b 	add.w	r0, r4, #11
 800bc26:	1d23      	adds	r3, r4, #4
 800bc28:	f020 0007 	bic.w	r0, r0, #7
 800bc2c:	1ac2      	subs	r2, r0, r3
 800bc2e:	bf1c      	itt	ne
 800bc30:	1a1b      	subne	r3, r3, r0
 800bc32:	50a3      	strne	r3, [r4, r2]
 800bc34:	e7af      	b.n	800bb96 <_malloc_r+0x22>
 800bc36:	6862      	ldr	r2, [r4, #4]
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	bf0c      	ite	eq
 800bc3c:	f8c8 2000 	streq.w	r2, [r8]
 800bc40:	605a      	strne	r2, [r3, #4]
 800bc42:	e7eb      	b.n	800bc1c <_malloc_r+0xa8>
 800bc44:	4623      	mov	r3, r4
 800bc46:	6864      	ldr	r4, [r4, #4]
 800bc48:	e7ae      	b.n	800bba8 <_malloc_r+0x34>
 800bc4a:	463c      	mov	r4, r7
 800bc4c:	687f      	ldr	r7, [r7, #4]
 800bc4e:	e7b6      	b.n	800bbbe <_malloc_r+0x4a>
 800bc50:	461a      	mov	r2, r3
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	d1fb      	bne.n	800bc50 <_malloc_r+0xdc>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	6053      	str	r3, [r2, #4]
 800bc5c:	e7de      	b.n	800bc1c <_malloc_r+0xa8>
 800bc5e:	230c      	movs	r3, #12
 800bc60:	6033      	str	r3, [r6, #0]
 800bc62:	4630      	mov	r0, r6
 800bc64:	f000 f80c 	bl	800bc80 <__malloc_unlock>
 800bc68:	e794      	b.n	800bb94 <_malloc_r+0x20>
 800bc6a:	6005      	str	r5, [r0, #0]
 800bc6c:	e7d6      	b.n	800bc1c <_malloc_r+0xa8>
 800bc6e:	bf00      	nop
 800bc70:	20002064 	.word	0x20002064

0800bc74 <__malloc_lock>:
 800bc74:	4801      	ldr	r0, [pc, #4]	@ (800bc7c <__malloc_lock+0x8>)
 800bc76:	f000 ba9c 	b.w	800c1b2 <__retarget_lock_acquire_recursive>
 800bc7a:	bf00      	nop
 800bc7c:	200021a8 	.word	0x200021a8

0800bc80 <__malloc_unlock>:
 800bc80:	4801      	ldr	r0, [pc, #4]	@ (800bc88 <__malloc_unlock+0x8>)
 800bc82:	f000 ba97 	b.w	800c1b4 <__retarget_lock_release_recursive>
 800bc86:	bf00      	nop
 800bc88:	200021a8 	.word	0x200021a8

0800bc8c <std>:
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	b510      	push	{r4, lr}
 800bc90:	4604      	mov	r4, r0
 800bc92:	e9c0 3300 	strd	r3, r3, [r0]
 800bc96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc9a:	6083      	str	r3, [r0, #8]
 800bc9c:	8181      	strh	r1, [r0, #12]
 800bc9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bca0:	81c2      	strh	r2, [r0, #14]
 800bca2:	6183      	str	r3, [r0, #24]
 800bca4:	4619      	mov	r1, r3
 800bca6:	2208      	movs	r2, #8
 800bca8:	305c      	adds	r0, #92	@ 0x5c
 800bcaa:	f000 f9f9 	bl	800c0a0 <memset>
 800bcae:	4b0d      	ldr	r3, [pc, #52]	@ (800bce4 <std+0x58>)
 800bcb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bcb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bce8 <std+0x5c>)
 800bcb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcec <std+0x60>)
 800bcb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcba:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf0 <std+0x64>)
 800bcbc:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf4 <std+0x68>)
 800bcc0:	6224      	str	r4, [r4, #32]
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d006      	beq.n	800bcd4 <std+0x48>
 800bcc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcca:	4294      	cmp	r4, r2
 800bccc:	d002      	beq.n	800bcd4 <std+0x48>
 800bcce:	33d0      	adds	r3, #208	@ 0xd0
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	d105      	bne.n	800bce0 <std+0x54>
 800bcd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcdc:	f000 ba68 	b.w	800c1b0 <__retarget_lock_init_recursive>
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	bf00      	nop
 800bce4:	0800bef1 	.word	0x0800bef1
 800bce8:	0800bf13 	.word	0x0800bf13
 800bcec:	0800bf4b 	.word	0x0800bf4b
 800bcf0:	0800bf6f 	.word	0x0800bf6f
 800bcf4:	20002068 	.word	0x20002068

0800bcf8 <stdio_exit_handler>:
 800bcf8:	4a02      	ldr	r2, [pc, #8]	@ (800bd04 <stdio_exit_handler+0xc>)
 800bcfa:	4903      	ldr	r1, [pc, #12]	@ (800bd08 <stdio_exit_handler+0x10>)
 800bcfc:	4803      	ldr	r0, [pc, #12]	@ (800bd0c <stdio_exit_handler+0x14>)
 800bcfe:	f000 b869 	b.w	800bdd4 <_fwalk_sglue>
 800bd02:	bf00      	nop
 800bd04:	200007d0 	.word	0x200007d0
 800bd08:	0800c8f5 	.word	0x0800c8f5
 800bd0c:	200007e0 	.word	0x200007e0

0800bd10 <cleanup_stdio>:
 800bd10:	6841      	ldr	r1, [r0, #4]
 800bd12:	4b0c      	ldr	r3, [pc, #48]	@ (800bd44 <cleanup_stdio+0x34>)
 800bd14:	4299      	cmp	r1, r3
 800bd16:	b510      	push	{r4, lr}
 800bd18:	4604      	mov	r4, r0
 800bd1a:	d001      	beq.n	800bd20 <cleanup_stdio+0x10>
 800bd1c:	f000 fdea 	bl	800c8f4 <_fflush_r>
 800bd20:	68a1      	ldr	r1, [r4, #8]
 800bd22:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <cleanup_stdio+0x38>)
 800bd24:	4299      	cmp	r1, r3
 800bd26:	d002      	beq.n	800bd2e <cleanup_stdio+0x1e>
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f000 fde3 	bl	800c8f4 <_fflush_r>
 800bd2e:	68e1      	ldr	r1, [r4, #12]
 800bd30:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <cleanup_stdio+0x3c>)
 800bd32:	4299      	cmp	r1, r3
 800bd34:	d004      	beq.n	800bd40 <cleanup_stdio+0x30>
 800bd36:	4620      	mov	r0, r4
 800bd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3c:	f000 bdda 	b.w	800c8f4 <_fflush_r>
 800bd40:	bd10      	pop	{r4, pc}
 800bd42:	bf00      	nop
 800bd44:	20002068 	.word	0x20002068
 800bd48:	200020d0 	.word	0x200020d0
 800bd4c:	20002138 	.word	0x20002138

0800bd50 <global_stdio_init.part.0>:
 800bd50:	b510      	push	{r4, lr}
 800bd52:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <global_stdio_init.part.0+0x30>)
 800bd54:	4c0b      	ldr	r4, [pc, #44]	@ (800bd84 <global_stdio_init.part.0+0x34>)
 800bd56:	4a0c      	ldr	r2, [pc, #48]	@ (800bd88 <global_stdio_init.part.0+0x38>)
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2104      	movs	r1, #4
 800bd60:	f7ff ff94 	bl	800bc8c <std>
 800bd64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd68:	2201      	movs	r2, #1
 800bd6a:	2109      	movs	r1, #9
 800bd6c:	f7ff ff8e 	bl	800bc8c <std>
 800bd70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd74:	2202      	movs	r2, #2
 800bd76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd7a:	2112      	movs	r1, #18
 800bd7c:	f7ff bf86 	b.w	800bc8c <std>
 800bd80:	200021a0 	.word	0x200021a0
 800bd84:	20002068 	.word	0x20002068
 800bd88:	0800bcf9 	.word	0x0800bcf9

0800bd8c <__sfp_lock_acquire>:
 800bd8c:	4801      	ldr	r0, [pc, #4]	@ (800bd94 <__sfp_lock_acquire+0x8>)
 800bd8e:	f000 ba10 	b.w	800c1b2 <__retarget_lock_acquire_recursive>
 800bd92:	bf00      	nop
 800bd94:	200021a9 	.word	0x200021a9

0800bd98 <__sfp_lock_release>:
 800bd98:	4801      	ldr	r0, [pc, #4]	@ (800bda0 <__sfp_lock_release+0x8>)
 800bd9a:	f000 ba0b 	b.w	800c1b4 <__retarget_lock_release_recursive>
 800bd9e:	bf00      	nop
 800bda0:	200021a9 	.word	0x200021a9

0800bda4 <__sinit>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	4604      	mov	r4, r0
 800bda8:	f7ff fff0 	bl	800bd8c <__sfp_lock_acquire>
 800bdac:	6a23      	ldr	r3, [r4, #32]
 800bdae:	b11b      	cbz	r3, 800bdb8 <__sinit+0x14>
 800bdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb4:	f7ff bff0 	b.w	800bd98 <__sfp_lock_release>
 800bdb8:	4b04      	ldr	r3, [pc, #16]	@ (800bdcc <__sinit+0x28>)
 800bdba:	6223      	str	r3, [r4, #32]
 800bdbc:	4b04      	ldr	r3, [pc, #16]	@ (800bdd0 <__sinit+0x2c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1f5      	bne.n	800bdb0 <__sinit+0xc>
 800bdc4:	f7ff ffc4 	bl	800bd50 <global_stdio_init.part.0>
 800bdc8:	e7f2      	b.n	800bdb0 <__sinit+0xc>
 800bdca:	bf00      	nop
 800bdcc:	0800bd11 	.word	0x0800bd11
 800bdd0:	200021a0 	.word	0x200021a0

0800bdd4 <_fwalk_sglue>:
 800bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd8:	4607      	mov	r7, r0
 800bdda:	4688      	mov	r8, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	2600      	movs	r6, #0
 800bde0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bde4:	f1b9 0901 	subs.w	r9, r9, #1
 800bde8:	d505      	bpl.n	800bdf6 <_fwalk_sglue+0x22>
 800bdea:	6824      	ldr	r4, [r4, #0]
 800bdec:	2c00      	cmp	r4, #0
 800bdee:	d1f7      	bne.n	800bde0 <_fwalk_sglue+0xc>
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d907      	bls.n	800be0c <_fwalk_sglue+0x38>
 800bdfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be00:	3301      	adds	r3, #1
 800be02:	d003      	beq.n	800be0c <_fwalk_sglue+0x38>
 800be04:	4629      	mov	r1, r5
 800be06:	4638      	mov	r0, r7
 800be08:	47c0      	blx	r8
 800be0a:	4306      	orrs	r6, r0
 800be0c:	3568      	adds	r5, #104	@ 0x68
 800be0e:	e7e9      	b.n	800bde4 <_fwalk_sglue+0x10>

0800be10 <iprintf>:
 800be10:	b40f      	push	{r0, r1, r2, r3}
 800be12:	b507      	push	{r0, r1, r2, lr}
 800be14:	4906      	ldr	r1, [pc, #24]	@ (800be30 <iprintf+0x20>)
 800be16:	ab04      	add	r3, sp, #16
 800be18:	6808      	ldr	r0, [r1, #0]
 800be1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1e:	6881      	ldr	r1, [r0, #8]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	f000 fa3d 	bl	800c2a0 <_vfiprintf_r>
 800be26:	b003      	add	sp, #12
 800be28:	f85d eb04 	ldr.w	lr, [sp], #4
 800be2c:	b004      	add	sp, #16
 800be2e:	4770      	bx	lr
 800be30:	200007dc 	.word	0x200007dc

0800be34 <_puts_r>:
 800be34:	6a03      	ldr	r3, [r0, #32]
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	6884      	ldr	r4, [r0, #8]
 800be3a:	4605      	mov	r5, r0
 800be3c:	460e      	mov	r6, r1
 800be3e:	b90b      	cbnz	r3, 800be44 <_puts_r+0x10>
 800be40:	f7ff ffb0 	bl	800bda4 <__sinit>
 800be44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d405      	bmi.n	800be56 <_puts_r+0x22>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	0598      	lsls	r0, r3, #22
 800be4e:	d402      	bmi.n	800be56 <_puts_r+0x22>
 800be50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be52:	f000 f9ae 	bl	800c1b2 <__retarget_lock_acquire_recursive>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	0719      	lsls	r1, r3, #28
 800be5a:	d502      	bpl.n	800be62 <_puts_r+0x2e>
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d135      	bne.n	800bece <_puts_r+0x9a>
 800be62:	4621      	mov	r1, r4
 800be64:	4628      	mov	r0, r5
 800be66:	f000 f8c5 	bl	800bff4 <__swsetup_r>
 800be6a:	b380      	cbz	r0, 800bece <_puts_r+0x9a>
 800be6c:	f04f 35ff 	mov.w	r5, #4294967295
 800be70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be72:	07da      	lsls	r2, r3, #31
 800be74:	d405      	bmi.n	800be82 <_puts_r+0x4e>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	059b      	lsls	r3, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_puts_r+0x4e>
 800be7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be7e:	f000 f999 	bl	800c1b4 <__retarget_lock_release_recursive>
 800be82:	4628      	mov	r0, r5
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	2b00      	cmp	r3, #0
 800be88:	da04      	bge.n	800be94 <_puts_r+0x60>
 800be8a:	69a2      	ldr	r2, [r4, #24]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dc17      	bgt.n	800bec0 <_puts_r+0x8c>
 800be90:	290a      	cmp	r1, #10
 800be92:	d015      	beq.n	800bec0 <_puts_r+0x8c>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	7019      	strb	r1, [r3, #0]
 800be9c:	68a3      	ldr	r3, [r4, #8]
 800be9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bea2:	3b01      	subs	r3, #1
 800bea4:	60a3      	str	r3, [r4, #8]
 800bea6:	2900      	cmp	r1, #0
 800bea8:	d1ed      	bne.n	800be86 <_puts_r+0x52>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da11      	bge.n	800bed2 <_puts_r+0x9e>
 800beae:	4622      	mov	r2, r4
 800beb0:	210a      	movs	r1, #10
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f85f 	bl	800bf76 <__swbuf_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	d0d7      	beq.n	800be6c <_puts_r+0x38>
 800bebc:	250a      	movs	r5, #10
 800bebe:	e7d7      	b.n	800be70 <_puts_r+0x3c>
 800bec0:	4622      	mov	r2, r4
 800bec2:	4628      	mov	r0, r5
 800bec4:	f000 f857 	bl	800bf76 <__swbuf_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	d1e7      	bne.n	800be9c <_puts_r+0x68>
 800becc:	e7ce      	b.n	800be6c <_puts_r+0x38>
 800bece:	3e01      	subs	r6, #1
 800bed0:	e7e4      	b.n	800be9c <_puts_r+0x68>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	6022      	str	r2, [r4, #0]
 800bed8:	220a      	movs	r2, #10
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e7ee      	b.n	800bebc <_puts_r+0x88>
	...

0800bee0 <puts>:
 800bee0:	4b02      	ldr	r3, [pc, #8]	@ (800beec <puts+0xc>)
 800bee2:	4601      	mov	r1, r0
 800bee4:	6818      	ldr	r0, [r3, #0]
 800bee6:	f7ff bfa5 	b.w	800be34 <_puts_r>
 800beea:	bf00      	nop
 800beec:	200007dc 	.word	0x200007dc

0800bef0 <__sread>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	460c      	mov	r4, r1
 800bef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef8:	f000 f8fc 	bl	800c0f4 <_read_r>
 800befc:	2800      	cmp	r0, #0
 800befe:	bfab      	itete	ge
 800bf00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf02:	89a3      	ldrhlt	r3, [r4, #12]
 800bf04:	181b      	addge	r3, r3, r0
 800bf06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf0a:	bfac      	ite	ge
 800bf0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf0e:	81a3      	strhlt	r3, [r4, #12]
 800bf10:	bd10      	pop	{r4, pc}

0800bf12 <__swrite>:
 800bf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf16:	461f      	mov	r7, r3
 800bf18:	898b      	ldrh	r3, [r1, #12]
 800bf1a:	05db      	lsls	r3, r3, #23
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	4616      	mov	r6, r2
 800bf22:	d505      	bpl.n	800bf30 <__swrite+0x1e>
 800bf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf28:	2302      	movs	r3, #2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f000 f8d0 	bl	800c0d0 <_lseek_r>
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	4632      	mov	r2, r6
 800bf3e:	463b      	mov	r3, r7
 800bf40:	4628      	mov	r0, r5
 800bf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf46:	f000 b8f7 	b.w	800c138 <_write_r>

0800bf4a <__sseek>:
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf52:	f000 f8bd 	bl	800c0d0 <_lseek_r>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	bf15      	itete	ne
 800bf5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf66:	81a3      	strheq	r3, [r4, #12]
 800bf68:	bf18      	it	ne
 800bf6a:	81a3      	strhne	r3, [r4, #12]
 800bf6c:	bd10      	pop	{r4, pc}

0800bf6e <__sclose>:
 800bf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf72:	f000 b89d 	b.w	800c0b0 <_close_r>

0800bf76 <__swbuf_r>:
 800bf76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf78:	460e      	mov	r6, r1
 800bf7a:	4614      	mov	r4, r2
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	b118      	cbz	r0, 800bf88 <__swbuf_r+0x12>
 800bf80:	6a03      	ldr	r3, [r0, #32]
 800bf82:	b90b      	cbnz	r3, 800bf88 <__swbuf_r+0x12>
 800bf84:	f7ff ff0e 	bl	800bda4 <__sinit>
 800bf88:	69a3      	ldr	r3, [r4, #24]
 800bf8a:	60a3      	str	r3, [r4, #8]
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	071a      	lsls	r2, r3, #28
 800bf90:	d501      	bpl.n	800bf96 <__swbuf_r+0x20>
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	b943      	cbnz	r3, 800bfa8 <__swbuf_r+0x32>
 800bf96:	4621      	mov	r1, r4
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f000 f82b 	bl	800bff4 <__swsetup_r>
 800bf9e:	b118      	cbz	r0, 800bfa8 <__swbuf_r+0x32>
 800bfa0:	f04f 37ff 	mov.w	r7, #4294967295
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	6922      	ldr	r2, [r4, #16]
 800bfac:	1a98      	subs	r0, r3, r2
 800bfae:	6963      	ldr	r3, [r4, #20]
 800bfb0:	b2f6      	uxtb	r6, r6
 800bfb2:	4283      	cmp	r3, r0
 800bfb4:	4637      	mov	r7, r6
 800bfb6:	dc05      	bgt.n	800bfc4 <__swbuf_r+0x4e>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 fc9a 	bl	800c8f4 <_fflush_r>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d1ed      	bne.n	800bfa0 <__swbuf_r+0x2a>
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	60a3      	str	r3, [r4, #8]
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	6022      	str	r2, [r4, #0]
 800bfd0:	701e      	strb	r6, [r3, #0]
 800bfd2:	6962      	ldr	r2, [r4, #20]
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d004      	beq.n	800bfe4 <__swbuf_r+0x6e>
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	07db      	lsls	r3, r3, #31
 800bfde:	d5e1      	bpl.n	800bfa4 <__swbuf_r+0x2e>
 800bfe0:	2e0a      	cmp	r6, #10
 800bfe2:	d1df      	bne.n	800bfa4 <__swbuf_r+0x2e>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 fc84 	bl	800c8f4 <_fflush_r>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d0d9      	beq.n	800bfa4 <__swbuf_r+0x2e>
 800bff0:	e7d6      	b.n	800bfa0 <__swbuf_r+0x2a>
	...

0800bff4 <__swsetup_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4b29      	ldr	r3, [pc, #164]	@ (800c09c <__swsetup_r+0xa8>)
 800bff8:	4605      	mov	r5, r0
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	460c      	mov	r4, r1
 800bffe:	b118      	cbz	r0, 800c008 <__swsetup_r+0x14>
 800c000:	6a03      	ldr	r3, [r0, #32]
 800c002:	b90b      	cbnz	r3, 800c008 <__swsetup_r+0x14>
 800c004:	f7ff fece 	bl	800bda4 <__sinit>
 800c008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00c:	0719      	lsls	r1, r3, #28
 800c00e:	d422      	bmi.n	800c056 <__swsetup_r+0x62>
 800c010:	06da      	lsls	r2, r3, #27
 800c012:	d407      	bmi.n	800c024 <__swsetup_r+0x30>
 800c014:	2209      	movs	r2, #9
 800c016:	602a      	str	r2, [r5, #0]
 800c018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	f04f 30ff 	mov.w	r0, #4294967295
 800c022:	e033      	b.n	800c08c <__swsetup_r+0x98>
 800c024:	0758      	lsls	r0, r3, #29
 800c026:	d512      	bpl.n	800c04e <__swsetup_r+0x5a>
 800c028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c02a:	b141      	cbz	r1, 800c03e <__swsetup_r+0x4a>
 800c02c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c030:	4299      	cmp	r1, r3
 800c032:	d002      	beq.n	800c03a <__swsetup_r+0x46>
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f8bf 	bl	800c1b8 <_free_r>
 800c03a:	2300      	movs	r3, #0
 800c03c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	2300      	movs	r3, #0
 800c048:	6063      	str	r3, [r4, #4]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f043 0308 	orr.w	r3, r3, #8
 800c054:	81a3      	strh	r3, [r4, #12]
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	b94b      	cbnz	r3, 800c06e <__swsetup_r+0x7a>
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c064:	d003      	beq.n	800c06e <__swsetup_r+0x7a>
 800c066:	4621      	mov	r1, r4
 800c068:	4628      	mov	r0, r5
 800c06a:	f000 fc91 	bl	800c990 <__smakebuf_r>
 800c06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c072:	f013 0201 	ands.w	r2, r3, #1
 800c076:	d00a      	beq.n	800c08e <__swsetup_r+0x9a>
 800c078:	2200      	movs	r2, #0
 800c07a:	60a2      	str	r2, [r4, #8]
 800c07c:	6962      	ldr	r2, [r4, #20]
 800c07e:	4252      	negs	r2, r2
 800c080:	61a2      	str	r2, [r4, #24]
 800c082:	6922      	ldr	r2, [r4, #16]
 800c084:	b942      	cbnz	r2, 800c098 <__swsetup_r+0xa4>
 800c086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c08a:	d1c5      	bne.n	800c018 <__swsetup_r+0x24>
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	0799      	lsls	r1, r3, #30
 800c090:	bf58      	it	pl
 800c092:	6962      	ldrpl	r2, [r4, #20]
 800c094:	60a2      	str	r2, [r4, #8]
 800c096:	e7f4      	b.n	800c082 <__swsetup_r+0x8e>
 800c098:	2000      	movs	r0, #0
 800c09a:	e7f7      	b.n	800c08c <__swsetup_r+0x98>
 800c09c:	200007dc 	.word	0x200007dc

0800c0a0 <memset>:
 800c0a0:	4402      	add	r2, r0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d100      	bne.n	800c0aa <memset+0xa>
 800c0a8:	4770      	bx	lr
 800c0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ae:	e7f9      	b.n	800c0a4 <memset+0x4>

0800c0b0 <_close_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d06      	ldr	r5, [pc, #24]	@ (800c0cc <_close_r+0x1c>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	f000 fdfa 	bl	800ccb4 <_close>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_close_r+0x1a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_close_r+0x1a>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	200021a4 	.word	0x200021a4

0800c0d0 <_lseek_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4d07      	ldr	r5, [pc, #28]	@ (800c0f0 <_lseek_r+0x20>)
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	4608      	mov	r0, r1
 800c0d8:	4611      	mov	r1, r2
 800c0da:	2200      	movs	r2, #0
 800c0dc:	602a      	str	r2, [r5, #0]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f000 fe00 	bl	800cce4 <_lseek>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d102      	bne.n	800c0ee <_lseek_r+0x1e>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	b103      	cbz	r3, 800c0ee <_lseek_r+0x1e>
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	200021a4 	.word	0x200021a4

0800c0f4 <_read_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	@ (800c114 <_read_r+0x20>)
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	2200      	movs	r2, #0
 800c100:	602a      	str	r2, [r5, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	f000 fdf6 	bl	800ccf4 <_read>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_read_r+0x1e>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_read_r+0x1e>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	200021a4 	.word	0x200021a4

0800c118 <_sbrk_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	@ (800c134 <_sbrk_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f5 fb14 	bl	8001750 <_sbrk>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_sbrk_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_sbrk_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	200021a4 	.word	0x200021a4

0800c138 <_write_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	@ (800c158 <_write_r+0x20>)
 800c13c:	4604      	mov	r4, r0
 800c13e:	4608      	mov	r0, r1
 800c140:	4611      	mov	r1, r2
 800c142:	2200      	movs	r2, #0
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f000 fddc 	bl	800cd04 <_write>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_write_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_write_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	200021a4 	.word	0x200021a4

0800c15c <__errno>:
 800c15c:	4b01      	ldr	r3, [pc, #4]	@ (800c164 <__errno+0x8>)
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	200007dc 	.word	0x200007dc

0800c168 <__libc_init_array>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	4d0d      	ldr	r5, [pc, #52]	@ (800c1a0 <__libc_init_array+0x38>)
 800c16c:	4c0d      	ldr	r4, [pc, #52]	@ (800c1a4 <__libc_init_array+0x3c>)
 800c16e:	1b64      	subs	r4, r4, r5
 800c170:	10a4      	asrs	r4, r4, #2
 800c172:	2600      	movs	r6, #0
 800c174:	42a6      	cmp	r6, r4
 800c176:	d109      	bne.n	800c18c <__libc_init_array+0x24>
 800c178:	4d0b      	ldr	r5, [pc, #44]	@ (800c1a8 <__libc_init_array+0x40>)
 800c17a:	4c0c      	ldr	r4, [pc, #48]	@ (800c1ac <__libc_init_array+0x44>)
 800c17c:	f000 fdca 	bl	800cd14 <_init>
 800c180:	1b64      	subs	r4, r4, r5
 800c182:	10a4      	asrs	r4, r4, #2
 800c184:	2600      	movs	r6, #0
 800c186:	42a6      	cmp	r6, r4
 800c188:	d105      	bne.n	800c196 <__libc_init_array+0x2e>
 800c18a:	bd70      	pop	{r4, r5, r6, pc}
 800c18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c190:	4798      	blx	r3
 800c192:	3601      	adds	r6, #1
 800c194:	e7ee      	b.n	800c174 <__libc_init_array+0xc>
 800c196:	f855 3b04 	ldr.w	r3, [r5], #4
 800c19a:	4798      	blx	r3
 800c19c:	3601      	adds	r6, #1
 800c19e:	e7f2      	b.n	800c186 <__libc_init_array+0x1e>
 800c1a0:	0800efec 	.word	0x0800efec
 800c1a4:	0800efec 	.word	0x0800efec
 800c1a8:	0800efec 	.word	0x0800efec
 800c1ac:	0800eff0 	.word	0x0800eff0

0800c1b0 <__retarget_lock_init_recursive>:
 800c1b0:	4770      	bx	lr

0800c1b2 <__retarget_lock_acquire_recursive>:
 800c1b2:	4770      	bx	lr

0800c1b4 <__retarget_lock_release_recursive>:
 800c1b4:	4770      	bx	lr
	...

0800c1b8 <_free_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	d041      	beq.n	800c244 <_free_r+0x8c>
 800c1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c4:	1f0c      	subs	r4, r1, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfb8      	it	lt
 800c1ca:	18e4      	addlt	r4, r4, r3
 800c1cc:	f7ff fd52 	bl	800bc74 <__malloc_lock>
 800c1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c248 <_free_r+0x90>)
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	b933      	cbnz	r3, 800c1e4 <_free_r+0x2c>
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	6014      	str	r4, [r2, #0]
 800c1da:	4628      	mov	r0, r5
 800c1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e0:	f7ff bd4e 	b.w	800bc80 <__malloc_unlock>
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d908      	bls.n	800c1fa <_free_r+0x42>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	1821      	adds	r1, r4, r0
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	bf01      	itttt	eq
 800c1f0:	6819      	ldreq	r1, [r3, #0]
 800c1f2:	685b      	ldreq	r3, [r3, #4]
 800c1f4:	1809      	addeq	r1, r1, r0
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	e7ed      	b.n	800c1d6 <_free_r+0x1e>
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b10b      	cbz	r3, 800c204 <_free_r+0x4c>
 800c200:	42a3      	cmp	r3, r4
 800c202:	d9fa      	bls.n	800c1fa <_free_r+0x42>
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	1850      	adds	r0, r2, r1
 800c208:	42a0      	cmp	r0, r4
 800c20a:	d10b      	bne.n	800c224 <_free_r+0x6c>
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	4401      	add	r1, r0
 800c210:	1850      	adds	r0, r2, r1
 800c212:	4283      	cmp	r3, r0
 800c214:	6011      	str	r1, [r2, #0]
 800c216:	d1e0      	bne.n	800c1da <_free_r+0x22>
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	6053      	str	r3, [r2, #4]
 800c21e:	4408      	add	r0, r1
 800c220:	6010      	str	r0, [r2, #0]
 800c222:	e7da      	b.n	800c1da <_free_r+0x22>
 800c224:	d902      	bls.n	800c22c <_free_r+0x74>
 800c226:	230c      	movs	r3, #12
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	e7d6      	b.n	800c1da <_free_r+0x22>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	1821      	adds	r1, r4, r0
 800c230:	428b      	cmp	r3, r1
 800c232:	bf04      	itt	eq
 800c234:	6819      	ldreq	r1, [r3, #0]
 800c236:	685b      	ldreq	r3, [r3, #4]
 800c238:	6063      	str	r3, [r4, #4]
 800c23a:	bf04      	itt	eq
 800c23c:	1809      	addeq	r1, r1, r0
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	6054      	str	r4, [r2, #4]
 800c242:	e7ca      	b.n	800c1da <_free_r+0x22>
 800c244:	bd38      	pop	{r3, r4, r5, pc}
 800c246:	bf00      	nop
 800c248:	20002064 	.word	0x20002064

0800c24c <__sfputc_r>:
 800c24c:	6893      	ldr	r3, [r2, #8]
 800c24e:	3b01      	subs	r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	b410      	push	{r4}
 800c254:	6093      	str	r3, [r2, #8]
 800c256:	da08      	bge.n	800c26a <__sfputc_r+0x1e>
 800c258:	6994      	ldr	r4, [r2, #24]
 800c25a:	42a3      	cmp	r3, r4
 800c25c:	db01      	blt.n	800c262 <__sfputc_r+0x16>
 800c25e:	290a      	cmp	r1, #10
 800c260:	d103      	bne.n	800c26a <__sfputc_r+0x1e>
 800c262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c266:	f7ff be86 	b.w	800bf76 <__swbuf_r>
 800c26a:	6813      	ldr	r3, [r2, #0]
 800c26c:	1c58      	adds	r0, r3, #1
 800c26e:	6010      	str	r0, [r2, #0]
 800c270:	7019      	strb	r1, [r3, #0]
 800c272:	4608      	mov	r0, r1
 800c274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <__sfputs_r>:
 800c27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	4614      	mov	r4, r2
 800c282:	18d5      	adds	r5, r2, r3
 800c284:	42ac      	cmp	r4, r5
 800c286:	d101      	bne.n	800c28c <__sfputs_r+0x12>
 800c288:	2000      	movs	r0, #0
 800c28a:	e007      	b.n	800c29c <__sfputs_r+0x22>
 800c28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c290:	463a      	mov	r2, r7
 800c292:	4630      	mov	r0, r6
 800c294:	f7ff ffda 	bl	800c24c <__sfputc_r>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d1f3      	bne.n	800c284 <__sfputs_r+0xa>
 800c29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2a0 <_vfiprintf_r>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	460d      	mov	r5, r1
 800c2a6:	b09d      	sub	sp, #116	@ 0x74
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	4698      	mov	r8, r3
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	b118      	cbz	r0, 800c2b8 <_vfiprintf_r+0x18>
 800c2b0:	6a03      	ldr	r3, [r0, #32]
 800c2b2:	b90b      	cbnz	r3, 800c2b8 <_vfiprintf_r+0x18>
 800c2b4:	f7ff fd76 	bl	800bda4 <__sinit>
 800c2b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2ba:	07d9      	lsls	r1, r3, #31
 800c2bc:	d405      	bmi.n	800c2ca <_vfiprintf_r+0x2a>
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	059a      	lsls	r2, r3, #22
 800c2c2:	d402      	bmi.n	800c2ca <_vfiprintf_r+0x2a>
 800c2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2c6:	f7ff ff74 	bl	800c1b2 <__retarget_lock_acquire_recursive>
 800c2ca:	89ab      	ldrh	r3, [r5, #12]
 800c2cc:	071b      	lsls	r3, r3, #28
 800c2ce:	d501      	bpl.n	800c2d4 <_vfiprintf_r+0x34>
 800c2d0:	692b      	ldr	r3, [r5, #16]
 800c2d2:	b99b      	cbnz	r3, 800c2fc <_vfiprintf_r+0x5c>
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff fe8c 	bl	800bff4 <__swsetup_r>
 800c2dc:	b170      	cbz	r0, 800c2fc <_vfiprintf_r+0x5c>
 800c2de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2e0:	07dc      	lsls	r4, r3, #31
 800c2e2:	d504      	bpl.n	800c2ee <_vfiprintf_r+0x4e>
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	b01d      	add	sp, #116	@ 0x74
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	89ab      	ldrh	r3, [r5, #12]
 800c2f0:	0598      	lsls	r0, r3, #22
 800c2f2:	d4f7      	bmi.n	800c2e4 <_vfiprintf_r+0x44>
 800c2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2f6:	f7ff ff5d 	bl	800c1b4 <__retarget_lock_release_recursive>
 800c2fa:	e7f3      	b.n	800c2e4 <_vfiprintf_r+0x44>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c300:	2320      	movs	r3, #32
 800c302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c306:	f8cd 800c 	str.w	r8, [sp, #12]
 800c30a:	2330      	movs	r3, #48	@ 0x30
 800c30c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4bc <_vfiprintf_r+0x21c>
 800c310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c314:	f04f 0901 	mov.w	r9, #1
 800c318:	4623      	mov	r3, r4
 800c31a:	469a      	mov	sl, r3
 800c31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c320:	b10a      	cbz	r2, 800c326 <_vfiprintf_r+0x86>
 800c322:	2a25      	cmp	r2, #37	@ 0x25
 800c324:	d1f9      	bne.n	800c31a <_vfiprintf_r+0x7a>
 800c326:	ebba 0b04 	subs.w	fp, sl, r4
 800c32a:	d00b      	beq.n	800c344 <_vfiprintf_r+0xa4>
 800c32c:	465b      	mov	r3, fp
 800c32e:	4622      	mov	r2, r4
 800c330:	4629      	mov	r1, r5
 800c332:	4630      	mov	r0, r6
 800c334:	f7ff ffa1 	bl	800c27a <__sfputs_r>
 800c338:	3001      	adds	r0, #1
 800c33a:	f000 80a7 	beq.w	800c48c <_vfiprintf_r+0x1ec>
 800c33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c340:	445a      	add	r2, fp
 800c342:	9209      	str	r2, [sp, #36]	@ 0x24
 800c344:	f89a 3000 	ldrb.w	r3, [sl]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 809f 	beq.w	800c48c <_vfiprintf_r+0x1ec>
 800c34e:	2300      	movs	r3, #0
 800c350:	f04f 32ff 	mov.w	r2, #4294967295
 800c354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c358:	f10a 0a01 	add.w	sl, sl, #1
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	9307      	str	r3, [sp, #28]
 800c360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c364:	931a      	str	r3, [sp, #104]	@ 0x68
 800c366:	4654      	mov	r4, sl
 800c368:	2205      	movs	r2, #5
 800c36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36e:	4853      	ldr	r0, [pc, #332]	@ (800c4bc <_vfiprintf_r+0x21c>)
 800c370:	f7f3 ff46 	bl	8000200 <memchr>
 800c374:	9a04      	ldr	r2, [sp, #16]
 800c376:	b9d8      	cbnz	r0, 800c3b0 <_vfiprintf_r+0x110>
 800c378:	06d1      	lsls	r1, r2, #27
 800c37a:	bf44      	itt	mi
 800c37c:	2320      	movmi	r3, #32
 800c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c382:	0713      	lsls	r3, r2, #28
 800c384:	bf44      	itt	mi
 800c386:	232b      	movmi	r3, #43	@ 0x2b
 800c388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c38c:	f89a 3000 	ldrb.w	r3, [sl]
 800c390:	2b2a      	cmp	r3, #42	@ 0x2a
 800c392:	d015      	beq.n	800c3c0 <_vfiprintf_r+0x120>
 800c394:	9a07      	ldr	r2, [sp, #28]
 800c396:	4654      	mov	r4, sl
 800c398:	2000      	movs	r0, #0
 800c39a:	f04f 0c0a 	mov.w	ip, #10
 800c39e:	4621      	mov	r1, r4
 800c3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3a4:	3b30      	subs	r3, #48	@ 0x30
 800c3a6:	2b09      	cmp	r3, #9
 800c3a8:	d94b      	bls.n	800c442 <_vfiprintf_r+0x1a2>
 800c3aa:	b1b0      	cbz	r0, 800c3da <_vfiprintf_r+0x13a>
 800c3ac:	9207      	str	r2, [sp, #28]
 800c3ae:	e014      	b.n	800c3da <_vfiprintf_r+0x13a>
 800c3b0:	eba0 0308 	sub.w	r3, r0, r8
 800c3b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	46a2      	mov	sl, r4
 800c3be:	e7d2      	b.n	800c366 <_vfiprintf_r+0xc6>
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	1d19      	adds	r1, r3, #4
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	9103      	str	r1, [sp, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	bfbb      	ittet	lt
 800c3cc:	425b      	neglt	r3, r3
 800c3ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c3d2:	9307      	strge	r3, [sp, #28]
 800c3d4:	9307      	strlt	r3, [sp, #28]
 800c3d6:	bfb8      	it	lt
 800c3d8:	9204      	strlt	r2, [sp, #16]
 800c3da:	7823      	ldrb	r3, [r4, #0]
 800c3dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3de:	d10a      	bne.n	800c3f6 <_vfiprintf_r+0x156>
 800c3e0:	7863      	ldrb	r3, [r4, #1]
 800c3e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3e4:	d132      	bne.n	800c44c <_vfiprintf_r+0x1ac>
 800c3e6:	9b03      	ldr	r3, [sp, #12]
 800c3e8:	1d1a      	adds	r2, r3, #4
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	9203      	str	r2, [sp, #12]
 800c3ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3f2:	3402      	adds	r4, #2
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4cc <_vfiprintf_r+0x22c>
 800c3fa:	7821      	ldrb	r1, [r4, #0]
 800c3fc:	2203      	movs	r2, #3
 800c3fe:	4650      	mov	r0, sl
 800c400:	f7f3 fefe 	bl	8000200 <memchr>
 800c404:	b138      	cbz	r0, 800c416 <_vfiprintf_r+0x176>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	eba0 000a 	sub.w	r0, r0, sl
 800c40c:	2240      	movs	r2, #64	@ 0x40
 800c40e:	4082      	lsls	r2, r0
 800c410:	4313      	orrs	r3, r2
 800c412:	3401      	adds	r4, #1
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41a:	4829      	ldr	r0, [pc, #164]	@ (800c4c0 <_vfiprintf_r+0x220>)
 800c41c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c420:	2206      	movs	r2, #6
 800c422:	f7f3 feed 	bl	8000200 <memchr>
 800c426:	2800      	cmp	r0, #0
 800c428:	d03f      	beq.n	800c4aa <_vfiprintf_r+0x20a>
 800c42a:	4b26      	ldr	r3, [pc, #152]	@ (800c4c4 <_vfiprintf_r+0x224>)
 800c42c:	bb1b      	cbnz	r3, 800c476 <_vfiprintf_r+0x1d6>
 800c42e:	9b03      	ldr	r3, [sp, #12]
 800c430:	3307      	adds	r3, #7
 800c432:	f023 0307 	bic.w	r3, r3, #7
 800c436:	3308      	adds	r3, #8
 800c438:	9303      	str	r3, [sp, #12]
 800c43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c43c:	443b      	add	r3, r7
 800c43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c440:	e76a      	b.n	800c318 <_vfiprintf_r+0x78>
 800c442:	fb0c 3202 	mla	r2, ip, r2, r3
 800c446:	460c      	mov	r4, r1
 800c448:	2001      	movs	r0, #1
 800c44a:	e7a8      	b.n	800c39e <_vfiprintf_r+0xfe>
 800c44c:	2300      	movs	r3, #0
 800c44e:	3401      	adds	r4, #1
 800c450:	9305      	str	r3, [sp, #20]
 800c452:	4619      	mov	r1, r3
 800c454:	f04f 0c0a 	mov.w	ip, #10
 800c458:	4620      	mov	r0, r4
 800c45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c45e:	3a30      	subs	r2, #48	@ 0x30
 800c460:	2a09      	cmp	r2, #9
 800c462:	d903      	bls.n	800c46c <_vfiprintf_r+0x1cc>
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0c6      	beq.n	800c3f6 <_vfiprintf_r+0x156>
 800c468:	9105      	str	r1, [sp, #20]
 800c46a:	e7c4      	b.n	800c3f6 <_vfiprintf_r+0x156>
 800c46c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c470:	4604      	mov	r4, r0
 800c472:	2301      	movs	r3, #1
 800c474:	e7f0      	b.n	800c458 <_vfiprintf_r+0x1b8>
 800c476:	ab03      	add	r3, sp, #12
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	462a      	mov	r2, r5
 800c47c:	4b12      	ldr	r3, [pc, #72]	@ (800c4c8 <_vfiprintf_r+0x228>)
 800c47e:	a904      	add	r1, sp, #16
 800c480:	4630      	mov	r0, r6
 800c482:	f3af 8000 	nop.w
 800c486:	4607      	mov	r7, r0
 800c488:	1c78      	adds	r0, r7, #1
 800c48a:	d1d6      	bne.n	800c43a <_vfiprintf_r+0x19a>
 800c48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c48e:	07d9      	lsls	r1, r3, #31
 800c490:	d405      	bmi.n	800c49e <_vfiprintf_r+0x1fe>
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	059a      	lsls	r2, r3, #22
 800c496:	d402      	bmi.n	800c49e <_vfiprintf_r+0x1fe>
 800c498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c49a:	f7ff fe8b 	bl	800c1b4 <__retarget_lock_release_recursive>
 800c49e:	89ab      	ldrh	r3, [r5, #12]
 800c4a0:	065b      	lsls	r3, r3, #25
 800c4a2:	f53f af1f 	bmi.w	800c2e4 <_vfiprintf_r+0x44>
 800c4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4a8:	e71e      	b.n	800c2e8 <_vfiprintf_r+0x48>
 800c4aa:	ab03      	add	r3, sp, #12
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4b05      	ldr	r3, [pc, #20]	@ (800c4c8 <_vfiprintf_r+0x228>)
 800c4b2:	a904      	add	r1, sp, #16
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f000 f879 	bl	800c5ac <_printf_i>
 800c4ba:	e7e4      	b.n	800c486 <_vfiprintf_r+0x1e6>
 800c4bc:	0800ef98 	.word	0x0800ef98
 800c4c0:	0800efa2 	.word	0x0800efa2
 800c4c4:	00000000 	.word	0x00000000
 800c4c8:	0800c27b 	.word	0x0800c27b
 800c4cc:	0800ef9e 	.word	0x0800ef9e

0800c4d0 <_printf_common>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	4698      	mov	r8, r3
 800c4d8:	688a      	ldr	r2, [r1, #8]
 800c4da:	690b      	ldr	r3, [r1, #16]
 800c4dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	bfb8      	it	lt
 800c4e4:	4613      	movlt	r3, r2
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b10a      	cbz	r2, 800c4f6 <_printf_common+0x26>
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	6033      	str	r3, [r6, #0]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	0699      	lsls	r1, r3, #26
 800c4fa:	bf42      	ittt	mi
 800c4fc:	6833      	ldrmi	r3, [r6, #0]
 800c4fe:	3302      	addmi	r3, #2
 800c500:	6033      	strmi	r3, [r6, #0]
 800c502:	6825      	ldr	r5, [r4, #0]
 800c504:	f015 0506 	ands.w	r5, r5, #6
 800c508:	d106      	bne.n	800c518 <_printf_common+0x48>
 800c50a:	f104 0a19 	add.w	sl, r4, #25
 800c50e:	68e3      	ldr	r3, [r4, #12]
 800c510:	6832      	ldr	r2, [r6, #0]
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	42ab      	cmp	r3, r5
 800c516:	dc26      	bgt.n	800c566 <_printf_common+0x96>
 800c518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	3b00      	subs	r3, #0
 800c520:	bf18      	it	ne
 800c522:	2301      	movne	r3, #1
 800c524:	0692      	lsls	r2, r2, #26
 800c526:	d42b      	bmi.n	800c580 <_printf_common+0xb0>
 800c528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c52c:	4641      	mov	r1, r8
 800c52e:	4638      	mov	r0, r7
 800c530:	47c8      	blx	r9
 800c532:	3001      	adds	r0, #1
 800c534:	d01e      	beq.n	800c574 <_printf_common+0xa4>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	6922      	ldr	r2, [r4, #16]
 800c53a:	f003 0306 	and.w	r3, r3, #6
 800c53e:	2b04      	cmp	r3, #4
 800c540:	bf02      	ittt	eq
 800c542:	68e5      	ldreq	r5, [r4, #12]
 800c544:	6833      	ldreq	r3, [r6, #0]
 800c546:	1aed      	subeq	r5, r5, r3
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	bf0c      	ite	eq
 800c54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c550:	2500      	movne	r5, #0
 800c552:	4293      	cmp	r3, r2
 800c554:	bfc4      	itt	gt
 800c556:	1a9b      	subgt	r3, r3, r2
 800c558:	18ed      	addgt	r5, r5, r3
 800c55a:	2600      	movs	r6, #0
 800c55c:	341a      	adds	r4, #26
 800c55e:	42b5      	cmp	r5, r6
 800c560:	d11a      	bne.n	800c598 <_printf_common+0xc8>
 800c562:	2000      	movs	r0, #0
 800c564:	e008      	b.n	800c578 <_printf_common+0xa8>
 800c566:	2301      	movs	r3, #1
 800c568:	4652      	mov	r2, sl
 800c56a:	4641      	mov	r1, r8
 800c56c:	4638      	mov	r0, r7
 800c56e:	47c8      	blx	r9
 800c570:	3001      	adds	r0, #1
 800c572:	d103      	bne.n	800c57c <_printf_common+0xac>
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c57c:	3501      	adds	r5, #1
 800c57e:	e7c6      	b.n	800c50e <_printf_common+0x3e>
 800c580:	18e1      	adds	r1, r4, r3
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	2030      	movs	r0, #48	@ 0x30
 800c586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c58a:	4422      	add	r2, r4
 800c58c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c594:	3302      	adds	r3, #2
 800c596:	e7c7      	b.n	800c528 <_printf_common+0x58>
 800c598:	2301      	movs	r3, #1
 800c59a:	4622      	mov	r2, r4
 800c59c:	4641      	mov	r1, r8
 800c59e:	4638      	mov	r0, r7
 800c5a0:	47c8      	blx	r9
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	d0e6      	beq.n	800c574 <_printf_common+0xa4>
 800c5a6:	3601      	adds	r6, #1
 800c5a8:	e7d9      	b.n	800c55e <_printf_common+0x8e>
	...

0800c5ac <_printf_i>:
 800c5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	7e0f      	ldrb	r7, [r1, #24]
 800c5b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5b4:	2f78      	cmp	r7, #120	@ 0x78
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	469a      	mov	sl, r3
 800c5be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5c2:	d807      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5c4:	2f62      	cmp	r7, #98	@ 0x62
 800c5c6:	d80a      	bhi.n	800c5de <_printf_i+0x32>
 800c5c8:	2f00      	cmp	r7, #0
 800c5ca:	f000 80d2 	beq.w	800c772 <_printf_i+0x1c6>
 800c5ce:	2f58      	cmp	r7, #88	@ 0x58
 800c5d0:	f000 80b9 	beq.w	800c746 <_printf_i+0x19a>
 800c5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5dc:	e03a      	b.n	800c654 <_printf_i+0xa8>
 800c5de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5e2:	2b15      	cmp	r3, #21
 800c5e4:	d8f6      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c5ec <_printf_i+0x40>)
 800c5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ec:	0800c645 	.word	0x0800c645
 800c5f0:	0800c659 	.word	0x0800c659
 800c5f4:	0800c5d5 	.word	0x0800c5d5
 800c5f8:	0800c5d5 	.word	0x0800c5d5
 800c5fc:	0800c5d5 	.word	0x0800c5d5
 800c600:	0800c5d5 	.word	0x0800c5d5
 800c604:	0800c659 	.word	0x0800c659
 800c608:	0800c5d5 	.word	0x0800c5d5
 800c60c:	0800c5d5 	.word	0x0800c5d5
 800c610:	0800c5d5 	.word	0x0800c5d5
 800c614:	0800c5d5 	.word	0x0800c5d5
 800c618:	0800c759 	.word	0x0800c759
 800c61c:	0800c683 	.word	0x0800c683
 800c620:	0800c713 	.word	0x0800c713
 800c624:	0800c5d5 	.word	0x0800c5d5
 800c628:	0800c5d5 	.word	0x0800c5d5
 800c62c:	0800c77b 	.word	0x0800c77b
 800c630:	0800c5d5 	.word	0x0800c5d5
 800c634:	0800c683 	.word	0x0800c683
 800c638:	0800c5d5 	.word	0x0800c5d5
 800c63c:	0800c5d5 	.word	0x0800c5d5
 800c640:	0800c71b 	.word	0x0800c71b
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	1d1a      	adds	r2, r3, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6032      	str	r2, [r6, #0]
 800c64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c654:	2301      	movs	r3, #1
 800c656:	e09d      	b.n	800c794 <_printf_i+0x1e8>
 800c658:	6833      	ldr	r3, [r6, #0]
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	1d19      	adds	r1, r3, #4
 800c65e:	6031      	str	r1, [r6, #0]
 800c660:	0606      	lsls	r6, r0, #24
 800c662:	d501      	bpl.n	800c668 <_printf_i+0xbc>
 800c664:	681d      	ldr	r5, [r3, #0]
 800c666:	e003      	b.n	800c670 <_printf_i+0xc4>
 800c668:	0645      	lsls	r5, r0, #25
 800c66a:	d5fb      	bpl.n	800c664 <_printf_i+0xb8>
 800c66c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c670:	2d00      	cmp	r5, #0
 800c672:	da03      	bge.n	800c67c <_printf_i+0xd0>
 800c674:	232d      	movs	r3, #45	@ 0x2d
 800c676:	426d      	negs	r5, r5
 800c678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c67c:	4859      	ldr	r0, [pc, #356]	@ (800c7e4 <_printf_i+0x238>)
 800c67e:	230a      	movs	r3, #10
 800c680:	e011      	b.n	800c6a6 <_printf_i+0xfa>
 800c682:	6821      	ldr	r1, [r4, #0]
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	0608      	lsls	r0, r1, #24
 800c688:	f853 5b04 	ldr.w	r5, [r3], #4
 800c68c:	d402      	bmi.n	800c694 <_printf_i+0xe8>
 800c68e:	0649      	lsls	r1, r1, #25
 800c690:	bf48      	it	mi
 800c692:	b2ad      	uxthmi	r5, r5
 800c694:	2f6f      	cmp	r7, #111	@ 0x6f
 800c696:	4853      	ldr	r0, [pc, #332]	@ (800c7e4 <_printf_i+0x238>)
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	bf14      	ite	ne
 800c69c:	230a      	movne	r3, #10
 800c69e:	2308      	moveq	r3, #8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6a6:	6866      	ldr	r6, [r4, #4]
 800c6a8:	60a6      	str	r6, [r4, #8]
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	bfa2      	ittt	ge
 800c6ae:	6821      	ldrge	r1, [r4, #0]
 800c6b0:	f021 0104 	bicge.w	r1, r1, #4
 800c6b4:	6021      	strge	r1, [r4, #0]
 800c6b6:	b90d      	cbnz	r5, 800c6bc <_printf_i+0x110>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	d04b      	beq.n	800c754 <_printf_i+0x1a8>
 800c6bc:	4616      	mov	r6, r2
 800c6be:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c2:	fb03 5711 	mls	r7, r3, r1, r5
 800c6c6:	5dc7      	ldrb	r7, [r0, r7]
 800c6c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6cc:	462f      	mov	r7, r5
 800c6ce:	42bb      	cmp	r3, r7
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	d9f4      	bls.n	800c6be <_printf_i+0x112>
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d10b      	bne.n	800c6f0 <_printf_i+0x144>
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	07df      	lsls	r7, r3, #31
 800c6dc:	d508      	bpl.n	800c6f0 <_printf_i+0x144>
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	6861      	ldr	r1, [r4, #4]
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	bfde      	ittt	le
 800c6e6:	2330      	movle	r3, #48	@ 0x30
 800c6e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f0:	1b92      	subs	r2, r2, r6
 800c6f2:	6122      	str	r2, [r4, #16]
 800c6f4:	f8cd a000 	str.w	sl, [sp]
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	aa03      	add	r2, sp, #12
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4640      	mov	r0, r8
 800c700:	f7ff fee6 	bl	800c4d0 <_printf_common>
 800c704:	3001      	adds	r0, #1
 800c706:	d14a      	bne.n	800c79e <_printf_i+0x1f2>
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	b004      	add	sp, #16
 800c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	f043 0320 	orr.w	r3, r3, #32
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	4833      	ldr	r0, [pc, #204]	@ (800c7e8 <_printf_i+0x23c>)
 800c71c:	2778      	movs	r7, #120	@ 0x78
 800c71e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	6831      	ldr	r1, [r6, #0]
 800c726:	061f      	lsls	r7, r3, #24
 800c728:	f851 5b04 	ldr.w	r5, [r1], #4
 800c72c:	d402      	bmi.n	800c734 <_printf_i+0x188>
 800c72e:	065f      	lsls	r7, r3, #25
 800c730:	bf48      	it	mi
 800c732:	b2ad      	uxthmi	r5, r5
 800c734:	6031      	str	r1, [r6, #0]
 800c736:	07d9      	lsls	r1, r3, #31
 800c738:	bf44      	itt	mi
 800c73a:	f043 0320 	orrmi.w	r3, r3, #32
 800c73e:	6023      	strmi	r3, [r4, #0]
 800c740:	b11d      	cbz	r5, 800c74a <_printf_i+0x19e>
 800c742:	2310      	movs	r3, #16
 800c744:	e7ac      	b.n	800c6a0 <_printf_i+0xf4>
 800c746:	4827      	ldr	r0, [pc, #156]	@ (800c7e4 <_printf_i+0x238>)
 800c748:	e7e9      	b.n	800c71e <_printf_i+0x172>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f023 0320 	bic.w	r3, r3, #32
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	e7f6      	b.n	800c742 <_printf_i+0x196>
 800c754:	4616      	mov	r6, r2
 800c756:	e7bd      	b.n	800c6d4 <_printf_i+0x128>
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	6825      	ldr	r5, [r4, #0]
 800c75c:	6961      	ldr	r1, [r4, #20]
 800c75e:	1d18      	adds	r0, r3, #4
 800c760:	6030      	str	r0, [r6, #0]
 800c762:	062e      	lsls	r6, r5, #24
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	d501      	bpl.n	800c76c <_printf_i+0x1c0>
 800c768:	6019      	str	r1, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0x1c6>
 800c76c:	0668      	lsls	r0, r5, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0x1bc>
 800c770:	8019      	strh	r1, [r3, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	4616      	mov	r6, r2
 800c778:	e7bc      	b.n	800c6f4 <_printf_i+0x148>
 800c77a:	6833      	ldr	r3, [r6, #0]
 800c77c:	1d1a      	adds	r2, r3, #4
 800c77e:	6032      	str	r2, [r6, #0]
 800c780:	681e      	ldr	r6, [r3, #0]
 800c782:	6862      	ldr	r2, [r4, #4]
 800c784:	2100      	movs	r1, #0
 800c786:	4630      	mov	r0, r6
 800c788:	f7f3 fd3a 	bl	8000200 <memchr>
 800c78c:	b108      	cbz	r0, 800c792 <_printf_i+0x1e6>
 800c78e:	1b80      	subs	r0, r0, r6
 800c790:	6060      	str	r0, [r4, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	2300      	movs	r3, #0
 800c798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c79c:	e7aa      	b.n	800c6f4 <_printf_i+0x148>
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	47d0      	blx	sl
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d0ad      	beq.n	800c708 <_printf_i+0x15c>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	079b      	lsls	r3, r3, #30
 800c7b0:	d413      	bmi.n	800c7da <_printf_i+0x22e>
 800c7b2:	68e0      	ldr	r0, [r4, #12]
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	4298      	cmp	r0, r3
 800c7b8:	bfb8      	it	lt
 800c7ba:	4618      	movlt	r0, r3
 800c7bc:	e7a6      	b.n	800c70c <_printf_i+0x160>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	47d0      	blx	sl
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d09d      	beq.n	800c708 <_printf_i+0x15c>
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	9903      	ldr	r1, [sp, #12]
 800c7d2:	1a5b      	subs	r3, r3, r1
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dcf2      	bgt.n	800c7be <_printf_i+0x212>
 800c7d8:	e7eb      	b.n	800c7b2 <_printf_i+0x206>
 800c7da:	2500      	movs	r5, #0
 800c7dc:	f104 0619 	add.w	r6, r4, #25
 800c7e0:	e7f5      	b.n	800c7ce <_printf_i+0x222>
 800c7e2:	bf00      	nop
 800c7e4:	0800efa9 	.word	0x0800efa9
 800c7e8:	0800efba 	.word	0x0800efba

0800c7ec <__sflush_r>:
 800c7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	0716      	lsls	r6, r2, #28
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	d454      	bmi.n	800c8a6 <__sflush_r+0xba>
 800c7fc:	684b      	ldr	r3, [r1, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dc02      	bgt.n	800c808 <__sflush_r+0x1c>
 800c802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c804:	2b00      	cmp	r3, #0
 800c806:	dd48      	ble.n	800c89a <__sflush_r+0xae>
 800c808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	d045      	beq.n	800c89a <__sflush_r+0xae>
 800c80e:	2300      	movs	r3, #0
 800c810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c814:	682f      	ldr	r7, [r5, #0]
 800c816:	6a21      	ldr	r1, [r4, #32]
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	d030      	beq.n	800c87e <__sflush_r+0x92>
 800c81c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	0759      	lsls	r1, r3, #29
 800c822:	d505      	bpl.n	800c830 <__sflush_r+0x44>
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	1ad2      	subs	r2, r2, r3
 800c828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c82a:	b10b      	cbz	r3, 800c830 <__sflush_r+0x44>
 800c82c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	2300      	movs	r3, #0
 800c832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c834:	6a21      	ldr	r1, [r4, #32]
 800c836:	4628      	mov	r0, r5
 800c838:	47b0      	blx	r6
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	d106      	bne.n	800c84e <__sflush_r+0x62>
 800c840:	6829      	ldr	r1, [r5, #0]
 800c842:	291d      	cmp	r1, #29
 800c844:	d82b      	bhi.n	800c89e <__sflush_r+0xb2>
 800c846:	4a2a      	ldr	r2, [pc, #168]	@ (800c8f0 <__sflush_r+0x104>)
 800c848:	410a      	asrs	r2, r1
 800c84a:	07d6      	lsls	r6, r2, #31
 800c84c:	d427      	bmi.n	800c89e <__sflush_r+0xb2>
 800c84e:	2200      	movs	r2, #0
 800c850:	6062      	str	r2, [r4, #4]
 800c852:	04d9      	lsls	r1, r3, #19
 800c854:	6922      	ldr	r2, [r4, #16]
 800c856:	6022      	str	r2, [r4, #0]
 800c858:	d504      	bpl.n	800c864 <__sflush_r+0x78>
 800c85a:	1c42      	adds	r2, r0, #1
 800c85c:	d101      	bne.n	800c862 <__sflush_r+0x76>
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	b903      	cbnz	r3, 800c864 <__sflush_r+0x78>
 800c862:	6560      	str	r0, [r4, #84]	@ 0x54
 800c864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c866:	602f      	str	r7, [r5, #0]
 800c868:	b1b9      	cbz	r1, 800c89a <__sflush_r+0xae>
 800c86a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c86e:	4299      	cmp	r1, r3
 800c870:	d002      	beq.n	800c878 <__sflush_r+0x8c>
 800c872:	4628      	mov	r0, r5
 800c874:	f7ff fca0 	bl	800c1b8 <_free_r>
 800c878:	2300      	movs	r3, #0
 800c87a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c87c:	e00d      	b.n	800c89a <__sflush_r+0xae>
 800c87e:	2301      	movs	r3, #1
 800c880:	4628      	mov	r0, r5
 800c882:	47b0      	blx	r6
 800c884:	4602      	mov	r2, r0
 800c886:	1c50      	adds	r0, r2, #1
 800c888:	d1c9      	bne.n	800c81e <__sflush_r+0x32>
 800c88a:	682b      	ldr	r3, [r5, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d0c6      	beq.n	800c81e <__sflush_r+0x32>
 800c890:	2b1d      	cmp	r3, #29
 800c892:	d001      	beq.n	800c898 <__sflush_r+0xac>
 800c894:	2b16      	cmp	r3, #22
 800c896:	d11e      	bne.n	800c8d6 <__sflush_r+0xea>
 800c898:	602f      	str	r7, [r5, #0]
 800c89a:	2000      	movs	r0, #0
 800c89c:	e022      	b.n	800c8e4 <__sflush_r+0xf8>
 800c89e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	e01b      	b.n	800c8de <__sflush_r+0xf2>
 800c8a6:	690f      	ldr	r7, [r1, #16]
 800c8a8:	2f00      	cmp	r7, #0
 800c8aa:	d0f6      	beq.n	800c89a <__sflush_r+0xae>
 800c8ac:	0793      	lsls	r3, r2, #30
 800c8ae:	680e      	ldr	r6, [r1, #0]
 800c8b0:	bf08      	it	eq
 800c8b2:	694b      	ldreq	r3, [r1, #20]
 800c8b4:	600f      	str	r7, [r1, #0]
 800c8b6:	bf18      	it	ne
 800c8b8:	2300      	movne	r3, #0
 800c8ba:	eba6 0807 	sub.w	r8, r6, r7
 800c8be:	608b      	str	r3, [r1, #8]
 800c8c0:	f1b8 0f00 	cmp.w	r8, #0
 800c8c4:	dde9      	ble.n	800c89a <__sflush_r+0xae>
 800c8c6:	6a21      	ldr	r1, [r4, #32]
 800c8c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8ca:	4643      	mov	r3, r8
 800c8cc:	463a      	mov	r2, r7
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b0      	blx	r6
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	dc08      	bgt.n	800c8e8 <__sflush_r+0xfc>
 800c8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8de:	81a3      	strh	r3, [r4, #12]
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e8:	4407      	add	r7, r0
 800c8ea:	eba8 0800 	sub.w	r8, r8, r0
 800c8ee:	e7e7      	b.n	800c8c0 <__sflush_r+0xd4>
 800c8f0:	dfbffffe 	.word	0xdfbffffe

0800c8f4 <_fflush_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	690b      	ldr	r3, [r1, #16]
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	b913      	cbnz	r3, 800c904 <_fflush_r+0x10>
 800c8fe:	2500      	movs	r5, #0
 800c900:	4628      	mov	r0, r5
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	b118      	cbz	r0, 800c90e <_fflush_r+0x1a>
 800c906:	6a03      	ldr	r3, [r0, #32]
 800c908:	b90b      	cbnz	r3, 800c90e <_fflush_r+0x1a>
 800c90a:	f7ff fa4b 	bl	800bda4 <__sinit>
 800c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f3      	beq.n	800c8fe <_fflush_r+0xa>
 800c916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c918:	07d0      	lsls	r0, r2, #31
 800c91a:	d404      	bmi.n	800c926 <_fflush_r+0x32>
 800c91c:	0599      	lsls	r1, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_fflush_r+0x32>
 800c920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c922:	f7ff fc46 	bl	800c1b2 <__retarget_lock_acquire_recursive>
 800c926:	4628      	mov	r0, r5
 800c928:	4621      	mov	r1, r4
 800c92a:	f7ff ff5f 	bl	800c7ec <__sflush_r>
 800c92e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c930:	07da      	lsls	r2, r3, #31
 800c932:	4605      	mov	r5, r0
 800c934:	d4e4      	bmi.n	800c900 <_fflush_r+0xc>
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	059b      	lsls	r3, r3, #22
 800c93a:	d4e1      	bmi.n	800c900 <_fflush_r+0xc>
 800c93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c93e:	f7ff fc39 	bl	800c1b4 <__retarget_lock_release_recursive>
 800c942:	e7dd      	b.n	800c900 <_fflush_r+0xc>

0800c944 <__swhatbuf_r>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	460c      	mov	r4, r1
 800c948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94c:	2900      	cmp	r1, #0
 800c94e:	b096      	sub	sp, #88	@ 0x58
 800c950:	4615      	mov	r5, r2
 800c952:	461e      	mov	r6, r3
 800c954:	da0d      	bge.n	800c972 <__swhatbuf_r+0x2e>
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c95c:	f04f 0100 	mov.w	r1, #0
 800c960:	bf14      	ite	ne
 800c962:	2340      	movne	r3, #64	@ 0x40
 800c964:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c968:	2000      	movs	r0, #0
 800c96a:	6031      	str	r1, [r6, #0]
 800c96c:	602b      	str	r3, [r5, #0]
 800c96e:	b016      	add	sp, #88	@ 0x58
 800c970:	bd70      	pop	{r4, r5, r6, pc}
 800c972:	466a      	mov	r2, sp
 800c974:	f000 f848 	bl	800ca08 <_fstat_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	dbec      	blt.n	800c956 <__swhatbuf_r+0x12>
 800c97c:	9901      	ldr	r1, [sp, #4]
 800c97e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c986:	4259      	negs	r1, r3
 800c988:	4159      	adcs	r1, r3
 800c98a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c98e:	e7eb      	b.n	800c968 <__swhatbuf_r+0x24>

0800c990 <__smakebuf_r>:
 800c990:	898b      	ldrh	r3, [r1, #12]
 800c992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c994:	079d      	lsls	r5, r3, #30
 800c996:	4606      	mov	r6, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	d507      	bpl.n	800c9ac <__smakebuf_r+0x1c>
 800c99c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	6123      	str	r3, [r4, #16]
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	b003      	add	sp, #12
 800c9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ac:	ab01      	add	r3, sp, #4
 800c9ae:	466a      	mov	r2, sp
 800c9b0:	f7ff ffc8 	bl	800c944 <__swhatbuf_r>
 800c9b4:	9f00      	ldr	r7, [sp, #0]
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff f8da 	bl	800bb74 <_malloc_r>
 800c9c0:	b948      	cbnz	r0, 800c9d6 <__smakebuf_r+0x46>
 800c9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c6:	059a      	lsls	r2, r3, #22
 800c9c8:	d4ee      	bmi.n	800c9a8 <__smakebuf_r+0x18>
 800c9ca:	f023 0303 	bic.w	r3, r3, #3
 800c9ce:	f043 0302 	orr.w	r3, r3, #2
 800c9d2:	81a3      	strh	r3, [r4, #12]
 800c9d4:	e7e2      	b.n	800c99c <__smakebuf_r+0xc>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	6020      	str	r0, [r4, #0]
 800c9da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	9b01      	ldr	r3, [sp, #4]
 800c9e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9e6:	b15b      	cbz	r3, 800ca00 <__smakebuf_r+0x70>
 800c9e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f000 f81d 	bl	800ca2c <_isatty_r>
 800c9f2:	b128      	cbz	r0, 800ca00 <__smakebuf_r+0x70>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	431d      	orrs	r5, r3
 800ca04:	81a5      	strh	r5, [r4, #12]
 800ca06:	e7cf      	b.n	800c9a8 <__smakebuf_r+0x18>

0800ca08 <_fstat_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d07      	ldr	r5, [pc, #28]	@ (800ca28 <_fstat_r+0x20>)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4604      	mov	r4, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	4611      	mov	r1, r2
 800ca14:	602b      	str	r3, [r5, #0]
 800ca16:	f000 f955 	bl	800ccc4 <_fstat>
 800ca1a:	1c43      	adds	r3, r0, #1
 800ca1c:	d102      	bne.n	800ca24 <_fstat_r+0x1c>
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	b103      	cbz	r3, 800ca24 <_fstat_r+0x1c>
 800ca22:	6023      	str	r3, [r4, #0]
 800ca24:	bd38      	pop	{r3, r4, r5, pc}
 800ca26:	bf00      	nop
 800ca28:	200021a4 	.word	0x200021a4

0800ca2c <_isatty_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d06      	ldr	r5, [pc, #24]	@ (800ca48 <_isatty_r+0x1c>)
 800ca30:	2300      	movs	r3, #0
 800ca32:	4604      	mov	r4, r0
 800ca34:	4608      	mov	r0, r1
 800ca36:	602b      	str	r3, [r5, #0]
 800ca38:	f000 f94c 	bl	800ccd4 <_isatty>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d102      	bne.n	800ca46 <_isatty_r+0x1a>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	b103      	cbz	r3, 800ca46 <_isatty_r+0x1a>
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	200021a4 	.word	0x200021a4

0800ca4c <expf>:
 800ca4c:	b508      	push	{r3, lr}
 800ca4e:	ed2d 8b02 	vpush	{d8}
 800ca52:	eef0 8a40 	vmov.f32	s17, s0
 800ca56:	f000 f85f 	bl	800cb18 <__ieee754_expf>
 800ca5a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca5e:	eeb0 0a68 	vmov.f32	s0, s17
 800ca62:	f000 f829 	bl	800cab8 <finitef>
 800ca66:	b160      	cbz	r0, 800ca82 <expf+0x36>
 800ca68:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800caa8 <expf+0x5c>
 800ca6c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ca70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca74:	dd0a      	ble.n	800ca8c <expf+0x40>
 800ca76:	f7ff fb71 	bl	800c15c <__errno>
 800ca7a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800caac <expf+0x60>
 800ca7e:	2322      	movs	r3, #34	@ 0x22
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	eeb0 0a48 	vmov.f32	s0, s16
 800ca86:	ecbd 8b02 	vpop	{d8}
 800ca8a:	bd08      	pop	{r3, pc}
 800ca8c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cab0 <expf+0x64>
 800ca90:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca98:	d5f3      	bpl.n	800ca82 <expf+0x36>
 800ca9a:	f7ff fb5f 	bl	800c15c <__errno>
 800ca9e:	2322      	movs	r3, #34	@ 0x22
 800caa0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800cab4 <expf+0x68>
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	e7ec      	b.n	800ca82 <expf+0x36>
 800caa8:	42b17217 	.word	0x42b17217
 800caac:	7f800000 	.word	0x7f800000
 800cab0:	c2cff1b5 	.word	0xc2cff1b5
 800cab4:	00000000 	.word	0x00000000

0800cab8 <finitef>:
 800cab8:	ee10 3a10 	vmov	r3, s0
 800cabc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800cac0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800cac4:	bfac      	ite	ge
 800cac6:	2000      	movge	r0, #0
 800cac8:	2001      	movlt	r0, #1
 800caca:	4770      	bx	lr

0800cacc <with_errnof>:
 800cacc:	b510      	push	{r4, lr}
 800cace:	ed2d 8b02 	vpush	{d8}
 800cad2:	eeb0 8a40 	vmov.f32	s16, s0
 800cad6:	4604      	mov	r4, r0
 800cad8:	f7ff fb40 	bl	800c15c <__errno>
 800cadc:	eeb0 0a48 	vmov.f32	s0, s16
 800cae0:	ecbd 8b02 	vpop	{d8}
 800cae4:	6004      	str	r4, [r0, #0]
 800cae6:	bd10      	pop	{r4, pc}

0800cae8 <xflowf>:
 800cae8:	b130      	cbz	r0, 800caf8 <xflowf+0x10>
 800caea:	eef1 7a40 	vneg.f32	s15, s0
 800caee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800caf2:	2022      	movs	r0, #34	@ 0x22
 800caf4:	f7ff bfea 	b.w	800cacc <with_errnof>
 800caf8:	eef0 7a40 	vmov.f32	s15, s0
 800cafc:	e7f7      	b.n	800caee <xflowf+0x6>
	...

0800cb00 <__math_uflowf>:
 800cb00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb08 <__math_uflowf+0x8>
 800cb04:	f7ff bff0 	b.w	800cae8 <xflowf>
 800cb08:	10000000 	.word	0x10000000

0800cb0c <__math_oflowf>:
 800cb0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb14 <__math_oflowf+0x8>
 800cb10:	f7ff bfea 	b.w	800cae8 <xflowf>
 800cb14:	70000000 	.word	0x70000000

0800cb18 <__ieee754_expf>:
 800cb18:	ee10 2a10 	vmov	r2, s0
 800cb1c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800cb20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb24:	d902      	bls.n	800cb2c <__ieee754_expf+0x14>
 800cb26:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb2a:	4770      	bx	lr
 800cb2c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800cb30:	d106      	bne.n	800cb40 <__ieee754_expf+0x28>
 800cb32:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800cc6c <__ieee754_expf+0x154>
 800cb36:	2900      	cmp	r1, #0
 800cb38:	bf18      	it	ne
 800cb3a:	eeb0 0a67 	vmovne.f32	s0, s15
 800cb3e:	4770      	bx	lr
 800cb40:	484b      	ldr	r0, [pc, #300]	@ (800cc70 <__ieee754_expf+0x158>)
 800cb42:	4282      	cmp	r2, r0
 800cb44:	dd02      	ble.n	800cb4c <__ieee754_expf+0x34>
 800cb46:	2000      	movs	r0, #0
 800cb48:	f7ff bfe0 	b.w	800cb0c <__math_oflowf>
 800cb4c:	2a00      	cmp	r2, #0
 800cb4e:	da05      	bge.n	800cb5c <__ieee754_expf+0x44>
 800cb50:	4a48      	ldr	r2, [pc, #288]	@ (800cc74 <__ieee754_expf+0x15c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d902      	bls.n	800cb5c <__ieee754_expf+0x44>
 800cb56:	2000      	movs	r0, #0
 800cb58:	f7ff bfd2 	b.w	800cb00 <__math_uflowf>
 800cb5c:	4a46      	ldr	r2, [pc, #280]	@ (800cc78 <__ieee754_expf+0x160>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800cb64:	d952      	bls.n	800cc0c <__ieee754_expf+0xf4>
 800cb66:	4a45      	ldr	r2, [pc, #276]	@ (800cc7c <__ieee754_expf+0x164>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800cb6e:	d834      	bhi.n	800cbda <__ieee754_expf+0xc2>
 800cb70:	4b43      	ldr	r3, [pc, #268]	@ (800cc80 <__ieee754_expf+0x168>)
 800cb72:	4413      	add	r3, r2
 800cb74:	ed93 7a00 	vldr	s14, [r3]
 800cb78:	4b42      	ldr	r3, [pc, #264]	@ (800cc84 <__ieee754_expf+0x16c>)
 800cb7a:	4413      	add	r3, r2
 800cb7c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800cb80:	f1c1 0201 	rsb	r2, r1, #1
 800cb84:	edd3 7a00 	vldr	s15, [r3]
 800cb88:	1a52      	subs	r2, r2, r1
 800cb8a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cb8e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800cb92:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800cc88 <__ieee754_expf+0x170>
 800cb96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc8c <__ieee754_expf+0x174>
 800cb9a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800cb9e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800cc90 <__ieee754_expf+0x178>
 800cba2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cba6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cc94 <__ieee754_expf+0x17c>
 800cbaa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800cbae:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800cc98 <__ieee754_expf+0x180>
 800cbb2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800cbb6:	eef0 6a40 	vmov.f32	s13, s0
 800cbba:	eee5 6a46 	vfms.f32	s13, s10, s12
 800cbbe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cbc2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800cbc6:	bb92      	cbnz	r2, 800cc2e <__ieee754_expf+0x116>
 800cbc8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800cbcc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800cbd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cbd4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800cbd8:	4770      	bx	lr
 800cbda:	4b30      	ldr	r3, [pc, #192]	@ (800cc9c <__ieee754_expf+0x184>)
 800cbdc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800cca0 <__ieee754_expf+0x188>
 800cbe0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800cca4 <__ieee754_expf+0x18c>
 800cbe4:	4413      	add	r3, r2
 800cbe6:	edd3 7a00 	vldr	s15, [r3]
 800cbea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cbee:	eeb0 7a40 	vmov.f32	s14, s0
 800cbf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbf6:	ee17 2a90 	vmov	r2, s15
 800cbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbfe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cc02:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800cca8 <__ieee754_expf+0x190>
 800cc06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc0a:	e7be      	b.n	800cb8a <__ieee754_expf+0x72>
 800cc0c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800cc10:	d20b      	bcs.n	800cc2a <__ieee754_expf+0x112>
 800cc12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ccac <__ieee754_expf+0x194>
 800cc16:	ee70 6a26 	vadd.f32	s13, s0, s13
 800cc1a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800cc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc22:	dd02      	ble.n	800cc2a <__ieee754_expf+0x112>
 800cc24:	ee30 0a25 	vadd.f32	s0, s0, s11
 800cc28:	4770      	bx	lr
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	e7af      	b.n	800cb8e <__ieee754_expf+0x76>
 800cc2e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800cc32:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800cc36:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800cc3a:	bfb8      	it	lt
 800cc3c:	3264      	addlt	r2, #100	@ 0x64
 800cc3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc46:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cc4a:	ee17 3a90 	vmov	r3, s15
 800cc4e:	bfab      	itete	ge
 800cc50:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cc54:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cc58:	ee00 3a10 	vmovge	s0, r3
 800cc5c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800ccb0 <__ieee754_expf+0x198>
 800cc60:	bfbc      	itt	lt
 800cc62:	ee00 3a10 	vmovlt	s0, r3
 800cc66:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cc6a:	4770      	bx	lr
 800cc6c:	00000000 	.word	0x00000000
 800cc70:	42b17217 	.word	0x42b17217
 800cc74:	42cff1b5 	.word	0x42cff1b5
 800cc78:	3eb17218 	.word	0x3eb17218
 800cc7c:	3f851591 	.word	0x3f851591
 800cc80:	0800efd4 	.word	0x0800efd4
 800cc84:	0800efcc 	.word	0x0800efcc
 800cc88:	3331bb4c 	.word	0x3331bb4c
 800cc8c:	b5ddea0e 	.word	0xb5ddea0e
 800cc90:	388ab355 	.word	0x388ab355
 800cc94:	bb360b61 	.word	0xbb360b61
 800cc98:	3e2aaaab 	.word	0x3e2aaaab
 800cc9c:	0800efdc 	.word	0x0800efdc
 800cca0:	3fb8aa3b 	.word	0x3fb8aa3b
 800cca4:	3f317180 	.word	0x3f317180
 800cca8:	3717f7d1 	.word	0x3717f7d1
 800ccac:	7149f2ca 	.word	0x7149f2ca
 800ccb0:	0d800000 	.word	0x0d800000

0800ccb4 <_close>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	@ (800ccc0 <_close+0xc>)
 800ccb6:	2258      	movs	r2, #88	@ 0x58
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbe:	4770      	bx	lr
 800ccc0:	200021a4 	.word	0x200021a4

0800ccc4 <_fstat>:
 800ccc4:	4b02      	ldr	r3, [pc, #8]	@ (800ccd0 <_fstat+0xc>)
 800ccc6:	2258      	movs	r2, #88	@ 0x58
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	4770      	bx	lr
 800ccd0:	200021a4 	.word	0x200021a4

0800ccd4 <_isatty>:
 800ccd4:	4b02      	ldr	r3, [pc, #8]	@ (800cce0 <_isatty+0xc>)
 800ccd6:	2258      	movs	r2, #88	@ 0x58
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	2000      	movs	r0, #0
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	200021a4 	.word	0x200021a4

0800cce4 <_lseek>:
 800cce4:	4b02      	ldr	r3, [pc, #8]	@ (800ccf0 <_lseek+0xc>)
 800cce6:	2258      	movs	r2, #88	@ 0x58
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	f04f 30ff 	mov.w	r0, #4294967295
 800ccee:	4770      	bx	lr
 800ccf0:	200021a4 	.word	0x200021a4

0800ccf4 <_read>:
 800ccf4:	4b02      	ldr	r3, [pc, #8]	@ (800cd00 <_read+0xc>)
 800ccf6:	2258      	movs	r2, #88	@ 0x58
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfe:	4770      	bx	lr
 800cd00:	200021a4 	.word	0x200021a4

0800cd04 <_write>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	@ (800cd10 <_write+0xc>)
 800cd06:	2258      	movs	r2, #88	@ 0x58
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0e:	4770      	bx	lr
 800cd10:	200021a4 	.word	0x200021a4

0800cd14 <_init>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr

0800cd20 <_fini>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	bf00      	nop
 800cd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd26:	bc08      	pop	{r3}
 800cd28:	469e      	mov	lr, r3
 800cd2a:	4770      	bx	lr
